/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/
(function() {
    (function() {
        var eventRegister = {};
        var findReactProp = function(elem) {
            for (var key in elem) {
                if (key.indexOf("__reactInternalInstance") === 0 || key.indexOf("__reactProps")) {
                    return elem[key].memoizedProps || elem[key]._currentElement.props;
                }
            }
            return null;
        };
        var dressUp = function(e) {
            e.defaultPrevented = false;
            e.target = document.activeElement;
            e.preventDefault = function() {};
            return e;
        };
        document.addEventListener("gingerModule-hasReactProp", function(e) {
            var data = e.detail;
            var hasReactProp = !!findReactProp(data.element);
            data.cb(hasReactProp);
        });
        document.addEventListener("gingerModule-eventEmitter-react-fire", function(e) {
            var reactProps = findReactProp(document.activeElement);
            if (e.detail.event) {
                var eventName = e.detail.event;
                var eventParams = e.detail.params ? dressUp(e.detail.params) : {};
                if (reactProps && eventName && reactProps[eventName]) {
                    reactProps[eventName](eventParams);
                }
            } else if (e.detail.prop) {
                if (reactProps) {
                    reactProps[e.detail.prop] = e.detail.value;
                }
            }
        });
        document.addEventListener("gingerModule-eventEmitter-onpaste", function(e) {
            var reactProps = findReactProp(document.activeElement);
            var pasteObj = dressUp({
                clipboardData: {
                    getData: function() {
                        return e.detail || "";
                    },
                    items: [ "text/plain" ]
                }
            });
            if (reactProps && reactProps.onPaste) {
                reactProps.onPaste(pasteObj);
            } else if (reactProps && reactProps.onChange) {
                var textarea = document.activeElement;
                var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
                nativeTextAreaValueSetter.call(textarea, e.detail);
                var event = new Event("input", {
                    bubbles: true
                });
                textarea.dispatchEvent(event);
            }
        });
        document.addEventListener("gingerModule-eventEmitter-onkeydown", function(e) {
            var reactProps = findReactProp(document.activeElement);
            var keyDownObj = dressUp(e.detail);
            if (reactProps) {
                reactProps.onKeyDown(keyDownObj);
            }
        });
        var trigger = function(eventName, data) {
            if (!eventRegister[eventName]) return;
            for (var i = 0; i < eventRegister[eventName].length; i++) {
                var listener = eventRegister[eventName][i];
                listener(new CustomEvent(eventName), data);
            }
        };
        var nativeEventListener = document.addEventListener.bind(document);
        document.addEventListener = function(eventName, callback, options) {
            var eventRegisterItem = eventRegister[eventName] || [];
            eventRegisterItem.push(callback);
            eventRegister[eventName] = eventRegisterItem;
            nativeEventListener(eventName, callback, options);
        };
    })();
})();
//# sourceMappingURL=inject_script.min.js.map