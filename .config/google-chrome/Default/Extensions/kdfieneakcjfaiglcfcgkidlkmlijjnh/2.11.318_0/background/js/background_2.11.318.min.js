/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/
if (!gingerModule) {
    var gingerModule = function(moduleName, module) {
        var modules = {};
        var initModule = function(moduleName) {
            var module = modules[moduleName];
            module.module = module.classCache();
            module.isInited = true;
        };
        var load = function(moduleName, module, deps) {
            if (modules[moduleName]) {
                if (console && console.log) console.log("Module already loaded: " + moduleName, "...overwriting module");
            }
            modules[moduleName] = {
                classCache: module,
                isInited: false,
                deps: deps
            };
            return modules[moduleName];
        };
        var hasAllDependencies = function(deps) {
            if (deps && deps.length) {
                var dependenciesLoaded = true;
                for (var di = 0; di < deps.length; di++) {
                    if (!hasAllDependencies(deps[di])) {
                        dependenciesLoaded = false;
                        break;
                    }
                }
                return dependenciesLoaded;
            } else {
                return true;
            }
        };
        var get = function(moduleName, returnClass) {
            if (typeof modules[moduleName] === "undefined") {
                throw "Module '" + moduleName + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!hasAllDependencies(moduleName.deps)) {
                throw "Module '" + moduleName + "' doesn't have all dependencies loaded.";
            }
            if (!modules[moduleName].isInited) {
                initModule(moduleName);
            }
            if (returnClass) return modules[moduleName].classCache; else return modules[moduleName].module;
        };
        var debug = function(moduleName) {
            if (!modules[moduleName]) {
                console.log(moduleName, "not added to project or has not been loaded");
                return false;
            } else if (!modules[moduleName].isInited) {
                console.log("module ", moduleName, "not loaded, because");
                var deps = modules[moduleName].deps;
                if (deps.length) {
                    var hasEveryThingLoaded = true;
                    for (var i = 0; i < deps.length; i++) {
                        var dep = deps[i];
                        hasEveryThingLoaded = hasEveryThingLoaded && debug(dep);
                    }
                    return hasEveryThingLoaded;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: load,
            get: get,
            debug: debug
        };
    }();
}

gingerModule.load("gingerchromeext.browser", function() {
    return chrome;
});

gingerModule.load("gingerchromeext.background.ajax", function() {
    var execute = function(ajaxOpts) {
        const init = {
            ...ajaxOpts
        };
        delete init["url"];
        return fetch(ajaxOpts["url"], init).then(function(response) {
            if (response.ok) {
                return response.json();
            }
            throw response.status;
        });
    };
    return {
        execute: execute
    };
}, []);

gingerModule.load("gingerchromeext.background.browserInterface", function() {
    var getActiveTab = function() {
        return new Promise(resolve => {
            gingerModule.get("gingerchromeext.browser").tabs.query({
                currentWindow: true,
                active: true
            }, tabArray => resolve(tabArray[0]));
        });
    };
    var getTabId = function(args) {
        return args.sender;
    };
    return {
        getActiveTab: getActiveTab,
        getTabId: getTabId
    };
}, []);

gingerModule.load("gingerchromeext.background.config", function() {
    var baseUrls = {
        urlBase: "https://www.gingersoftware.com",
        urlBaseAuth: "https://auth.gingersoftware.com",
        urlBaseInlineAuth: "https://www.gingersoftware.com/auth1",
        urlBaseUM: "https://umservices.gingersoftware.com",
        urlBaseCDN: "https://cdn.gingersoftware.com",
        urlBaseSMB: "https://smb.gingersoftware.com",
        urlBaseAPI: "https://services.gingersoftware.com",
        urlBaseAPIDefinitions: "https://definition-api.reverso.net",
        urlBaseAPIExt: "https://api-extension.gingersoftware.com",
        urlBaseRephraser: "https://rephrasesrv.gingersoftware.com"
    };
    var config = {
        isIFramePopup: true,
        wordsLimitRephrase: 36,
        apiKey: "ChromeExtension",
        affId: "chromeExt",
        extOrigin: "ginger.ext.chrome",
        clientVersion: gingerModule.get("gingerchromeext.browser").runtime.getManifest().version,
        widgetUid: "f882d471-53f2-431f-8fe7-ad08beb3370c",
        trackingSource: "extensionStandaloneApp",
        source: "webWidgetChromeStoreExtension",
        dialect: "US",
        env: "production",
        platform: "chrome",
        measurementID: "G-PYJPH0C6FG",
        gaApiKey: "U1pfIqO4Rfe7zdfU3xf_Lw",
        anonUserId: "fddbb18c-11c0-4238-9ab5-200676b5b94b",
        licenseStatus: {
            free: 0,
            premium: 2
        },
        urlBase: baseUrls.urlBase,
        urlBaseRephraser: baseUrls.urlBaseRephraser,
        urlBaseAuth: baseUrls.urlBaseAuth,
        urlBaseInlineAuth: baseUrls.urlBaseInlineAuth,
        urlBaseUM: baseUrls.urlBaseUM,
        urlBaseCDN: baseUrls.urlBaseCDN,
        urlBaseSMB: baseUrls.urlBaseSMB,
        urlAddPlatformToUser: baseUrls.urlBaseUM + "/UM_LoginBased/UMOperations/json/AddPlatformToUser",
        urlGetSubscriptionsByUserIdentifier: baseUrls.urlBaseUM + "/Subscriptions/GetSubscriptionsByUserIdentifier",
        urlGetUserDetails: baseUrls.urlBaseUM + "/UM_LoginBased/UMOperations/jsonSecured/GetUserDetails",
        urlDefinitions: baseUrls.urlBaseAPIDefinitions + "/v1/api/definitions",
        urlGingerTheUserTextFull: baseUrls.urlBaseAPIExt + "/Ginger/correct/jsonSecured/GingerTheUserTextFull",
        urlGingerTheTextFull: baseUrls.urlBaseAPIExt + "/Ginger/correct/jsonSecured/GingerTheTextFull",
        urlDocument: baseUrls.urlBaseAPIExt + "/correction/v1/document",
        urlIsSpelledCorrectly: baseUrls.urlBaseAPIExt + "/Ginger/correct/jsonSecured/IsSpelledCorrectly",
        urlSMBTeams: baseUrls.urlBaseSMB + "/Teams",
        urlSMBGetSubscriptionDetails: baseUrls.urlBaseSMB + "/Subscriptions/GetSubscriptionDetails",
        urlSynonymsReverso: "https://synonyms.reverso.net/api/v2/search/en/",
        urlCDNPostInstall: baseUrls.urlBase + "/extensions/postinstall",
        urlGA: "https://www.google-analytics.com/collect",
        urlGA4: "https://www.google-analytics.com/mp/collect",
        urlGA4Debug: "https://www.google-analytics.com/debug/mp/collect",
        urlRephrase: baseUrls.urlBaseRephraser + "/rephrase/rephrase",
        urlRephraseSecured: baseUrls.urlBaseRephraser + "/Rephrase/secured/rephrase",
        urlDetectLang: "https://lang-utils-api.reverso.net/langdetect",
        urlBaseTranslation: baseUrls.urlBaseAPI + "/Translation/jsonsecured/",
        urlGetSupportedLanguage: baseUrls.urlBaseAPIExt + "/Translation/GetSupportedLanguageList"
    };
    return {
        get: function(property) {
            return property ? config[property] : config;
        },
        set: function(property, value) {
            config[property] = value;
            return config;
        }
    };
}, [ "gingerchromeext.browser" ]);

gingerModule.load("gingerchromeext.background.contentConnector", function() {
    var handleMessage = function(request, sender, sendResponse) {
        try {
            var callArgs = request.callArgs;
            if (!callArgs) {
                callArgs = null;
            } else if (!Array.isArray(callArgs)) {
                callArgs = [ callArgs ];
            }
            if (request.includeSender) {
                if (!callArgs) callArgs = [];
                callArgs.push({
                    sender: sender
                });
            }
            if (request.promise) {
                gingerModule.get(request.module)[request.callFunction].apply(this, callArgs).then(function(result) {
                    if (!result) result = false;
                    sendResponse({
                        resolved: true,
                        result: result
                    });
                }, function(result) {
                    if (!result) result = false;
                    sendResponse({
                        rejected: true,
                        result: result
                    });
                });
            } else {
                var result = gingerModule.get(request.module)[request.callFunction].apply(this, callArgs);
                sendResponse(result);
                return false;
            }
        } catch (e) {
            console.error("background failed to call function requested from content", request, e);
        }
        return true;
    };
    gingerModule.get("gingerchromeext.browser").runtime.onMessage.addListener(handleMessage);
    var send = function(message) {
        gingerModule.get("gingerchromeext.browser").runtime.sendMessage(message, function(response) {});
    };
    return {
        send: send,
        handleMessage: handleMessage
    };
}, [ "gingerchromeext.background.session", "gingerchromeext.background.config" ]);

gingerModule.load("gingerchromeext.background.cookies", function() {
    var setCookies = function(name, cookie, expirationDate) {
        gingerModule.get("gingerchromeext.browser").cookies.set({
            url: gingerModule.get("gingerchromeext.background.config").get("urlBase"),
            name: name,
            value: cookie,
            expirationDate: expirationDate,
            domain: ".gingersoftware.com",
            path: "/"
        });
    };
    return {
        setCookies: setCookies
    };
}, [ "gingerchromeext.background.config" ]);

gingerModule.load("gingerchromeext.background.correctionLimits", function() {
    var update = function() {
        return new Promise(function(resolve, reject) {
            gingerModule.get("gingerchromeext.background.storage").get("correctionLimit").then(function(correctionLimit) {
                if (!correctionLimit) {
                    var updatedCorrectionLimit = {
                        free: 600,
                        premium: 5e3
                    };
                    gingerModule.get("gingerchromeext.background.storage").set("correctionLimit", updatedCorrectionLimit);
                    resolve(updatedCorrectionLimit);
                } else {
                    resolve(correctionLimit);
                }
            });
        });
    };
    function get() {
        return new Promise(function(resolve, reject) {
            gingerModule.get("gingerchromeext.background.storage").get("correctionLimit").then(function(correctionLimit) {
                if (!correctionLimit) {
                    update().then(function(result) {
                        resolve(result);
                        return result;
                    });
                } else {
                    resolve(correctionLimit);
                }
            });
        });
    }
    return {
        get: get,
        update: update
    };
}, [ "gingerchromeext.background.storage" ]);

gingerModule.load("gingerchromeext.background.eventBus", function() {
    var listeners = {};
    var on = function(event, cb) {
        if (!listeners[event] || listeners[event].length < 1) {
            listeners[event] = [];
        }
        listeners[event].push(cb);
    };
    var trigger = function(event, params) {
        if (!listeners[event] || listeners[event].length < 1) {
            return;
        }
        listeners[event].forEach(function(listener) {
            listener(!!params ? params : {});
        });
    };
    var off = function(event, cb) {
        if (!listeners[event] || listeners[event].length < 1) {
            return;
        }
        listeners[event] = listeners[event].filter(listener => listener !== cb);
    };
    return {
        trigger: trigger,
        on: on,
        off: off
    };
}, []);

gingerModule.load("gingerchromeext.background.gaEvents", function() {
    var GAEvent = {
        disableCorrections: "Disable_corrections",
        doubleClickForWord: "Double_click_for_word",
        selectDialect: "Select_dialect",
        disableTextfield: "Disable_textfield",
        suggestionDisplay: "Suggestion_display",
        suggestionApproveClick: "Suggestion_approve_click",
        suggestionIgnoreClick: "Suggestion_ignore_click",
        limitedModeClick: "Limited_mode_click",
        limitedModeDisplay: "Limited_mode_display",
        translateClick: "Translate_click",
        translationCopy: "Translation_copy",
        premiumDisplay: "Premium_display",
        premiumClick: "Premium_click",
        loginDisplay: "Login_display",
        loginClick: "Login_click",
        signUpDisplay: "Sign_up_display",
        signUpClick: "Sign_up_click",
        logOutClick: "Logout_click",
        onboarding: "Onboarding",
        variantClick: "Variant_click",
        rephraseClick: "Rephrase_click",
        rephraseUndoSuggestion: "Rephrase_undo_suggestion",
        definitionDisplay: "Definition_display",
        definitionClick: "Definition_click",
        definitionSeeAlso: "Definition_see_also",
        smartSuggestionDisplay: "Smart_suggestion_display",
        smartSuggestionClick: "Smart_suggestion_click",
        synonymDisplay: "Synonyms_display",
        synonymClick: "Synonyms_click",
        openWriterDisplay: "Open_Writer_display",
        openWriterClick: "Open_Writer_click",
        backToWebsiteClick: "Back_to_Website_click",
        contactUsClick: "Contact_us_click"
    };
    var GATrigger = {
        edit: "edit",
        profile: "profile",
        limitReachedRephrase: "limit_reached_rephrase",
        tabSynonyms: "tab_synonyms",
        tabDefinition: "tab_definition",
        signUp: "sign_up",
        writer: "writer",
        copy: "copy",
        limitReachedText: "limit_reached_text",
        rephrase: "rephrase",
        toggleSetting: "toggle_setting",
        accept: "accept",
        banner: "banner",
        topButton: "top_button",
        synonymsPopup: "synonyms_popup",
        tabTranslate: "tab_translate",
        translate: "translate",
        definition: "definition",
        synonym: "synonyms",
        more: "more",
        floatingG: "floating_G",
        headerIcon: "header_icon",
        limitReachedCorrections: "limit_reached_corrections",
        qsIcon: "qs-icon",
        doubleClick: "double-click",
        clickAnotherSentence: "click-another-sentence",
        rephraseChevron: "rephrase-chevron",
        clickOnWord: "click_on_word"
    };
    var GAInterface = {
        miniWriter: "mini-writer",
        widget: "widget",
        writer: "writer",
        qsPopup: "qs-popup"
    };
    var GAEventValue = {
        correction: "correction",
        rephrase: "rephrase",
        doubleClickOnWord: "double-click-on-word",
        iconClick: "icon-click"
    };
    var GANumberOfTimes = {
        one: 1,
        three: 3,
        ten: 10,
        thirty: 30
    };
    var GAUserStatus = {
        free: "free",
        registered: "registered",
        premium: "premium"
    };
    var GACategory = {
        Settings: "Settings",
        Onboarding: "Onboarding",
        Profile: "Profile",
        Correct: "Correct",
        Premium: "Premium",
        Definition: "Definition",
        Translate: "Translate",
        Login: "Login",
        Synonyms: "Synonyms",
        Rephrase: "Rephrase",
        Writer: "Writer"
    };
    var fields = {
        GAEvent: GAEvent,
        GACategory: GACategory,
        GAUserStatus: GAUserStatus,
        GANumberOfTimes: GANumberOfTimes,
        GAEventValue: GAEventValue,
        GATrigger: GATrigger,
        GAInterface: GAInterface
    };
    var get = function(property) {
        return fields[property];
    };
    var getAll = function() {
        return fields;
    };
    return {
        get: get,
        getAll: getAll,
        fields: fields
    };
}, [ "gingerchromeext.browser" ]);

gingerModule.load("gingerchromeext.background.iconSwitcher", function() {
    var icons = {
        normal: "/assets/icon-16.png",
        nosupport: "/assets/icon-16-nosupport.png",
        off: "/assets/icon-16-off.png"
    };
    var getDomainOfUrl = gingerModule.get("gingerchromeext.background.utils").getDomainOfUrl;
    var handleBlackListIconSwitch = function(url) {
        if (!gingerModule.get("gingerchromeext.background.session").isLoggedIn(true)) {
            gingerModule.get("gingerchromeext.browser").action.setIcon({
                path: icons.normal
            });
            gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                text: ""
            });
        } else if (!gingerModule.get("gingerchromeext.background.nonSupportedSites").isUrlEnabled(url)) {
            gingerModule.get("gingerchromeext.browser").action.setIcon({
                path: icons.nosupport
            });
            gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                text: ""
            });
        } else {
            gingerModule.get("gingerchromeext.background.storage").get("domainBlackList").then(function(siteBlackList) {
                if (!siteBlackList) siteBlackList = [];
                if (siteBlackList.indexOf(getDomainOfUrl(url)) !== -1) {
                    gingerModule.get("gingerchromeext.browser").action.setIcon({
                        path: icons.off
                    });
                    gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                        text: ""
                    });
                } else {
                    var falsePremium = gingerModule.get("gingerchromeext.background.session").get().falsePremium;
                    if (falsePremium && falsePremium > 0) {
                        gingerModule.get("gingerchromeext.browser").action.setIcon({
                            path: icons.normal
                        });
                        gingerModule.get("gingerchromeext.browser").action.setBadgeBackgroundColor({
                            color: "#FF0000"
                        });
                        gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                            text: "!"
                        });
                    } else {
                        gingerModule.get("gingerchromeext.browser").action.setIcon({
                            path: icons.normal
                        });
                        gingerModule.get("gingerchromeext.browser").action.setBadgeText({
                            text: ""
                        });
                    }
                }
            });
        }
    };
    var refresh = function() {
        gingerModule.get("gingerchromeext.browser").tabs.query({
            currentWindow: true,
            active: true
        }, function(tabs) {
            var activeTab = tabs[0];
            if (activeTab && activeTab.url) {
                handleBlackListIconSwitch(activeTab.url);
            }
        });
    };
    var setIcons = function(iconSet) {
        icons = iconSet;
    };
    return {
        refresh: refresh,
        setIcons: setIcons,
        get: function() {
            return icons;
        }
    };
}, [ "gingerchromeext.background.session", "gingerchromeext.background.storage", "gingerchromeext.background.nonSupportedSites" ]);

gingerModule.load("gingerchromeext.background.init", function() {
    var eventBus = gingerModule.get("gingerchromeext.background.eventBus");
    var urlAddPlatformToUser = gingerModule.get("gingerchromeext.background.config").get("urlAddPlatformToUser");
    gingerModule.get("gingerchromeext.browser").runtime.onInstalled.addListener(function() {
        if (gingerModule.get("gingerchromeext.background.config").get("platform") === "chrome") {
            closeInstallWindowsForUser();
        } else {
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: gingerModule.get("gingerchromeext.background.config").get("urlCDNPostInstall") + gingerModule.get("gingerchromeext.background.config").get("platform")
            }, function() {});
        }
        gingerModule.get("gingerchromeext.background.storage").get("alreadyInstalled").then(function(result) {
            if (!result) {
                gingerModule.get("gingerchromeext.background.storage").set("alreadyInstalled", true);
            } else {}
        });
    });
    gingerModule.get("gingerchromeext.browser").runtime.onMessageExternal.addListener(function(request, sender, sendResponse) {
        if (request) {
            if (request.message) {
                if (request.message === "installed") {
                    sendResponse({
                        installed: true
                    });
                }
            }
        }
        return true;
    });
    var retrieveOrInitConfigProperty = function(prop, defaultValue) {
        gingerModule.get("gingerchromeext.background.storage").get(prop).then(function(res) {
            if (typeof res === "undefined" || res === null) {
                res = defaultValue;
                gingerModule.get("gingerchromeext.background.storage").set(prop, defaultValue);
            }
            gingerModule.get("gingerchromeext.background.config").set(prop, res);
        });
    };
    var refreshPopupIcon = function() {
        gingerModule.get("gingerchromeext.background.iconSwitcher").refresh();
    };
    var subscribeToExtensionEvents = function() {
        gingerModule.get("gingerchromeext.browser").tabs.onActivated.addListener(function(tabId, windowId) {
            refreshPopupIcon();
        });
        gingerModule.get("gingerchromeext.browser").tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
            if (changeInfo && changeInfo.status) {
                refreshPopupIcon();
            }
        });
        gingerModule.get("gingerchromeext.browser").action.onClicked.addListener(function(tab) {});
        gingerModule.get("gingerchromeext.background.storage").listen.on("change", function(e, change) {
            refreshPopupIcon();
        });
    };
    var registerExtensionAsInstalledForUser = function(widgetUid) {
        var params = {
            appId: widgetUid,
            clientVersion: gingerModule.get("gingerchromeext.background.config").get("clientVersion"),
            origin: gingerModule.get("gingerchromeext.background.config").get("extOrigin")
        };
        gingerModule.get("gingerchromeext.browser").runtime.setUninstallURL("https://www.gingersoftware.com/extension/uninstall?" + serialize(params));
        var session = gingerModule.get("gingerchromeext.background.session").get();
        if (session && session.token && !session.isAnonym) {
            params.email = session.email;
            gingerModule.get("gingerchromeext.browser").runtime.setUninstallURL("https://www.gingersoftware.com/extension/uninstall?" + serialize(params));
            gingerModule.get("gingerchromeext.background.storage").get("extensionAlreadyRegisteredAsInstalledApp").then(function(result) {
                if (!result) {
                    gingerModule.get("gingerchromeext.background.storage").set("extensionAlreadyRegisteredAsInstalledApp", true);
                    fetch(urlAddPlatformToUser, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            apiKey: "GingerInnerDev",
                            userIdentifier: session.userId,
                            platform: "webwidgetchromestoreextension"
                        })
                    });
                }
            });
        }
    };
    var closeInstallWindowsForUser = function() {
        var installPageId;
        gingerModule.get("gingerchromeext.browser").windows.getAll({
            populate: true
        }, function(windows) {
            for (var wi = 0; wi < windows.length; wi++) {
                for (var i = 0; i < windows[wi].tabs.length; i++) {
                    var tab = windows[wi].tabs[i];
                    if (tab.url === `${gingerModule.get("gingerchromeext.background.config").get("urlBase")}/install`) {
                        installPageId = tab.id;
                    } else if (/kdfieneakcjfaiglcfcgkidlkmlijjnh/.test(tab.url)) {
                        gingerModule.get("gingerchromeext.browser").tabs.remove(tab.id);
                    }
                }
            }
            gingerModule.get("gingerchromeext.background.storage").get("extensionAlreadyRegisteredAsInstalledApp").then(function(res) {
                if (!res) {
                    gingerModule.get("gingerchromeext.background.storage").set("Installed", true);
                    var urlCDNPostInstall = gingerModule.get("gingerchromeext.background.config").get("urlCDNPostInstall");
                    if (installPageId) {
                        gingerModule.get("gingerchromeext.browser").tabs.update(installPageId, {
                            url: urlCDNPostInstall
                        });
                    } else {
                        gingerModule.get("gingerchromeext.browser").tabs.create({
                            url: urlCDNPostInstall
                        }, function() {});
                    }
                }
            });
        });
    };
    var serialize = function(obj) {
        var str = [];
        for (var p in obj) if (obj.hasOwnProperty(p)) {
            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
        }
        return str.join("&");
    };
    var init = function() {
        subscribeToExtensionEvents();
        var widgetUid = gingerModule.get("gingerchromeext.background.uuid").generate();
        retrieveOrInitConfigProperty("widgetUid", widgetUid);
        retrieveOrInitConfigProperty("dialect", "US");
        retrieveOrInitConfigProperty("enableDefinitionsAndSynonyms", true);
        retrieveOrInitConfigProperty("correctionLimit", {
            free: 600,
            premium: 5e3
        });
        gingerModule.get("gingerchromeext.background.session").listen.on("login", function(session) {
            registerExtensionAsInstalledForUser(widgetUid);
        });
        gingerModule.get("gingerchromeext.background.correctionLimits").update();
        registerExtensionAsInstalledForUser(widgetUid);
    };
    init();
    return {
        listen: eventBus
    };
}, [ "gingerchromeext.background.uuid", "gingerchromeext.background.contentConnector", "gingerchromeext.background.storage", "gingerchromeext.background.session", "gingerchromeext.background.report" ]);

gingerModule.load("gingerchromeext.background.nonSupportedSites", function() {
    var nonSupportedSites = [ {
        url: "evernote.com",
        enabled: false,
        name: "Evernote"
    }, {
        url: "quora.com",
        enabled: false,
        name: "Quora"
    }, {
        url: ".*pinterest.com",
        enabled: false,
        name: "Pinterest"
    }, {
        url: "drive.google.com",
        enabled: false,
        name: "Google Drive"
    }, {
        url: "hootsuite.com",
        enabled: false,
        name: "Hoot Suite"
    }, {
        url: "onedrive.live.com",
        enabled: false,
        name: "OneDrive"
    }, {
        url: "texteditor.nsspot.net",
        enabled: false,
        name: "Text Editor for Google Drive"
    }, {
        url: "jsbin.com",
        enabled: false,
        name: "JSBin"
    }, {
        url: "jsfiddle.net",
        enabled: false,
        name: "JsFiddle"
    }, {
        url: "imperavi.com",
        enabled: false,
        name: "Imperavi"
    }, {
        url: "overleaf.com",
        enabled: false,
        name: "Overleaf"
    }, {
        url: "canva.com",
        enabled: false,
        name: "Canva"
    }, {
        url: "miro.com",
        enabled: false,
        name: "Miro"
    }, {
        url: "app.diagrams.net",
        enabled: false,
        name: "App Diagrams"
    }, {
        url: "translate.google",
        enabled: false,
        name: "Google Translate"
    }, {
        url: "docs.google.com/spreadsheets",
        enabled: false,
        name: "Google Spreadsheets"
    } ];
    var getDomainOfUrl = function(url) {
        return url.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
    };
    var get = function() {
        return nonSupportedSites;
    };
    var getNonSupportedItemByUrl = function(url) {
        for (var did = 0; did < nonSupportedSites.length; did++) {
            var nonSupportedItem = nonSupportedSites[did];
            var urlRegex = new RegExp(nonSupportedItem.url, "i");
            if (urlRegex.test(url)) {
                return nonSupportedItem;
            }
        }
        return null;
    };
    var isUrlEnabled = function(url) {
        var item = getNonSupportedItemByUrl(url);
        if (item) return item.enabled !== false;
        return true;
    };
    return {
        isUrlEnabled: isUrlEnabled,
        getNonSupportedItemByUrl: getNonSupportedItemByUrl,
        get: get
    };
}, [ "gingerchromeext.background.contentConnector", "gingerchromeext.background.storage", "gingerchromeext.background.session", "gingerchromeext.background.report" ]);

gingerModule.load("gingerchromeext.background.rephraseLimits", function() {
    var increase = function() {
        return get(true);
    };
    var increaseNewQuantity = function() {
        return getNewQuantity(true);
    };
    var get = function(increase) {
        return new Promise(function(resolve) {
            var session = gingerModule.get("gingerchromeext.background.session").get();
            if (session.license === 2) {
                resolve(false);
                return;
            }
            gingerModule.get("gingerchromeext.background.storage").get("rephraseLimit").then(function(rephraseLimit) {
                if (!rephraseLimit) {
                    rephraseLimit = {};
                } else {
                    rephraseLimit = JSON.parse(rephraseLimit);
                }
                if (!rephraseLimit[session.userId]) {
                    rephraseLimit[session.userId] = 0;
                    gingerModule.get("gingerchromeext.background.storage").set("rephraseLimit", JSON.stringify(rephraseLimit));
                }
                if (increase) {
                    rephraseLimit[session.userId] = rephraseLimit[session.userId] + 1;
                    gingerModule.get("gingerchromeext.background.storage").set("rephraseLimit", JSON.stringify(rephraseLimit));
                }
                resolve(rephraseLimit[session.userId] >= 30);
            });
        });
    };
    var getNewQuantity = function(increase) {
        return new Promise(function(resolve) {
            var session = gingerModule.get("gingerchromeext.background.session").get();
            gingerModule.get("gingerchromeext.background.storage").get("rephraseQuantity").then(function(rephraseQuantity) {
                if (!rephraseQuantity) rephraseQuantity = {}; else rephraseQuantity = JSON.parse(rephraseQuantity);
                if (!rephraseQuantity[session.userId]) {
                    rephraseQuantity[session.userId] = 0;
                    gingerModule.get("gingerchromeext.background.storage").set("rephraseQuantity", JSON.stringify(rephraseQuantity));
                }
                if (increase) {
                    rephraseQuantity[session.userId] = rephraseQuantity[session.userId] + 1;
                    gingerModule.get("gingerchromeext.background.storage").set("rephraseQuantity", JSON.stringify(rephraseQuantity));
                }
                resolve(rephraseQuantity[session.userId]);
            });
        });
    };
    return {
        get: get,
        getNewQuantity: getNewQuantity,
        increase: increase,
        increaseNewQuantity: increaseNewQuantity
    };
}, [ "gingerchromeext.background.storage", "gingerchromeext.background.session" ]);

gingerModule.load("gingerchromeext.background.report", function() {
    var prodMode = gingerModule.get("gingerchromeext.background.config").get("env");
    var isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    var reporterGA4 = function(payload) {
        gingerModule.get("gingerchromeext.background.storage").getLocal("lastTokenCheck").then(function(result) {
            if (result) {
                var lastTokenCheck = new Date(result);
                if (gingerModule.get("gingerchromeext.background.utils").isMoreThan24HoursAgo(lastTokenCheck)) {
                    gingerModule.get("gingerchromeext.background.session").checkAuthToken();
                }
            } else {
                gingerModule.get("gingerchromeext.background.session").checkAuthToken();
            }
        });
        if (payload.singleCall) {
            var ID = payload.event.replace(" ", "_");
            gingerModule.get("gingerchromeext.background.storage").get(ID).then(function(result) {
                if (!result) {
                    googleAnalytics4(payload);
                    gingerModule.get("gingerchromeext.background.storage").set(ID, true);
                }
            });
        } else {
            googleAnalytics4(payload);
        }
    };
    var googleAnalytics4 = function(props) {
        var ga4BaseUrl = prodMode === "production" ? gingerModule.get("gingerchromeext.background.config").get("urlGA4") : gingerModule.get("gingerchromeext.background.config").get("urlGA4Debug");
        var measurementID = gingerModule.get("gingerchromeext.background.config").get("measurementID");
        var apiKey = gingerModule.get("gingerchromeext.background.config").get("gaApiKey");
        var url = `${ga4BaseUrl}?measurement_id=${measurementID}&api_secret=${apiKey}`;
        var session = gingerModule.get("gingerchromeext.background.session").get();
        var cid = gingerModule.get("gingerchromeext.background.config").get("widgetUid");
        var GAUserStatus = gingerModule.get("gingerchromeext.background.gaEvents").get("GAUserStatus");
        var version = gingerModule.get("gingerchromeext.background.config").get("clientVersion");
        var browser = gingerModule.get("gingerchromeext.background.config").get("platform");
        var userStatus = GAUserStatus.free;
        if (session) {
            userStatus = session.isAnonym ? GAUserStatus.free : session.license !== 2 ? GAUserStatus.registered : GAUserStatus.premium;
        }
        var params = {
            ...props,
            engagement_time_msec: 1,
            user_status: userStatus,
            version: version,
            platform: isMac ? "Mac" : "Windows",
            browser: browser
        };
        delete params.event;
        delete params.multiEvents;
        var events = [];
        if (+props.multiEvents > 0) {
            for (var i = 0; i < props.multiEvents; i++) {
                events.push({
                    name: props.event,
                    params: params
                });
            }
        } else {
            events.push({
                name: props.event,
                params: params
            });
        }
        const body = JSON.stringify({
            client_id: cid,
            events: events
        });
        const headers = new Headers({});
        fetch(url, {
            method: "POST",
            headers: headers,
            body: body,
            mode: "cors",
            cache: "default"
        }).then();
    };
    return {
        reporterGA4: reporterGA4
    };
}, [ "gingerchromeext.background.config", "gingerchromeext.background.storage", "gingerchromeext.background.session" ]);

gingerModule.load("gingerchromeext.background.session", function() {
    var eventBus = gingerModule.get("gingerchromeext.background.eventBus");
    var session = null;
    var anonymUserId = null;
    var resolveInitProcess = undefined;
    var rejectInitProcess = undefined;
    var initProcessDone = new Promise(function(res, rej) {
        resolveInitProcess = res;
        rejectInitProcess = rej;
    });
    var urlBaseAuth = gingerModule.get("gingerchromeext.background.config").get("urlBaseAuth");
    var get = function(property) {
        return !!property ? session[property] : session;
    };
    var asyncGetSession = function() {
        return new Promise((resolve, reject) => {
            if (session) {
                resolve(session);
            } else {
                gingerModule.get("gingerchromeext.background.storage").get("session").then(function(result) {
                    resolve(result);
                });
            }
        });
    };
    var isLoggedIn = function(syncCall) {
        if (syncCall) {
            return session && !session.isAnonym;
        } else {
            return new Promise((resolve, reject) => {
                gingerModule.get("gingerchromeext.background.storage").get("session").then(function(res) {
                    res && !res.isAnonym ? resolve() : reject();
                });
            });
        }
    };
    var isSessionEqual = function(s1, s2) {
        if (s1 === s2) {
            return true;
        }
        if (!s1 || !s2) {
            return false;
        }
        var keysToCheck = [ "email", "license", "name", "token", "userId", "username", "falsePremium" ];
        for (var i = 0; i < keysToCheck.length; i++) {
            if (s1[keysToCheck[i]] !== s2[keysToCheck[i]]) {
                return false;
            }
        }
        return true;
    };
    var checkTeamSubscription = function(token) {
        var payload = {
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey")
        };
        return fetch(`${gingerModule.get("gingerchromeext.background.config").get("urlSMBTeams")}?apiKey=${payload.apiKey}`, {
            method: "GET",
            headers: {
                "x-ginger-token": token,
                "Content-Type": "application/json"
            },
            cache: "no-cache",
            credentials: "omit"
        }).then(response => {
            if (!response.ok) {
                return false;
            }
            return response.json();
        }).then(data => {
            return data && data.teamStatus === "active";
        }).catch(error => {
            console.error(error);
            return false;
        });
    };
    var checkFalsePremium = function(deferred, userDetail, token) {
        userDetail.falsePremium = 0;
        var payload = {
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
            userIdentifier: userDetail.userId
        };
        const url = `${gingerModule.get("gingerchromeext.background.config").get("urlGetSubscriptionsByUserIdentifier")}?apiKey=${payload.apiKey}&userIdentifier=${payload.userIdentifier}`;
        fetch(url, {
            headers: {
                "Content-Type": "application/json"
            },
            cache: "no-cache",
            credentials: "omit"
        }).then(response => {
            if (response && response.ok) {
                response.json().then(result => {
                    if (result && result.GetSubscriptionsByUserIdentifierResult && result.GetSubscriptionsByUserIdentifierResult.subscriptions) {
                        subscriptions = result.GetSubscriptionsByUserIdentifierResult.subscriptions;
                        if (!subscriptions || subscriptions.length == 0) {
                            checkTeamSubscription(token).then(function(isTeamMember) {
                                userDetail.falsePremium = isTeamMember ? 0 : 1;
                                deferred.resolve(userDetail);
                                return;
                            });
                        } else {
                            for (var i = 0; i < subscriptions.length; i++) {
                                var element = subscriptions[i];
                                if (element.subscriptionStatus == "active") {
                                    deferred.resolve(userDetail);
                                    return;
                                }
                            }
                            userDetail.falsePremium = 2;
                            deferred.resolve(userDetail);
                        }
                        return;
                        var promises = [];
                        subscriptions.forEach(function(element) {
                            promises.push(getSubscriptionById(element.subscriptionId, userDetail));
                        });
                        Promise.all(promises).then(function(subscriptionDetails) {
                            console.log("===Subscription details: ", subscriptionDetails);
                        });
                    }
                    deferred.resolve(userDetail);
                }).catch(error => {
                    deferred.resolve(userDetail);
                });
            } else {
                deferred.resolve(userDetail);
            }
        }).catch(error => {
            console.error(error);
            deferred.resolve(userDetail);
        });
    };
    var getSubscriptionById = function(subscriptionId, userDetail) {
        var payload = {
            apiKey: gingerModule.get("gingerchromeext.background.config").get("apiKey"),
            userIdentifier: userDetail.userId,
            subscriptionId: subscriptionId
        };
        return fetch(`${gingerModule.get("gingerchromeext.background.config").get("urlSMBGetSubscriptionDetails")}?apiKey=${payload.apiKey}&userIdentifier=${payload.userIdentifier}&subscriptionId=${payload.subscriptionId}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
            cache: "no-cache",
            credentials: "omit"
        }).then(function(response) {
            if (response.ok) {
                return response.json();
            } else {
                return null;
            }
        }).catch(function(error) {
            console.error(error);
            return null;
        });
    };
    var getUserById = function(userId, token) {
        return new Promise((resolve, reject) => {
            const apiKey = gingerModule.get("gingerchromeext.background.config").get("apiKey");
            const url = `${gingerModule.get("gingerchromeext.background.config").get("urlGetUserDetails")}?apiKey=${apiKey}&userIdentifier=${userId}`;
            fetch(url, {
                headers: {
                    "Content-Type": "application/json"
                },
                cache: "no-cache",
                credentials: "omit"
            }).then(response => {
                if (response && response.ok) {
                    response.json().then(result => {
                        if (result.ExceptionType) {
                            reject();
                        } else if (result.GetUserDetailsResult.UserIdentifier) {
                            var userDetail = {};
                            userDetail.raw = result.GetUserDetailsResult;
                            userDetail.name = result.GetUserDetailsResult.UserData.Name;
                            userDetail.email = result.GetUserDetailsResult.UserData.Email;
                            userDetail.userId = result.GetUserDetailsResult.UserIdentifier;
                            userDetail.falsePremium = 0;
                            var legacySubscription = false;
                            if (result.GetUserDetailsResult.UserData.AdditionalData) {
                                try {
                                    const parsedData = JSON.parse(result.GetUserDetailsResult.UserData.AdditionalData);
                                    if (parsedData.LegacyLifetimeSubscription || parsedData.ManualSmb) {
                                        legacySubscription = true;
                                    }
                                } catch (e) {}
                            }
                            let accountStatus = 0;
                            try {
                                const featuresCount = result.GetUserDetailsResult.LicenseInfo.LicensePolicy.Features.length;
                                if (featuresCount > 0) {
                                    accountStatus = 2;
                                }
                            } catch (e) {}
                            userDetail.license = accountStatus;
                            if (userDetail.license == 2 && userDetail.falsePremium == 0 && !legacySubscription) {
                                checkFalsePremium({
                                    resolve: resolve,
                                    reject: reject
                                }, userDetail, token);
                            } else {
                                resolve(userDetail);
                            }
                        } else {
                            reject();
                        }
                    }).catch(error => {
                        reject();
                    });
                } else {
                    reject();
                }
            }).catch(error => {
                reject();
            });
        });
    };
    var set = function(newSession, forceSet = false) {
        var deferred = new Promise(async function(resolve, reject) {
            if (!session) {
                session = await gingerModule.get("gingerchromeext.background.storage").get("session");
            }
            if (isSessionEqual(newSession, session) && !forceSet) {
                resolve(session);
                return deferred;
            }
            if (newSession && newSession.token && newSession.userId) {
                getUserById(newSession.userId, newSession.token).then(function(fullSession) {
                    fullSession = gingerModule.get("gingerchromeext.background.utils").extend(true, newSession, fullSession);
                    session = fullSession;
                    gingerModule.get("gingerchromeext.background.storage").set("session", session).then(function() {
                        eventBus.trigger("login", session);
                        eventBus.trigger("change", session);
                        resolve(session);
                    });
                }, function(res) {
                    newSession.license = 0;
                    session = newSession;
                    gingerModule.get("gingerchromeext.background.storage").set("session", session).then(function() {
                        eventBus.trigger("login", session);
                        eventBus.trigger("change", session);
                        resolve(session);
                    });
                });
            } else {
                getAnonymUserId().then(function(anonymUserId) {
                    var newsession = {
                        userId: anonymUserId,
                        license: 0,
                        isAnonym: true
                    };
                    session = newsession;
                    gingerModule.get("gingerchromeext.background.storage").set("session", newsession).then(function() {
                        eventBus.trigger("logout", session);
                        eventBus.trigger("change", session);
                        resolve(session);
                    });
                });
            }
        });
        return deferred;
    };
    function createAnonymousUser() {
        return new Promise((resolve, reject) => {
            resolve(gingerModule.get("gingerchromeext.background.uuid").generate());
        });
    }
    function getUserIdByToken(authToken) {
        return new Promise(async function(resolve, reject) {
            var token = authToken;
            if (!token) {
                reject();
            } else {
                try {
                    const response = await fetch(urlBaseAuth + "/isValidToken/" + token + `?platform=${gingerModule.get("gingerchromeext.background.config").get("source")}`, {
                        cache: "no-cache"
                    });
                    const {
                        valid,
                        userId
                    } = await response.json();
                    gingerModule.get("gingerchromeext.background.storage").setLocal("lastTokenCheck", Date.now());
                    if (valid) {
                        resolve(userId);
                    } else {
                        reject(null);
                    }
                } catch {
                    reject(null);
                }
            }
        });
    }
    function setSessionByStorage() {
        return new Promise(function(resolve, reject) {
            gingerModule.get("gingerchromeext.background.storage").get("session").then(function(res) {
                if (!res) {
                    var session = {
                        userId: anonymUserId,
                        license: 0,
                        isAnonym: true
                    };
                    set(session).then(function(session) {
                        resolve(session);
                    });
                } else {
                    set(res).then(function(session) {
                        resolve(session);
                    });
                }
            }).catch(function(err) {
                console.error(err);
            });
        });
    }
    var refresh = function() {
        return initProcessDone.then(function() {
            return setSessionByStorage();
        }).catch(function(e) {
            console.error(e);
        });
    };
    function getAnonymUserId() {
        return new Promise(function(resolve, reject) {
            gingerModule.get("gingerchromeext.background.storage").get("anonymUserId").then(function(anonymUserId) {
                if (!anonymUserId) {
                    createAnonymousUser().then(function(anonymUserId) {
                        gingerModule.get("gingerchromeext.background.storage").set("anonymUserId", anonymUserId);
                        resolve(anonymUserId);
                    });
                } else {
                    resolve(anonymUserId);
                }
            });
        });
    }
    var init = function() {
        listenForSessionUpdateMessage();
        gingerModule.get("gingerchromeext.background.storage").get("session").then(function(res) {
            if (!res) {
                getAnonymUserId().then(function(anonymUserIdResult) {
                    anonymUserId = anonymUserIdResult;
                    gingerModule.get("gingerchromeext.browser").cookies.get({
                        url: gingerModule.get("gingerchromeext.background.config").get("urlBase"),
                        name: "authToken"
                    }, function(cookie) {
                        if (cookie && cookie.value) {
                            var authToken = cookie.value;
                            getUserIdByToken(authToken).then(function resolved(userId) {
                                set({
                                    token: authToken,
                                    userId: userId
                                }).then(function() {
                                    resolveInitProcess();
                                });
                            }, function rejected() {
                                setSessionByStorage().then(function() {
                                    resolveInitProcess();
                                });
                            });
                        } else {
                            setSessionByStorage().then(function() {
                                resolveInitProcess();
                            });
                        }
                    });
                });
            } else {
                gingerModule.get("gingerchromeext.background.storage").getLocal("lastTokenCheck").then(function(result) {
                    if (result) {
                        var lastTokenCheck = new Date(result);
                        if (gingerModule.get("gingerchromeext.background.utils").isMoreThan24HoursAgo(lastTokenCheck)) {
                            gingerModule.get("gingerchromeext.background.session").checkAuthToken();
                        }
                    } else {
                        gingerModule.get("gingerchromeext.background.session").checkAuthToken();
                    }
                });
                setSessionByStorage().then(function() {
                    resolveInitProcess();
                });
            }
        });
    };
    function listenForSessionUpdateMessage() {
        chrome.runtime.onMessageExternal.addListener(function(request) {
            if (session && request?.updatePremium) {
                if (session.license === 2) {
                    return;
                }
                set(session, true);
            }
        });
    }
    function checkAuthToken() {
        if (session && session.token) {
            getUserIdByToken(session.token).then(function resolved() {}, function rejected() {
                flushSession(anonymUserId);
            });
        }
    }
    var flushSession = function(anonymUserId) {
        var newsession = {
            userId: anonymUserId,
            license: 0,
            isAnonym: true
        };
        if (!anonymUserId) {
            getAnonymUserId().then(function(userId) {
                newsession.userId = userId;
            });
        }
        session = newsession;
        gingerModule.get("gingerchromeext.background.storage").set("session", newsession).then(function() {
            eventBus.trigger("logout", session);
            eventBus.trigger("change", session);
        });
    };
    init();
    return {
        get: get,
        set: set,
        refresh: refresh,
        isLoggedIn: isLoggedIn,
        checkAuthToken: checkAuthToken,
        listen: eventBus,
        asyncGetSession: asyncGetSession
    };
}, [ "gingerchromeext.background.storage", "gingerchromeext.background.config" ]);

gingerModule.load("gingerchromeext.background.statisticService", function() {
    var gaFields = gingerModule.get("gingerchromeext.background.gaEvents").getAll();
    var session = gingerModule.get("gingerchromeext.background.session").get();
    var checkValues = [ 1, 3, 10, 30 ];
    var increase = function(param, count = 1) {
        return get(param).then(function(qtyObject) {
            var value = qtyObject[session.userId];
            var newValue = value + count;
            qtyObject[session.userId] = newValue;
            gingerModule.get("gingerchromeext.background.storage").set(param + "_qty", JSON.stringify(qtyObject));
            for (var i = value + 1; i <= newValue; i++) {
                if (checkValues.includes(i)) {
                    var payload = {
                        event: gaFields.GAEvent.onboarding,
                        category: gaFields.GACategory.Onboarding,
                        action: param,
                        Nb_of_times: i
                    };
                    if (param === gaFields.GAEventValue.doubleClickOnWord + "_synonyms") {
                        payload.trigger = gaFields.GATrigger.synonym;
                        payload.action = gaFields.GAEventValue.doubleClickOnWord;
                        payload.interface = gaFields.GAInterface.miniWriter;
                    }
                    if (param === gaFields.GAEventValue.doubleClickOnWord + "_definition") {
                        payload.trigger = gaFields.GATrigger.definition;
                        payload.action = gaFields.GAEventValue.doubleClickOnWord;
                    }
                    if (param === gaFields.GAEventValue.iconClick) {
                        payload.trigger = gaFields.GATrigger.qsIcon;
                    }
                    gingerModule.get("gingerchromeext.background.report").reporterGA4(payload);
                }
            }
            return newValue;
        });
    };
    var get = function(param) {
        return new Promise(function(resolve) {
            gingerModule.get("gingerchromeext.background.storage").get(param + "_qty").then(function(paramQuantity) {
                if (!paramQuantity) {
                    paramQuantity = {};
                } else {
                    paramQuantity = JSON.parse(paramQuantity);
                }
                if (!paramQuantity[session.userId]) {
                    paramQuantity[session.userId] = 0;
                    gingerModule.get("gingerchromeext.background.storage").set(param + "_qty", JSON.stringify(paramQuantity));
                }
                resolve(paramQuantity);
            });
        });
    };
    return {
        get: get,
        increase: increase
    };
}, [ "gingerchromeext.background.storage", "gingerchromeext.background.session" ]);

gingerModule.load("gingerchromeext.background.storage", function() {
    var eventBus = gingerModule.get("gingerchromeext.background.eventBus");
    var set = function(key, value) {
        if (!key) return;
        return new Promise(resolve => {
            var valueToSet = {};
            valueToSet[key] = value;
            gingerModule.get("gingerchromeext.browser").storage.sync.set(valueToSet, function() {
                resolve();
            });
        });
    };
    var setLocal = function(key, value) {
        if (!key) return;
        return new Promise(resolve => {
            var valueToSet = {};
            valueToSet[key] = value;
            gingerModule.get("gingerchromeext.browser").storage.local.set(valueToSet, function() {
                resolve();
            });
        });
    };
    var get = function(key) {
        return new Promise(resolve => {
            gingerModule.get("gingerchromeext.browser").storage.sync.get(key, function(result) {
                resolve(result[key]);
            });
        });
    };
    var getLocal = function(key) {
        return new Promise(resolve => {
            gingerModule.get("gingerchromeext.browser").storage.local.get(key, function(result) {
                resolve(result[key]);
            });
        });
    };
    var getAll = function() {
        var storeItems = {};
        var keys = Object.keys(localStorage);
        var i = keys.length;
        while (i--) {
            storeItems[keys[i]] = localStorage.getItem(keys[i]);
        }
        return storeItems;
    };
    var init = function() {
        gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(changes) {
            eventBus.trigger("change", changes);
            for (key in changes) {}
        });
    };
    init();
    return {
        get: get,
        getLocal: getLocal,
        getAll: getAll,
        set: set,
        setLocal: setLocal,
        listen: eventBus
    };
}, []);

gingerModule.load("gingerchromeext.background.utils", function() {
    var extend = function() {
        var extended = {};
        var deep = false;
        var i = 0;
        var length = arguments.length;
        if (Object.prototype.toString.call(arguments[0]) === "[object Boolean]") {
            deep = arguments[0];
            i++;
        }
        var merge = function(obj) {
            for (var prop in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, prop)) {
                    if (deep && Object.prototype.toString.call(obj[prop]) === "[object Object]") {
                        extended[prop] = extend(true, extended[prop], obj[prop]);
                    } else {
                        extended[prop] = obj[prop];
                    }
                }
            }
        };
        for (;i < length; i++) {
            var obj = arguments[i];
            merge(obj);
        }
        return extended;
    };
    function isMoreThan24HoursAgo(lastDate) {
        const currentDateTime = new Date();
        const elapsedTime = currentDateTime - lastDate;
        const hoursInMilliseconds = 24 * 60 * 60 * 1e3;
        return elapsedTime > hoursInMilliseconds;
    }
    var getDomainOfUrl = function(url) {
        if (/docs.google.com/.test(url)) {
            try {
                var parsedUrl = new URL(url);
                var pathParts = parsedUrl.pathname.split("/");
                return parsedUrl.hostname + "/" + pathParts[1];
            } catch (e) {
                return url.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
            }
        }
        return url.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
    };
    return {
        extend: extend,
        isMoreThan24HoursAgo: isMoreThan24HoursAgo,
        getDomainOfUrl: getDomainOfUrl
    };
}, []);

var module = gingerModule.load("gingerchromeext.background.uuid", function() {
    var uuidRegex = {
        3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
        4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
    };
    function uuid() {
        var uuid = "", i, random;
        for (i = 0; i < 32; i++) {
            random = Math.random() * 16 | 0;
            if (i === 8 || i === 12 || i === 16 || i === 20) uuid += "-";
            uuid += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
        }
        return uuid;
    }
    function isUUID(str, version) {
        var pattern = uuidRegex[version || "all"];
        return pattern && pattern.test(str) || false;
    }
    return {
        generate: uuid,
        isUUID: isUUID
    };
});

gingerModule.get("gingerchromeext.background.init");

gingerModule.get("gingerchromeext.background.contentConnector");
//# sourceMappingURL=background_2.11.318.min.js.map