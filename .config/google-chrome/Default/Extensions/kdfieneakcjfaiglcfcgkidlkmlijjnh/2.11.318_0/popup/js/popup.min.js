/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/
var $gingerWidgetJquery = $.noConflict(true);

if (!gingerModule) {
    var gingerModule = function(moduleName, module) {
        var modules = {};
        var initModule = function(moduleName) {
            var module = modules[moduleName];
            module.module = module.classCache();
            module.isInited = true;
        };
        var load = function(moduleName, module, deps) {
            if (modules[moduleName]) {
                if (console && console.log) console.log("Module already loaded: " + moduleName, "...overwriting module");
            }
            modules[moduleName] = {
                classCache: module,
                isInited: false,
                deps: deps
            };
            return modules[moduleName];
        };
        var hasAllDependencies = function(deps) {
            if (deps && deps.length) {
                var dependenciesLoaded = true;
                for (var di = 0; di < deps.length; di++) {
                    if (!hasAllDependencies(deps[di])) {
                        dependenciesLoaded = false;
                        break;
                    }
                }
                return dependenciesLoaded;
            } else {
                return true;
            }
        };
        var get = function(moduleName, returnClass) {
            if (typeof modules[moduleName] === "undefined") {
                throw "Module '" + moduleName + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!hasAllDependencies(moduleName.deps)) {
                throw "Module '" + moduleName + "' doesn't have all dependencies loaded.";
            }
            if (!modules[moduleName].isInited) {
                initModule(moduleName);
            }
            if (returnClass) return modules[moduleName].classCache; else return modules[moduleName].module;
        };
        var debug = function(moduleName) {
            if (!modules[moduleName]) {
                console.log(moduleName, "not added to project or has not been loaded");
                return false;
            } else if (!modules[moduleName].isInited) {
                console.log("module ", moduleName, "not loaded, because");
                var deps = modules[moduleName].deps;
                if (deps && deps.length) {
                    var hasEveryThingLoaded = true;
                    for (var i = 0; i < deps.length; i++) {
                        var dep = deps[i];
                        hasEveryThingLoaded = hasEveryThingLoaded && debug(dep);
                    }
                    return hasEveryThingLoaded;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: load,
            get: get,
            debug: debug
        };
    }();
}

(function() {
    var module = gingerModule.load("widget.ajaxQueue", function() {
        var ajaxQueue = $gingerWidgetJquery({});
        var flush = function() {
            ajaxQueue.clearQueue();
        };
        $gingerWidgetJquery.ajaxQueue = function(ajaxOpts) {
            var jqXHR, dfd = $gingerWidgetJquery.Deferred(), promise = dfd.promise();
            var queue = ajaxQueue.queue(doRequest);
            promise.abort = function(statusText) {
                if (jqXHR && jqXHR.abort) {
                    return jqXHR.abort(statusText);
                }
                var queue = ajaxQueue.queue(), index = $gingerWidgetJquery.inArray(doRequest, queue);
                if (index > -1) {
                    queue.splice(index, 1);
                }
                dfd.rejectWith(ajaxOpts.context || ajaxOpts, [ promise, statusText, "" ]);
                return promise;
            };
            function doRequest(next) {
                jqXHR = $gingerWidgetJquery.ajax(ajaxOpts).done(dfd.resolve).fail(dfd.reject);
            }
            return promise;
        };
        return {
            flush: flush
        };
    });
})();

(function() {
    var module = gingerModule.load("widget.api", function() {
        var eventScope = $gingerWidgetJquery({});
        var config = {};
        var cache = gingerModule.get("widget.cache");
        var lastSentenceRequest = {};
        var loaderTimeout = null;
        var loaderTimeoutGrace = 600;
        var queueLine = [];
        var queueExec = function() {
            if (queueLine.length) queueLine[0]();
        };
        var queue = function(xhrConfig) {
            var deferred = $gingerWidgetJquery.Deferred();
            if (xhrConfig) {
                queueLine.push(function() {
                    var me = this;
                    $gingerWidgetJquery.ajax(xhrConfig).then(function(result) {
                        queueLine.splice(0, 1);
                        queueExec();
                        deferred.resolve(result);
                    }, function(result) {
                        queueLine.splice(0, 1);
                        queueExec();
                        deferred.reject(result);
                    });
                });
            }
            if (queueLine.length === 1) {
                queueExec();
            }
            return deferred.promise();
        };
        var detectLang = function(word, next) {
            var getCache = cache.get("api.detectLang", word);
            if (getCache) {
                next(getCache);
            } else {
                var payload = {
                    inputText: word
                };
                var detectReq = queue({
                    url: `${gingerModule.get("widget.config").get("urlDetectLang")}?text=${word}`,
                    method: "GET",
                    responseType: "json",
                    accept: "*/*",
                    headers: {
                        "X-Reverso-Origin": gingerModule.get("widget.config").get("extOrigin")
                    }
                }).then(function resolve(res) {
                    cache.set("api.detectLang", word, res);
                    next(res);
                }, function reject() {});
            }
        };
        var checkWordSpell = function(word, next) {
            var getCache = cache.get("api.wordSpell", word);
            if (getCache) {
                next(getCache);
            } else {
                ajaxStatus(true);
                var payload = {
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: encodeURIComponent(word),
                    isFirstInPhrase: "false"
                };
                if (!gingerModule.get("widget.session").get("isAnonym")) {
                    payload.userIdentifier = gingerModule.get("widget.session").get("userId");
                }
                queue({
                    url: gingerModule.get("widget.config").get("urlIsSpelledCorrectly"),
                    data: payload,
                    datatype: "jsonp",
                    jsonpCallback: "gingerModuleApi.checkWordSpell"
                }).then(function(response) {
                    ajaxStatus(false);
                    if (response.ExceptionType) {
                        return;
                    }
                    cache.set("api.wordSpell", word, response);
                    next(response);
                }, function() {
                    ajaxStatus(false);
                });
            }
        };
        var checkSentence = function(sentence, next) {
            var cleanSentence = sentence.text;
            var getCache = cache.get("api.sentence", cleanSentence);
            if (getCache) {
                if (getCache.response !== null) {
                    next(JSON.parse(JSON.stringify(getCache.response)));
                } else {
                    getCache.cb.push(next);
                }
            } else {
                cache.set("api.sentence", cleanSentence, {
                    response: null,
                    cb: [ next ]
                });
                if (sentence.id != null && lastSentenceRequest.sentenceId === sentence.id && lastSentenceRequest.abort) {
                    ajaxStatus(false);
                    lastSentenceRequest.abort();
                }
                var isAnonymUser = gingerModule.get("widget.session").get("isAnonym");
                var payload = {
                    securedPage: "false",
                    lang: gingerModule.get("widget.config").get("dialect"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: sentence.text,
                    isOnTheFly: "false"
                };
                var url = gingerModule.get("widget.config").get("urlDocument");
                var urlWithParams = `${url}?lang=${payload.lang}&apiKey=${payload.apiKey}`;
                if (!isAnonymUser) {
                    payload.userIdentifier = gingerModule.get("widget.session").get("userId");
                    urlWithParams += `&userIdentifier=${payload.userIdentifier}`;
                }
                ajaxStatus(true);
                lastSentenceRequest = queue({
                    url: urlWithParams,
                    data: sentence.text,
                    contentType: "text/plain",
                    datatype: "json",
                    method: "POST"
                }).then(function(res) {
                    var response = res.GingerTheDocumentResult;
                    ajaxStatus(false);
                    eventScope.trigger("grammarcheck.sent");
                    if (response.ExceptionType) {
                        cache.remove("api.sentence", cleanSentence);
                        return;
                    }
                    var check = cache.get("api.sentence", cleanSentence);
                    if (check && check.cb) {
                        for (var i = 0; i < check.cb.length; i++) {
                            var cbResp = gingerModule.get("widget.utils").clone(response);
                            if (check.cb[i]) check.cb[i](cbResp);
                        }
                    }
                    cache.set("api.sentence", cleanSentence, {
                        response: response
                    });
                }, function(e) {
                    ajaxStatus(false);
                    cache.remove("api.sentence", cleanSentence);
                });
                lastSentenceRequest.sentenceId = sentence.id;
            }
        };
        var pendingRequests = 0;
        var ajaxStatus = function(ajaxOpened) {
            if (loaderTimeout) loaderTimeout = clearTimeout(loaderTimeout);
            if (ajaxOpened) {
                pendingRequests++;
                if (pendingRequests == 1) eventScope.trigger("ajax.start");
            } else {
                pendingRequests--;
                if (pendingRequests == 0) eventScope.trigger("ajax.end");
            }
        };
        var dumpCorrectionCache = function() {
            var cleanedCache = {};
            var dump = cache.dump();
            var cleanPool = function(pool) {
                if (!dump[pool]) return {};
                var cleaned = {};
                for (var key in dump[pool]) {
                    var cacheItem = dump[pool][key];
                    if (cacheItem.response) cleaned[key] = cacheItem;
                }
                return cleaned;
            };
            cleanedCache["api.wordSpell"] = cleanPool("api.wordSpell");
            cleanedCache["api.sentence"] = cleanPool("api.sentence");
            return cleanedCache;
        };
        var restoreCorrectionCache = function(cacheToRestore) {
            for (var pool in cacheToRestore) {
                for (var key in cacheToRestore[pool]) {
                    cache.set(pool, key, cacheToRestore[pool][key]);
                }
            }
        };
        var init = function() {};
        init();
        return {
            checkWordSpell: checkWordSpell,
            checkSentence: checkSentence,
            dumpCorrectionCache: dumpCorrectionCache,
            restoreCorrectionCache: restoreCorrectionCache,
            detectLang: detectLang,
            listen: eventScope
        };
    }, [ "widget.utils", "widget.cache", "widget.ajaxQueue", "widget.session" ]);
})();

(function() {
    var module = gingerModule.load("widget.backgroundConnector", function() {
        var call = function(config, cb) {
            try {
                gingerModule.get("gingerchromeext.browser").runtime.sendMessage(config, function(result, a, b) {
                    if (cb) cb(result);
                });
            } catch (e) {
                console.log(e);
            }
        };
        var callPromise = function(config) {
            var deferred = $gingerWidgetJquery.Deferred();
            config.promise = true;
            call(config, function(callBackResult) {
                if (callBackResult.rejected) {
                    deferred.reject(callBackResult.result);
                } else {
                    deferred.resolve(callBackResult.result);
                }
            });
            return deferred.promise();
        };
        var proxy = function(config) {
            var proxyFunction = function(arg, cb) {
                if (config.promise) {
                    config.callArgs = [];
                    for (var ai = 0; ai < arguments.length; ai++) {
                        config.callArgs.push(arguments[ai]);
                    }
                    return callPromise(config);
                } else {
                    config.callArgs = [ arg ];
                    return call(config, cb);
                }
            };
            return proxyFunction;
        };
        return {
            call: call,
            callPromise: callPromise,
            proxy: proxy
        };
    }, []);
})();

(function() {
    var module = gingerModule.load("widget.cache", function() {
        var cache = {};
        var set = function(pool, key, value) {
            if (!pool) pool = "default";
            if (!cache[pool]) cache[pool] = {};
            cache[pool][key] = value;
            return value;
        };
        var get = function(pool, key) {
            if (cache[pool] && cache[pool][key]) return cache[pool][key]; else return null;
        };
        var dump = function() {
            return cache;
        };
        var restore = function(restoreCache) {
            cache = restoreCache;
        };
        var remove = function(pool, key) {
            return delete cache[pool][key];
        };
        var flush = function() {
            cache = {};
        };
        return {
            set: set,
            get: get,
            remove: remove,
            flush: flush,
            dump: dump,
            restore: restore
        };
    });
})();

(function() {
    var module = gingerModule.load("widget.caret", function() {
        var get = function(node, pos) {
            node = $gingerWidgetJquery(node).get(0);
            var target = node;
            var isContentEditable = target && (target.getAttribute("contenteditable") === "" || target.getAttribute("contenteditable") === true || target.getAttribute("contenteditable") == "true");
            if (arguments.length === 1) {
                if (target) {
                    if (window.getSelection) {
                        if (isContentEditable) {
                            var range1 = window.getSelection().getRangeAt(0), range2 = range1.cloneRange();
                            range2.selectNodeContents(target);
                            range2.setEnd(range1.endContainer, range1.endOffset);
                            return range2.toString().length;
                        }
                        return target.selectionStart;
                    }
                    if (target.selectionStart) return target.selectionStart;
                }
                return;
            }
            if (target) {
                if (pos == -1) pos = node[isContentEditable ? "text" : "val"]().length;
                if (window.getSelection) {
                    if (isContentEditable) {
                        target.focus();
                        window.getSelection().collapse(target.firstChild, pos);
                    } else target.setSelectionRange(pos, pos);
                }
                if (!isContentEditable) target.focus();
            }
        };
        return {
            get: get
        };
    }, []);
})();

(function() {
    var module = gingerModule.load("widget.config", function() {
        var eventScope = $gingerWidgetJquery("<eventScope>");
        var config = {
            userId: null,
            apiKey: null,
            version: "0.0.210",
            widgetUid: null,
            charLimit: null,
            source: null,
            dialect: "US",
            platform: "chrome",
            loggedOutApprovalsLeft: 10,
            loggedInApprovalsLeft: "{}",
            licenseStatus: {
                free: 0,
                premium: 2
            }
        };
        gingerModule.get("widget.backgroundConnector").call({
            module: "gingerchromeext.background.config",
            callFunction: "get"
        }, function(result) {
            if (result) {
                merge(result);
            }
        });
        var get = function(property) {
            return property ? config[property] : config;
        };
        var set = function(property, value) {
            config[property] = value;
            var eventData = {
                changed: {}
            };
            eventData.changed[property] = value;
            eventScope.trigger("change", eventData);
            eventScope.trigger("change/" + property, value);
            return config;
        };
        var merge = function(mergeConfig) {
            config = gingerModule.get("widget.utils").merge(config, mergeConfig);
        };
        return {
            listen: eventScope,
            get: get,
            set: set,
            merge: merge
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.contentManager", function() {
        var emailServicesHostnames = {
            icloud: /icloud.com/,
            zoho: /mail.zoho.com|mail.zoho.eu/,
            yahoo: /mail.yahoo.com/,
            protonmail: /mail.protonmail.com|old.protonmail.com/,
            outlook: /outlook.live.com|outlook.office365.com|outlook.office.com/,
            gmail: /gmail.com|mail.google.com/,
            aol: /mail.aol.com/,
            gmx: /1und1.de|gmx.net|gmx.com|web.de/,
            localhost: /localhost/
        };
        var MATCH_BLOCK_TAG_NAME = "br|p|div|h\\d|table|ol|ul|li|tbody|de|dt|td|th|tr|caption|textarea|button|select|pre|address|body";
        var SKIP_TAGS = "code|noscript|object|style|template|script|var|img|blockquote|svg|canvas";
        var MATCH_THROUGH_CLOSE = "[^>]*";
        var MATCH_OPTIONAL_SLASH = "/?";
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        function enclose(pattern, save) {
            return (save ? "(" : "(?:") + pattern + ")";
        }
        var patterns = {
            compactBlockTags: {
                pattern: new RegExp("<" + enclose(MATCH_OPTIONAL_SLASH, true) + enclose(MATCH_BLOCK_TAG_NAME) + MATCH_THROUGH_CLOSE + ">", "gi"),
                replace: "<+>"
            },
            aggregateConsecutiveOpeningBlockTags: {
                pattern: new RegExp("(?:<" + enclose(MATCH_BLOCK_TAG_NAME) + MATCH_THROUGH_CLOSE + ">)+", "gi"),
                replace: "<ginger-block-elem>"
            },
            aggregateConsecutiveClosingBlockTags: {
                pattern: new RegExp("(?:</" + enclose(MATCH_BLOCK_TAG_NAME) + MATCH_THROUGH_CLOSE + ">)+", "gi"),
                replace: "</ginger-block-elem>"
            },
            aggregateConsecutiveOpenClosingBlockTags: {
                pattern: new RegExp("(?:</ginger-block-elem><ginger-block-elem>)", "gi"),
                replace: "<ginger-block-break/>"
            },
            representBlockElemDifferencesWithNewLineRepresentation: {
                pattern: new RegExp("(?:<(ginger-block-elem|/ginger-block-elem|ginger-block-break/)>)", "gi"),
                replace: String.fromCharCode(31)
            },
            removeTrailingAndStartingNewLines: {
                pattern: new RegExp("(^|$)"),
                replace: ""
            },
            ignoreTags: {
                pattern: /<(\/?)(code|noscript|object|style|template|script|var|img|blockquote|svg|canvas)([^>]*)>/gi,
                replace: "<$1!>"
            },
            removeNewLines: {
                pattern: /\n/gi,
                replace: " "
            }
        };
        var convertHTMLtoPlainText = function(html) {
            html = html.replace(/<style([\s\S]*?)<\/style>/gi, "");
            html = html.replace(/<script([\s\S]*?)<\/script>/gi, "");
            html = html.replace(/<\/div>/gi, "\n");
            html = html.replace(/<\/li>/gi, "\n");
            html = html.replace(/<li>/gi, "  *  ");
            html = html.replace(/<\/ul>/gi, "\n");
            html = html.replace(/<\/p>/gi, "\n");
            html = html.replace(/<br\s*[\/]?>/gi, "\n");
            html = html.replace(/<[^>]+>/gi, "");
            html = $gingerWidgetJquery("<textarea />").html(html).text();
            return html;
        };
        var convertReactHTMLtoText = function(html) {
            html = html.replace(new RegExp("<brs*/?>", "g"), "\n");
            var block = document.createElement("div");
            block.innerHTML = html;
            var blocks = block.querySelectorAll('[data-block="true"]');
            if (blocks.length > 0) {
                html = "";
                blocks.forEach(function(b, i, a) {
                    html = html + b.innerText.replace(/\s+$/, "") + (i < a.length - 1 ? "\n" : "");
                });
            } else {
                html = html.replace(/<[^>]+>/gi, "");
                html = $gingerWidgetJquery("<textarea />").html(html).text();
            }
            return html;
        };
        var dispatchPostRewriteEvents = function(events, area) {
            if (!events) events = [];
            if (/textarea/i.test(area.nodeName)) {
                events.push("change");
            }
            for (var ei = 0; ei < events.length; ei++) {
                var prEvent = document.createEvent("CustomEvent");
                prEvent.initCustomEvent(events[ei], true, true, null);
                area.dispatchEvent(prEvent);
            }
        };
        var setVal = function(element, value, from, to, fromRephrase, cords) {
            var areaConfig = gingerModule.get("widget.siteSettings").get(window.location.href, element);
            if (isGoogleDocs()) {
                return gingerModule.get(areaConfig.rewriter).rewrite(value, cords, fromRephrase);
            }
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(element);
            var isReactArea = isRTE && $gingerWidgetJquery(element).find("[data-block='true']").length > 0 || isRTE && $gingerWidgetJquery(element).closest("[data-reactroot]").length;
            var forceMode = element.getAttribute("ginger-widget-mode");
            if (forceMode && forceMode === "contenteditable") {
                isReactArea = false;
            }
            var isReactUsingApp = areaConfig.isReactUsingApp ?? false;
            if (/<[^>]+>|&\w+;/.test(value)) {
                if (isReactArea && isRTE || isReactUsingApp) {
                    value = convertReactHTMLtoText(value);
                } else if (!isRTE || isReactArea) {
                    value = convertHTMLtoPlainText(value);
                } else {
                    if (gingerModule.get("widget.utils").isNotion()) {
                        $gingerWidgetJquery(element).val(value);
                        return $gingerWidgetJquery.Deferred().resolve();
                    }
                    element.innerHTML = value;
                    return $gingerWidgetJquery.Deferred().resolve();
                }
            }
            if (typeof from === "undefined" && typeof to === "undefined") {
                if (isRTE && !isReactArea) {} else if (!isRTE && !isReactArea) {
                    $gingerWidgetJquery(element).val(value);
                    dispatchPostRewriteEvents(areaConfig.postRewriteEvents, element);
                    return $gingerWidgetJquery.Deferred().resolve();
                }
            }
            var val = getVal(element);
            if (!from) from = 0;
            if (!to) to = val.replace(/\s+$/gm, "").length;
            return gingerModule.get(areaConfig.rewriter).rewrite(element, value, from, to, fromRephrase, isReactUsingApp);
        };
        var getValForPlainReact = function(element) {
            var elementClone = $gingerWidgetJquery("<div></div>").html(element.innerHTML).get(0);
            $gingerWidgetJquery(elementClone).find("[data-block='true']").prepend(String.fromCharCode(31));
            value = $gingerWidgetJquery(elementClone).text().replace(/^\x1F/, "");
            return value;
        };
        var changeTagToIgnored = function(tag) {
            var newinner = tag.innerHTML.replace(/(<[^\/][^>]*>|[\.\!\?])/g, "$1" + String.fromCharCode(28));
            tag.outerHTML = "<gingerignorepart>" + newinner + "</gingerignorepart>";
        };
        var ignoreQuotedParts = function(content, mailService) {
            if (!mailService) {
                return content;
            }
            var contentDom = document.createElement("div");
            contentDom.innerHTML = content;
            var quotes = [];
            switch (mailService) {
              case "localhost":
                quotes = contentDom.querySelectorAll(".quoted-part-of-email");
                break;

              case "gmx":
                quotes = contentDom.querySelectorAll('[name="quote"]');
                break;

              case "aol":
                var aolQuotes = contentDom.querySelectorAll("div");
                if (aolQuotes.length) {
                    quotes = Array.from(aolQuotes).filter(function(e) {
                        return e.previousElementSibling && e.previousElementSibling.tagName === "BR" && e.textContent && e.textContent.startsWith("-----");
                    });
                }
                break;

              case "gmail":
                quotes = contentDom.querySelectorAll('.gmail_quote, .gmail_signature, [data-smartmail="gmail_signature"]');
                break;

              case "outlook":
                quotes = $gingerWidgetJquery(contentDom.querySelectorAll('[id="divRplyFwdMsg"]')).nextAll().toArray();
                var quoteHead = contentDom.querySelector('[id="divRplyFwdMsg"]');
                if (quoteHead) {
                    quotes.push(quoteHead);
                }
                break;

              case "protonmail":
                quotes = contentDom.querySelectorAll(".protonmail_signature_block, blockquote.protonmail_quote");
                break;

              case "yahoo":
                quotes = contentDom.querySelectorAll('[class*="yahoo_quoted"], [class*="signature"]');
                break;

              case "zoho":
                quotes = contentDom.querySelectorAll('[id*="Zm-_Id_-Sgn"], [class*="zmail_extra"]');
                break;

              case "icloud":
                quotes = contentDom.querySelectorAll('blockquote[type="cite"]');
                break;
            }
            quotes.forEach(function(q) {
                changeTagToIgnored(q);
            });
            return contentDom.innerHTML.replace(/gingerignorepart/g, "!");
        };
        var getEmailService = function() {
            var loc = location.hostname;
            if (self != top && (/localhost/.test(loc) || !loc) && window.parent.location) loc = window.parent.location.hostname;
            var matchingService = null;
            Object.keys(emailServicesHostnames).forEach(function(serviceName) {
                if (emailServicesHostnames[serviceName].test(loc)) {
                    matchingService = serviceName;
                }
            });
            return matchingService;
        };
        var valCache = {};
        var getValForRTE = function(element) {
            var contents = element.innerHTML;
            if (!contents) return "";
            if (valCache.raw === element.outerHTML) {
                return valCache.value;
            }
            if (element === document.body) {
                contents = contents.replace(/<div class="ginger-extension-writer".*$/i, "").replace(/<div class="ginger-module-correctionBubble".*$/i, "");
            }
            contents = ignoreQuotedParts(contents, getEmailService());
            contents = doReplace(contents, patterns.aggregateConsecutiveOpeningBlockTags);
            contents = doReplace(contents, patterns.aggregateConsecutiveClosingBlockTags);
            contents = doReplace(contents, patterns.compactBlockTags);
            contents = doReplace(contents, patterns.aggregateConsecutiveOpenClosingBlockTags);
            contents = doReplace(contents, patterns.ignoreTags);
            contents = doReplace(contents, patterns.representBlockElemDifferencesWithNewLineRepresentation);
            contents = contents.replace(/<!>.*?<\/!>/g, "");
            if ($gingerWidgetJquery(element).css("whiteSpace") !== "pre-wrap") {
                contents = doReplace(contents, patterns.removeNewLines);
            }
            contents = doReplace(contents, patterns.removeTrailingAndStartingNewLines);
            var contentRender = document.createElement("div");
            contentRender.innerHTML = contents;
            $gingerWidgetJquery(contentRender).find(".XjviVd").remove();
            contents = contentRender.textContent;
            valCache.raw = element.outerHTML;
            valCache.value = contents;
            return valCache.value;
        };
        var doReplace = function(text, replacement) {
            return text.replace(replacement.pattern, replacement.replace);
        };
        var getVal = function(element) {
            var value;
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(element);
            var isReactArea = isRTE && $gingerWidgetJquery(element).find("[data-block='true']").length > 0 || isRTE && $gingerWidgetJquery(element).closest("[data-reactroot]").length;
            var forceMode = element.getAttribute("ginger-widget-mode");
            if (forceMode && forceMode === "contenteditable") {
                isReactArea = false;
            }
            var isWhatsAppWebArea = isRTE && /pluggable-input-body/.test(element.className);
            if (isWhatsAppWebArea) {
                value = getValForPlainReact(element);
            } else if (isRTE) {
                value = getValForRTE(element);
            } else {
                value = $gingerWidgetJquery(element).val();
            }
            value = value.replace("^\n+", "");
            return value;
        };
        return {
            setVal: setVal,
            getVal: getVal
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.correctionBubble", function() {
        var eventScope = $gingerWidgetJquery({});
        var element;
        var bubble;
        var bubbleContainer;
        var bubbleLOContainer;
        var bubbleBody;
        var bubbleLimited;
        var bubbleLogin;
        var sentence;
        var bubbleHeight = 28;
        var bubbleMargin = 0;
        var mouseHoverTimeout = null;
        var mouseHoverTimeoutInterval = 600;
        var bubbleCb = null;
        var bubbleCbData = {};
        var currentMistakeCorrection = null;
        var currentSentence = null;
        var extID = gingerModule.get("gingerchromeext.browser").runtime.id;
        var writerTarget = new RegExp(`${extID}/writer`);
        var popupTarget = new RegExp(`${extID}/popup`);
        var limitedModeDisplayTimeout;
        var loginDisplayTimeout;
        var loginDisplaySent = false;
        var gaFields = {};
        gingerModule.get("widget.backgroundConnector").call({
            module: "gingerchromeext.background.gaEvents",
            callFunction: "getAll"
        }, function(result) {
            gaFields = result;
        });
        var show = function(correction, sentence, cb, target) {
            if (!bubble || bubble.parent().length === 0) createBubble();
            if ($gingerWidgetJquery(bubble).is(":hover") && $gingerWidgetJquery(bubble).is(":visible")) return;
            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                setLimitedVisibility(true, target);
            } else {
                setLimitedVisibility(false);
            }
            clearMouseHoverTimeout();
            if (mouseHoverTimeout) mouseHoverTimeout = clearTimeout(mouseHoverTimeout);
            if (gingerModule.get("widget.session").isLoggedIn()) {
                setLoginVisibility(false);
            } else {
                gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft().then(function(res) {
                    if (res) {
                        setLoginVisibility(false);
                    } else {
                        setLoginVisibility(true, target);
                    }
                });
            }
            var mistakeElement = $gingerWidgetJquery(".gwmw-" + correction.id).eq(0);
            if (!mistakeElement) mistakeElement = $gingerWidgetJquery("#gwmw-" + correction.id);
            if (currentMistakeCorrection && currentMistakeCorrection.id === correction.id) {
                return;
            }
            currentMistakeCorrection = correction;
            currentSentence = sentence;
            bubbleCb = cb;
            $gingerWidgetJquery(bubbleBody).empty();
            var fragmentdebug = [];
            var mistakeUXFragmentFrom = correction.UXFrgFrom;
            var mistakeUXFragmentTo = correction.UXFrgTo;
            var lastFragmentEndedAt = mistakeUXFragmentFrom;
            var fragments = gingerModule.get("widget.phraseService").getSentenceFragments(sentence, mistakeUXFragmentFrom, mistakeUXFragmentTo);
            var shownCorrections = 0;
            bubbleCbData = {
                sentenceId: sentence.id,
                correctionId: correction.id,
                sentence: sentence,
                correction: correction,
                shownCorrections: shownCorrections
            };
            for (var i = 0; i < fragments.length; i++) {
                var fragmentElement;
                if (fragments[i].correction) {
                    shownCorrections += 1;
                    bubbleCbData.shownCorrections = shownCorrections;
                    var hasSuggestions = fragments[i].correction.Suggestions.length != 0;
                    fragmentElement = document.createElement("gwbm");
                    fragmentElement.id = "gwbm-" + fragments[i].correction.id;
                    fragmentElement.style.setProperty("color", "#1B94A6", "important");
                    fragmentElement.className = "ginger-module-correctionBubbleService-mistake-type-" + fragments[i].correction.CorrectionType;
                    if (hasSuggestions) {
                        fragmentElement.appendChild(document.createTextNode(fragments[i].correction.Suggestions[0].Text));
                    } else {
                        fragmentElement.appendChild(document.createTextNode(fragments[i].text));
                        fragmentElement.className += " ginger-module-correctionBubbleService-mistake-nosuggestion";
                    }
                    (function(correction, fragmentElement) {
                        var optionsBubbleForMistake = document.createElement("gwbmo");
                        if (placeBubbleUnderneath) {
                            optionsBubbleForMistake.className = "ginger-module-correctionBubbleService-mistake-bubble-under";
                        }
                        var approveOptionBubbleForMistake = document.createElement("ga");
                        var ignoreOptionBubbleForMistake = document.createElement("ga");
                        approveOptionBubbleForMistake.className = "ginger-module-correctionBubbleService-mistake-bubble-approve";
                        ignoreOptionBubbleForMistake.className = "ginger-module-correctionBubbleService-mistake-bubble-ignore";
                        approveOptionBubbleForMistake.title = "Approve the Suggestion";
                        ignoreOptionBubbleForMistake.title = "Ignore the Suggestion";
                        approveOptionBubbleForMistake.onmousedown = function(e) {
                            eventScope.trigger("approved.mistake", bubbleCbData);
                            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                                eventScope.trigger("limited.approve");
                            } else {
                                if (!gingerModule.get("widget.session").isLoggedIn()) {
                                    gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft().then(function(res) {
                                        if (!res) {
                                            eventScope.trigger("unauthenticated.approve");
                                            return;
                                        }
                                    });
                                }
                                returnResult("approve", {
                                    correctionId: correction.id
                                }, true);
                                $gingerWidgetJquery("#gwbm-" + correction.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + correction.id).text()));
                                clearMouseHoverTimeout();
                            }
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        ignoreOptionBubbleForMistake.onmousedown = function(e) {
                            eventScope.trigger("ignored.mistake", bubbleCbData);
                            returnResult("ignore", {
                                correctionId: correction.id
                            }, true);
                            $gingerWidgetJquery("#gwbm-" + correction.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + correction.id).text()));
                            clearMouseHoverTimeout();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        if (hasSuggestions) {
                            optionsBubbleForMistake.appendChild(approveOptionBubbleForMistake);
                        }
                        optionsBubbleForMistake.appendChild(ignoreOptionBubbleForMistake);
                        fragmentElement.appendChild(optionsBubbleForMistake);
                    })(fragments[i].correction, fragmentElement);
                } else {
                    fragmentElement = document.createTextNode(fragments[i].text);
                }
                $gingerWidgetJquery(bubbleBody).get(0).appendChild(fragmentElement);
            }
            bubble.css("z-index", gingerModule.get("widget.utils").findHighestZIndex(mistakeElement) + 10);
            var buttonReph = document.querySelector("#ginger-button-for-rephrase");
            if (buttonReph) {
                buttonReph.style.visibility = "hidden";
            }
            bubble.show();
            var mistakeOffset = $gingerWidgetJquery(mistakeElement).offset();
            var bodyOffset = $gingerWidgetJquery(window.document.body).offset();
            if (bodyOffset.left) {
                mistakeOffset.left -= bodyOffset.left;
            }
            var mistakeHeight = $gingerWidgetJquery(mistakeElement).height();
            var mistakeWidth = $gingerWidgetJquery(mistakeElement).width();
            bubble.css("padding", bubbleMargin);
            var placeBubbleUnderneath;
            var mistakeOptionHeight = 22;
            var bubbleTopPosition = mistakeOffset.top - bubbleHeight;
            if (bubbleTopPosition - mistakeOptionHeight < 0) {
                placeBubbleUnderneath = true;
                bubbleTopPosition = mistakeOffset.top + bubbleHeight;
            } else if (bubbleTopPosition - mistakeOptionHeight <= $gingerWidgetJquery("html,body").scrollTop()) {
                placeBubbleUnderneath = true;
                bubbleTopPosition = mistakeOffset.top + bubbleHeight;
            }
            bubble.css("top", bubbleTopPosition);
            var currentPos = bubble.offset();
            var currentWidth = bubble.width();
            eventScope.trigger("show", {
                correction: currentMistakeCorrection,
                sentence: currentSentence,
                target: target,
                shownCorrections: shownCorrections
            });
            var bubbleWidth = $gingerWidgetJquery(bubbleLOContainer).is(":visible") ? $gingerWidgetJquery(bubbleLOContainer).outerWidth() : $gingerWidgetJquery(bubbleContainer).outerWidth();
            if (currentPos.top === bubbleTopPosition && currentPos.left <= mistakeOffset.left && currentPos.left + currentWidth >= mistakeOffset.left + mistakeWidth) {} else {
                bubble.css("left", mistakeOffset.left);
            }
            if (mistakeOffset.left + bubbleWidth > $gingerWidgetJquery(window).width()) {
                bubble.css("left", $gingerWidgetJquery(window).width() - bubbleWidth - 10);
            }
            return;
        };
        var hide = function(sentenceToShow, mistakeElement) {
            if (bubble) {
                if ($gingerWidgetJquery(bubble).is(":visible")) {
                    eventScope.trigger("hide", {
                        correction: currentMistakeCorrection,
                        sentence: currentSentence
                    });
                }
                var buttonReph = document.querySelector("#ginger-button-for-rephrase");
                if (buttonReph) {
                    buttonReph.style.visibility = "visible";
                }
                bubble.hide();
            }
            currentMistakeCorrection = null;
            currentSentence = null;
        };
        var clearMouseHoverTimeout = function() {
            if (mouseHoverTimeout) mouseHoverTimeout = clearTimeout(mouseHoverTimeout);
        };
        var gracefulHide = function(sentenceToShow, mistakeElement) {
            loginDisplaySent = false;
            loginDisplayTimeout = clearTimeout(loginDisplayTimeout);
            clearMouseHoverTimeout();
            mouseHoverTimeout = setTimeout(function() {
                handleHoverOut();
            }, mouseHoverTimeoutInterval);
        };
        var getClickEventTarget = function(target) {
            return writerTarget.test(target) ? gaFields.GAInterface.writer : popupTarget.test(target) ? gaFields.GAInterface.miniWriter : gaFields.GAInterface.widget;
        };
        var createBubble = function() {
            var appendToElement = document.body.hasAttribute("contenteditable") ? document.body.parentNode : document.body;
            bubble = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble' style='color: #000000 !important;'></gdiv>").appendTo(appendToElement);
            bubbleLOContainer = $gingerWidgetJquery("<gdiv style='background-color: #ffffff !important;' class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedout'><gdiv class='ginger-module-correctionBubble-login'>Log in</gdiv><gdiv style='background-color: #ffffff !important;' class='ginger-module-correctionBubble-body'>for free to continue using Ginger.</gdiv></gdiv>").appendTo(bubble);
            bubbleContainer = $gingerWidgetJquery("<gdiv style='background-color: #ffffff !important;' class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedin'></gdiv>").appendTo(bubble);
            bubbleLimited = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-limited'>Limited mode</gdiv>").appendTo(bubbleContainer);
            bubbleLimited.on("click", function(e) {
                gingerModule.get("widget.report").reporterGA4({
                    event: gaFields.GAEvent.limitedModeClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.limitReachedCorrections,
                    interface: getClickEventTarget(e.currentTarget.baseURI)
                });
                gingerModule.get("widget.licenseLimits").approvalsUsed(0);
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            bubbleLOContainer.on("click", function(e) {
                gingerModule.get("widget.report").reporterGA4({
                    event: gaFields.GAEvent.loginClick,
                    category: gaFields.GACategory.Login,
                    trigger: gaFields.GATrigger.limitReachedCorrections,
                    interface: getClickEventTarget(e.currentTarget.baseURI)
                });
                eventScope.trigger("unauthenticated.approve.all");
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            if (gingerModule.get("widget.utils").isGoogleDocs()) {
                bubble.css("font-size", "15px");
            }
            bubbleBody = $gingerWidgetJquery("<gdiv style='background-color: #ffffff !important;' class='ginger-module-correctionBubble-body'></gdiv>").appendTo(bubbleContainer);
            var bubbleClose = $gingerWidgetJquery("<ga href='javascript:' class='ginger-module-correctionBubble-close' title='Ignore mistake'>&times;</ga>").appendTo(bubbleContainer);
            bubbleClose.on("mousedown", function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    eventScope.trigger("limited.approve");
                } else {
                    eventScope.trigger("ignore.all", bubbleCbData);
                    returnResult("ignoreAll");
                }
                return false;
            });
            bubbleBody.on("mousedown", function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                e.stopPropagation();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    eventScope.trigger("limited.approve.all");
                } else {
                    if (!gingerModule.get("widget.session").isLoggedIn()) {
                        gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft().then(function(res) {
                            if (!res) {
                                eventScope.trigger("unauthenticatedWithinLimit.approve.all");
                                return;
                            }
                        });
                    }
                    eventScope.trigger("approve.all", bubbleCbData);
                    returnResult("approveAll");
                    hide();
                }
                return false;
            });
            if (bubble.closest("[contenteditable]").length) {
                bubble.attr("contenteditable", false);
            }
            var buttonReph = document.querySelector("#ginger-button-for-rephrase");
            if (buttonReph) {
                buttonReph.style.visibility = "visible";
            }
            bubble.hide();
            $gingerWidgetJquery(bubble).on("mouseleave", function hoverOut(e) {
                gracefulHide();
            });
            $gingerWidgetJquery(bubble).on("mouseenter", function hoverIn(e) {
                setTimeout(clearMouseHoverTimeout, 60);
            });
            setLimitedVisibility(false);
        };
        var returnResult = function(result, data, keepOpen) {
            if (bubbleCb) {
                bubbleCb(result, data ? data : bubbleCbData);
            }
            if (!keepOpen) hide();
        };
        var handleHoverOut = function() {
            bubbleCb = null;
            hide();
        };
        var setLoginVisibility = function(visible, target = "widget") {
            var loggedinContainer = $gingerWidgetJquery(bubbleContainer);
            var loggedoutContainer = $gingerWidgetJquery(bubbleLOContainer);
            if (visible) {
                if (!loginDisplaySent) {
                    loginDisplayTimeout = setTimeout(function() {
                        gingerModule.get("widget.report").reporterGA4({
                            event: gaFields.GAEvent.loginDisplay,
                            category: gaFields.GACategory.Login,
                            trigger: gaFields.GATrigger.limitReachedCorrections,
                            interface: target
                        });
                        loginDisplaySent = true;
                    }, 100);
                }
                loggedinContainer.hide();
                loggedoutContainer.show();
            } else {
                loggedinContainer.show();
                loggedoutContainer.hide();
            }
        };
        var setLimitedVisibility = function(visible, target = "widget") {
            if (visible) {
                if (limitedModeDisplayTimeout) {
                    limitedModeDisplayTimeout = clearTimeout(limitedModeDisplayTimeout);
                }
                limitedModeDisplayTimeout = setTimeout(function() {
                    gingerModule.get("widget.report").reporterGA4({
                        event: gaFields.GAEvent.limitedModeDisplay,
                        category: gaFields.GACategory.Correct,
                        trigger: gaFields.GATrigger.limitReachedCorrections,
                        interface: target
                    });
                }, 1e3);
                $gingerWidgetJquery(bubble).addClass("ginger-module-correctionBubble-limitedmode");
            } else {
                $gingerWidgetJquery(bubble).removeClass("ginger-module-correctionBubble-limitedmode");
            }
        };
        var init = function() {};
        return {
            show: show,
            hide: hide,
            gracefulHide: gracefulHide,
            listen: eventScope,
            setLimitedVisibility: setLimitedVisibility,
            init: init
        };
    }, [ "widget.utils", "widget.inputFinder", "widget.licenseLimits", "widget.session", "widget.report" ]);
})();

(function() {
    var module = gingerModule.load("widget.correctionService", function(config) {
        var ignoredCorrections = [];
        var correctSpellingOfSentence = function(sentence, next) {
            var completedCorrections = sentence.words.length;
            var corrections = [];
            if (sentence.words.length === 0) {
                next(sentence);
            }
            for (var i = 0; i < sentence.words.length; i++) {
                if (ignoredCorrections.indexOf(sentence.words[i]) === -1) (function(wordindex) {
                    var word = sentence.words[wordindex];
                    var trimmed = gingerModule.get("widget.utils").trimAndMatch(word.text);
                    gingerModule.get("widget.api").checkWordSpell(trimmed.text, function(correction) {
                        word.correction = correction.IsSpelledCorrectlyResult;
                        if (!word.correction.IsCorrect) {
                            var from = word.startsAt + trimmed.pre.length - sentence.startsAt;
                            var to = from + trimmed.text.length;
                            to = to - 1;
                            if (word.correction.IsCorrect !== true) {
                                var correctionMatch = sentence.correction && sentence.correction.Corrections ? findCorrectionByFromTo(sentence.correction.Corrections, from, to) : null;
                                var correctionObject = {
                                    From: from,
                                    To: to,
                                    UXFrgFrom: from,
                                    UXFrgTo: to,
                                    Type: 1,
                                    Suggestions: [],
                                    Mistakes: [ {
                                        From: from,
                                        To: to,
                                        CanAddToDict: true
                                    } ],
                                    id: correctionMatch ? correctionMatch.id : gingerModule.get("widget.utils").generateUID()
                                };
                                corrections.push(correctionObject);
                            }
                        }
                        completedCorrections--;
                        if (completedCorrections == 0) {
                            if (!sentence.correction) {
                                sentence.correction = {
                                    checkType: "shallow"
                                };
                            }
                            sentence.correction.Corrections = corrections;
                            next(sentence);
                        }
                    });
                })(i);
            }
        };
        var correctGrammarOfSentence = function(sentence, next) {
            sentence = JSON.parse(JSON.stringify(sentence));
            if (sentence.words.length) {
                var lastWordIndex = sentence.words.length - 1;
                var lastWord = sentence.words[lastWordIndex].text;
                var lastWordCutRegex = /[\s\n]+$/g;
                var lastWordCutMatch = lastWord.match(lastWordCutRegex);
                if (lastWordCutMatch) {
                    sentence.text = sentence.text.replace(lastWordCutRegex, "");
                    sentence.words[lastWordIndex].text = lastWord.replace(lastWordCutRegex, "");
                }
            }
            gingerModule.get("widget.api").checkSentence(sentence, function(correction) {
                try {
                    sentence.correction = correction;
                    if (lastWordCutMatch) {
                        sentence.words[lastWordIndex].text += lastWordCutMatch;
                        sentence.text += lastWordCutMatch;
                    }
                    for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                        var correction = sentence.correction.Corrections[i];
                        if (!correction.id) {
                            correction.id = gingerModule.get("widget.utils").generateUID();
                        }
                    }
                    next(sentence);
                } catch (e) {
                    if (console && console.error) console.error(e);
                    throw new Error(e);
                    next(sentence);
                }
            });
        };
        var ignoreMistake = function(mistake, sentence, next) {
            mistake.ignored = true;
            if (mistake.CorrectionType === 1) {
                var originalSentence = sentence.text;
                var ignoredWord = originalSentence.substring(mistake.From, mistake.To + 1);
                ignoredCorrections.push(ignoredWord);
            }
            return mistake;
        };
        var removeIgnoredMistakesFromSentenceIfNeeded = function(sentence) {
            if (!sentence.correction.Corrections || !sentence.correction.Corrections.lenreturngth) {
                sentence;
            }
            var hasRemovedNewCorrections = false;
            var correctionsExcludingIngoredOnes = [];
            for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                var correction = sentence.correction.Corrections[i];
                if (!correction.id) {
                    correction.id = gingerModule.get("widget.utils").generateUID();
                }
                var mistakeWord = sentence.text.substring(correction.From, correction.To + 1);
                if (correction.CorrectionType === 1 && ignoredCorrections.indexOf(mistakeWord) !== -1) {
                    correction.ignored = true;
                    hasRemovedNewCorrections = true;
                }
            }
            return sentence;
        };
        var correct = function(representation, stepCallBack, completedCallBack) {
            if (!representation) return;
            var awaitingCorrections = representation.length;
            for (var i = 0; i < representation.length; i++) {
                (function(sentenceIndex) {
                    if (representation[sentenceIndex].ignored || representation[sentenceIndex].charLimited) {
                        awaitingCorrections--;
                    } else if (representation[sentenceIndex].text.length < 4 || representation[sentenceIndex].text.match(/^[\s\u200b]*$/)) {
                        awaitingCorrections--;
                    } else {
                        var isActiveSentence = !!representation[sentenceIndex].activeSentence;
                        if (isActiveSentence) {
                            var isNonEnglish = false;
                            try {
                                if (!representation[sentenceIndex].correction.Sentences[0].IsEnglish) {
                                    isNonEnglish = true;
                                }
                            } catch (e) {}
                            if (isNonEnglish) {
                                awaitingCorrections--;
                                if (stepCallBack) stepCallBack(representation);
                                if (awaitingCorrections === 0 && completedCallBack) {
                                    completedCallBack(representation);
                                }
                            } else {
                                correctSpellingOfSentence(representation[sentenceIndex], function(correctedSentence) {
                                    correctedSentence.correction.checkType = "shallow";
                                    var removedIgnored = removeIgnoredMistakesFromSentenceIfNeeded(correctedSentence);
                                    representation[sentenceIndex] = mergeGrammarCheckResultsWithSentence(representation[sentenceIndex], removedIgnored);
                                    awaitingCorrections--;
                                    if (stepCallBack) stepCallBack(representation);
                                    if (awaitingCorrections === 0 && completedCallBack) {
                                        completedCallBack(representation);
                                    }
                                });
                            }
                        } else {
                            if (!representation[sentenceIndex].correction || representation[sentenceIndex].correction.checkType !== "deep") {
                                correctGrammarOfSentence(representation[sentenceIndex], function(correctedSentence) {
                                    correctedSentence.correction.checkType = "deep";
                                    var removedIgnored = removeIgnoredMistakesFromSentenceIfNeeded(correctedSentence);
                                    representation[sentenceIndex] = mergeGrammarCheckResultsWithSentence(representation[sentenceIndex], removedIgnored);
                                    awaitingCorrections--;
                                    if (stepCallBack) stepCallBack(representation);
                                    if (awaitingCorrections === 0 && completedCallBack) {
                                        completedCallBack(representation);
                                    }
                                });
                            } else {
                                var removedIgnored = removeIgnoredMistakesFromSentenceIfNeeded(representation[sentenceIndex]);
                                awaitingCorrections--;
                                if (removedIgnored) {
                                    representation[sentenceIndex] = removedIgnored;
                                    if (stepCallBack) stepCallBack(representation);
                                }
                            }
                        }
                    }
                    if (awaitingCorrections === 0 && completedCallBack) {
                        if (stepCallBack) stepCallBack(representation);
                        completedCallBack(representation);
                    }
                })(i);
            }
        };
        var getIgnoredWords = function() {
            return ignoredCorrections;
        };
        var setIgnoredWords = function(ignoredWords) {
            ignoredCorrections = ignoredWords;
        };
        var findCorrectionByFromTo = function(corrections, from, to) {
            for (var i = 0; i < corrections.length; i++) {
                var correction = corrections[i];
                if (correction.From === from && correction.To === to) {
                    return correction;
                }
            }
            return null;
        };
        var mergeGrammarCheckResultsWithSentence = function(sShallow, sDeep) {
            try {
                for (var i = 0; i < sShallow.correction.Corrections.length; i++) {
                    var correction = sShallow.correction.Corrections[i];
                    var correctionMatch = findCorrectionByFromTo(sDeep.correction.Corrections, correction.From, correction.To);
                    if (correctionMatch && correctionMatch.CorrectionType === correction.CorrectionType) {
                        correctionMatch.id = correction.id;
                    }
                }
            } catch (e) {
                if (false && console && console.warn) {
                    console.warn("grammar check result merge catch", e);
                }
            }
            return sDeep;
        };
        var mergeSentenceCorrections = function(sNew, sOld) {
            if (!sOld.correction || !sOld.correction.Corrections.length) {
                return sNew;
            }
            var changes = gingerModule.get("widget.utils").diffString(sOld.text, sNew.text);
            if (changes.preCommon == 0 && changes.postCommon == 0) {
                return sNew;
            }
            for (var h = 0; h < sOld.correction.Corrections.length; h++) {
                var correction = sOld.correction.Corrections[h];
                if (changes.to <= correction.From) {
                    correction.UXFrgFrom += changes.diff;
                    correction.UXFrgTo += changes.diff;
                    correction.From += changes.diff;
                    correction.To += changes.diff;
                } else if (changes.from >= correction.To + 1) {} else {
                    sOld.correction.Corrections.splice(h, 1);
                    h--;
                }
            }
            sNew.correction = sOld.correction;
            return sNew;
        };
        var mergeRepresentationCorrections = function(newRepr, oldRepr) {
            var preCommonSentences = 0;
            var postCommonSentences = 0;
            if (!oldRepr.length || !newRepr.length) {
                return newRepr;
            }
            var oldTrimmed;
            var newTrimmed;
            for (var i = 0; i < newRepr.length && i < oldRepr.length; i++) {
                if (oldRepr[i].text === newRepr[i].text) {
                    preCommonSentences = i + 1;
                    newRepr[i].correction = oldRepr[i].correction;
                    newRepr[i].id = oldRepr[i].id;
                    if (oldRepr[i].ignored) newRepr[i].ignored = oldRepr[i].ignored;
                    if (newRepr[i].ignored) delete newRepr[i].correction;
                    oldRepr[i] = newRepr[i];
                } else {
                    oldTrimmed = gingerModule.get("widget.utils").trimAndMatch(oldRepr[i].text);
                    newTrimmed = gingerModule.get("widget.utils").trimAndMatch(newRepr[i].text);
                    if (oldTrimmed.pre + oldTrimmed.text === newTrimmed.pre + newTrimmed.text) {
                        preCommonSentences = i + 1;
                        newRepr[i].correction = oldRepr[i].correction;
                        newRepr[i].id = oldRepr[i].id;
                        if (oldRepr[i].ignored) newRepr[i].ignored = oldRepr[i].ignored;
                        if (newRepr[i].charLimited) delete newRepr[i].correction;
                        oldRepr[i] = newRepr[i];
                    } else {
                        break;
                    }
                }
            }
            if (newRepr.length <= preCommonSentences) {
                return newRepr;
            }
            for (var i = 0; i < newRepr.length && i < oldRepr.length; i++) {
                if (oldRepr.length - i - 1 <= preCommonSentences - 1) break;
                if (newRepr.length - i - 1 <= preCommonSentences - 1) break;
                if (oldRepr[oldRepr.length - i - 1].text === newRepr[newRepr.length - i - 1].text) {
                    postCommonSentences = i + 1;
                    newRepr[newRepr.length - i - 1].correction = oldRepr[oldRepr.length - i - 1].correction;
                    newRepr[newRepr.length - i - 1].id = oldRepr[oldRepr.length - i - 1].id;
                    if (oldRepr[oldRepr.length - i - 1].ignored) newRepr[newRepr.length - i - 1].ignored = oldRepr[oldRepr.length - i - 1].ignored;
                    if (newRepr[newRepr.length - i - 1].charLimited) delete newRepr[newRepr.length - i - 1].correction;
                } else {
                    oldTrimmed = gingerModule.get("widget.utils").trimAndMatch(oldRepr[oldRepr.length - i - 1].text);
                    newTrimmed = gingerModule.get("widget.utils").trimAndMatch(newRepr[newRepr.length - i - 1].text);
                    if (oldTrimmed.pre + oldTrimmed.text === newTrimmed.pre + newTrimmed.text) {
                        postCommonSentences = i + 1;
                        newRepr[newRepr.length - i - 1].correction = oldRepr[oldRepr.length - i - 1].correction;
                        newRepr[newRepr.length - i - 1].id = oldRepr[oldRepr.length - i - 1].id;
                        if (oldRepr[newRepr.length - i - 1].ignored) newRepr[newRepr.length - i - 1].ignored = oldRepr[oldRepr.length - i - 1].ignored;
                        if (newRepr[newRepr.length - i - 1].charLimited) delete newRepr[newRepr.length - i - 1].correction;
                    } else {
                        break;
                    }
                }
            }
            for (var i = postCommonSentences; i < newRepr.length - preCommonSentences && i < oldRepr.length - preCommonSentences; i++) {
                if (oldRepr.length - i - 1 < preCommonSentences) {
                    newRepr[newRepr.length - i - 1].id = gingerModule.get("widget.utils").generateUID();
                } else if (newRepr.length - i - 1 < preCommonSentences) {} else {
                    if (newRepr[newRepr.length - i - 1].charLimited) {} else if (oldRepr[oldRepr.length - i - 1].correction && oldRepr[oldRepr.length - i - 1].correction.Sentences && !oldRepr[oldRepr.length - i - 1].correction.Sentences[0].IsEnglish) {
                        newRepr[newRepr.length - i - 1].correction = oldRepr[oldRepr.length - i - 1].correction;
                        if (oldRepr[oldRepr.length - i - 1].correction) newRepr[newRepr.length - i - 1].correction.checkType = "shallow";
                    } else if (oldRepr[oldRepr.length - i - 1].correction && oldRepr[oldRepr.length - i - 1].correction.Corrections.length) {
                        newRepr[newRepr.length - i - 1] = mergeSentenceCorrections(newRepr[newRepr.length - i - 1], oldRepr[oldRepr.length - i - 1]);
                        if (newRepr[newRepr.length - i - 1].correction) newRepr[newRepr.length - i - 1].correction.checkType = "shallow";
                    } else {}
                }
            }
            return newRepr;
        };
        var flush = function() {
            ignoredCorrections = [];
        };
        return {
            correct: correct,
            flush: flush,
            correctSpellingOfSentence: correctSpellingOfSentence,
            mergeSentenceCorrections: mergeSentenceCorrections,
            mergeCorrections: mergeRepresentationCorrections,
            ignoreMistake: ignoreMistake,
            getIgnoredWords: getIgnoredWords,
            setIgnoredWords: setIgnoredWords
        };
    }, [ "widget.phraseService", "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.ghostModifiers", function() {
        var isUnderDomain = function(domain) {
            if (!window.location) return null;
            var url = window.location.hostname.split(":")[0];
            return url.indexOf(domain) != -1;
        };
        var modifiers = {};
        modifiers.faceBook = {
            domain: "facebook.com",
            modifier: function(element, ghost) {
                var isCenterColorInputTheme = $gingerWidgetJquery(element).closest("._2ihx._i-o").length;
                if (isCenterColorInputTheme) {
                    $gingerWidgetJquery(element).css("textAlign", "center");
                }
            }
        };
        modifiers.unitTest = {
            domain: "localhost",
            modifier: function(element, ghost) {
                return;
            }
        };
        var process = function(element, ghost) {
            for (var key in modifiers) {
                if (isUnderDomain(modifiers[key].domain)) {
                    modifiers[key].modifier(element, ghost);
                }
            }
        };
        return {
            process: process
        };
    });
})();

(function() {
    var module = gingerModule.load("widget.googledocs", function() {
        var selectedTextArray = [];
        var globalSelection = [];
        var rects = [];
        function parseText() {
            if (document?.documentElement?.getAttribute("ginger-ext-for") === "gdocs-disabled") {
                return;
            }
            var area = document.querySelector(".ginger-container-body");
            if (area) {
                area.innerHTML = "";
            }
            var wholePage = document.querySelectorAll("div.kix-page-paginated");
            var newShadowEl = area ? area : document.createElement("div");
            wholePage.forEach((block, index) => {
                var parRoot = block.querySelector("div.kix-canvas-tile-content:not(.kix-canvas-tile-selection)");
                var newDivElement = document.createElement("div");
                for (var attrRoot of parRoot.attributes) {
                    if (attrRoot.name !== "class") {
                        newDivElement.setAttribute(attrRoot.nodeName, attrRoot.nodeValue);
                    }
                }
                newDivElement.contentEditable = "true";
                newDivElement.className = "ginger-container";
                newDivElement.style.position = "absolute";
                newDivElement.style.zIndex = "25";
                newDivElement.contentEditable = "true";
                newDivElement.style.color = "transparent";
                newDivElement.style.top = block.style.top;
                newDivElement.style.left = block.style.left;
                newShadowEl.appendChild(newDivElement);
                parRoot.childNodes[0].childNodes.forEach(e => {
                    if (e.getAttribute("role") === "paragraph") {
                        var newPElement = document.createElement("p");
                        newDivElement.appendChild(newPElement);
                    }
                    e.childNodes.forEach((v, ind) => {
                        var newSpanElement = document.createElement("span");
                        var res = collectTextData(v);
                        if (!res) {
                            return;
                        }
                        var dataCss = parseFontCss(res["data-font-css"]);
                        var params = {
                            width: `${+res.width * +res.matrixScaleX + .5}` + "px",
                            height: `${+res.height * +res.matrixScaleY}` + "px",
                            left: `${+res.x * +res.matrixScaleX + +res.matrixX}` + "px",
                            top: `${+res.y * +res.matrixScaleY + +res.matrixY}` + "px",
                            "font-family": dataCss.fontFamily,
                            "font-size": `${dataCss.fontSize * +res.matrixScaleY}` + "px",
                            "font-weight": dataCss.fontWeight,
                            ...dataCss.fontStyle && {
                                "font-style": dataCss.fontStyle
                            }
                        };
                        for (var attrEl in params) {
                            newSpanElement.style[`${attrEl}`] = params[`${attrEl}`];
                        }
                        newSpanElement.innerText = res["aria-label"].replaceAll(" ", " ") + " ";
                        newSpanElement.style.position = "absolute";
                        newPElement.appendChild(newSpanElement);
                    });
                });
            });
            var parentZone = document.querySelector(".kix-rotatingtilemanager");
            var subParentZone = document.querySelector(".kix-rotatingtilemanager-content");
            newShadowEl.style.top = 0 + "px";
            newShadowEl.style.left = subParentZone.style.left;
            newShadowEl.style.width = parentZone.style.width;
            newShadowEl.style.height = parentZone.style.height;
            newShadowEl.style.position = "relative";
            newShadowEl.setAttribute("contenteditable", "true");
            newShadowEl.className = "ginger-container-body";
            if (!area) {
                document.querySelector(".kix-rotatingtilemanager").appendChild(newShadowEl);
            }
        }
        function parseFontCss(fontCss) {
            const parts = fontCss.split(" ");
            let fontStyle = "";
            if (isNaN(parseFloat(parts[0]))) {
                fontStyle = parts[0];
                parts.shift();
            }
            const fontWeight = parts[0];
            const fontSize = parseFloat(parts[1]);
            const fontFamily = parts.slice(2).join(" ").replace(/"/g, "");
            return {
                fontStyle: fontStyle,
                fontWeight: fontWeight,
                fontSize: fontSize,
                fontFamily: fontFamily
            };
        }
        function collectTextData(el) {
            var attrCollection = {};
            for (const attr of el.attributes) {
                if (!el.attributes) {
                    return {};
                }
                if (attr.name === "transform") {
                    var matrixPattern = /^\w*\((-?((\d+)|(\d*\.\d+)),\s*)*(-?(\d+)|(\d*\.\d+))\)/i;
                    if (matrixPattern.test(attr.value)) {
                        var matrixValue;
                        var matrixCopy = attr.value.replace(/^\w*\(/, "").replace(")", "");
                        matrixValue = matrixCopy.split(/\s*,\s*/);
                        attrCollection = {
                            ...attrCollection,
                            matrixX: matrixValue[matrixValue.length - 2],
                            matrixY: matrixValue[matrixValue.length - 1],
                            matrixScaleX: matrixValue[0],
                            matrixScaleY: matrixValue[3]
                        };
                    }
                } else {
                    var attrKey = attr.name;
                    var attrValue = attr.value;
                    attrCollection = {
                        ...attrCollection,
                        [`${attrKey}`]: attrValue
                    };
                }
            }
            return attrCollection;
        }
        function isPointInAnyRect(x, y, rects) {
            for (const rect of rects) {
                if (x >= Math.floor(rect.left) && x <= Math.floor(rect.right) && y >= Math.floor(rect.top) && y <= Math.floor(rect.bottom)) {
                    return true;
                }
            }
            return false;
        }
        function init() {
            var rectElements = document.querySelectorAll("g rect");
            var lastRectOffset = 0;
            var lastRectLength = 0;
            var fullText = Array.from(rectElements).map(function(rect, index) {
                let str = rect.getAttribute("aria-label");
                const textNode = document.createTextNode(str);
                lastRectOffset = lastRectOffset + lastRectLength;
                lastRectLength = str.length + 2;
                rects[index] = {
                    rect: rect,
                    startOffset: lastRectOffset - 1 >= 0 ? lastRectOffset - 1 : 0,
                    endOffset: lastRectOffset + str.length + 1
                };
                return str;
            }).join(" ");
            var docsEditor = document.querySelector("div.kix-appview-editor");
            document.addEventListener("mouseup", function(event) {
                if (!docsEditor.contains(event.target)) {
                    return;
                }
                if (event.target?.id === "ginger__floatingG-bar-tool-rephrase__btn") {
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
                window.getSelection().removeAllRanges();
                selectedTextArray = [];
                globalSelection = [];
                var selectionRoot = document.querySelectorAll("div.kix-canvas-tile-selection rect:not(clipPath rect)");
                var lengthData = 0;
                selectionRoot.forEach((c, i) => {
                    var sell = c.getBoundingClientRect();
                    if (!sell) {
                        return;
                    }
                    var textNode;
                    var rangeStart;
                    var start;
                    var l = Math.ceil(sell.left);
                    var t = Math.ceil(sell.top);
                    var r = Math.ceil(sell.right);
                    var b = Math.floor(sell.bottom);
                    if (document.caretRangeFromPoint) {
                        rangeStart = document.caretRangeFromPoint(l, t);
                        textNode = rangeStart.startContainer;
                        if (rangeStart.startContainer.className === "kix-cursor-caret") {
                            rangeStart = document.caretRangeFromPoint(l + 2, t);
                            textNode = rangeStart.startContainer;
                        }
                    }
                    var rangec = document.createRange();
                    start = 0;
                    var end = textNode?.nodeValue?.length;
                    while (end - start > 1) {
                        var mid = Math.floor((start + end) / 2);
                        rangec.setStart(textNode, mid);
                        rangec.setEnd(textNode, end);
                        var rectsSel = rangec.getClientRects();
                        if (isPointInAnyRect(r, t, rectsSel)) {
                            start = mid;
                        } else {
                            if (r > rangec.getClientRects()[0].right) {
                                start = end;
                            } else {
                                end = mid;
                            }
                        }
                    }
                    var selecting = window.getSelection();
                    var rg = document.createRange();
                    selecting.removeAllRanges();
                    rg.setStart(textNode, rangeStart.startOffset);
                    rg.setEnd(textNode, start);
                    selecting.addRange(rg);
                    lengthData = lengthData + rangeStart.startContainer.length;
                    selectedTextArray.push({
                        node: rangeStart.startContainer,
                        start: rangeStart.startOffset,
                        end: start,
                        lineLength: lengthData,
                        parentNode: rangeStart.startContainer.parentElement.parentNode,
                        rects: sell
                    });
                });
                if (!selectedTextArray.length) {
                    return;
                }
                var gSelection = window.getSelection();
                gSelection.removeAllRanges();
                var startPositionOfSelect = selectedTextArray[0].start;
                var endPositionOfSelect = selectedTextArray[selectedTextArray.length - 1].end;
                var startNode = selectedTextArray[0].node;
                var endNode = selectedTextArray[selectedTextArray.length - 1].node;
                gSelection.setBaseAndExtent(startNode, startPositionOfSelect, endNode, endPositionOfSelect);
                if (gSelection.toString() === "") {
                    return;
                }
                globalSelection = {
                    node: document.querySelector(".ginger-container-body"),
                    range: gSelection.getRangeAt(0).cloneRange(),
                    selectionCoordinates: selectedTextArray[selectedTextArray.length - 1].rects,
                    fullCoordinates: selectedTextArray,
                    text: getsSelectedText()
                };
            });
        }
        var getRects = function() {
            return rects;
        };
        function getsSelectedText() {
            const e = document.querySelector(".docs-texteventtarget-iframe").contentWindow;
            if (!e) return "";
            const t = new e.CustomEvent("copy", {
                bubbles: !0
            }), n = e.document.querySelector("[contenteditable=true]");
            return n ? (n.dispatchEvent(t), n.innerText) : "";
        }
        function getSelection() {
            return {
                ...globalSelection
            };
        }
        return {
            init: init,
            getRects: getRects,
            parseText: parseText,
            getSelection: getSelection
        };
    }, [ "widget.phraseService", "widget.caret" ]);
})();

(function() {
    var module = gingerModule.load("widget.highlighters.floating", function() {
        var gingerInput;
        var element;
        var mistakeWrapTag = "gwmw";
        var isVisible = true;
        var hasSiblingCSSRuleApplied;
        var bgCache;
        var positionCache;
        var mistakeTags = [];
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        var removeMistakeTag = function(mistakeTag) {
            if (!mistakeTag) return;
            $gingerWidgetJquery(mistakeTag).html($gingerWidgetJquery(mistakeTag).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            mistakeTag = $gingerWidgetJquery(mistakeTag);
            var parent = mistakeTag.parent();
            if (mistakeTag.contents().length) {
                mistakeTag.contents().insertBefore(mistakeTag);
                mistakeTag.remove();
            } else {
                mistakeTag.remove();
            }
            parent.find("b:empty,i:empty").remove();
        };
        var getMistakeText = function(sentence, correction) {
            var from = correction.From + sentence.startsAt;
            var to = correction.To + 1 + sentence.startsAt;
            if (!gingerModule.get("widget.utils").isRichTextElement(element)) {
                return [ {
                    node: element.childNodes[0],
                    from: from,
                    to: to
                } ];
            }
            return gingerModule.get("widget.utils").getNodeFragmentsOfIndex(element, from, to);
        };
        var getMistakeTextFragment = function(sentence, correction) {
            var from = correction.UXFrgFrom + sentence.startsAt;
            var to = correction.UXFrgTo + 1 + sentence.startsAt;
            if (!gingerModule.get("widget.utils").isRichTextElement(element)) {
                return [ {
                    node: element.childNodes[0],
                    from: from,
                    to: to
                } ];
            }
            return gingerModule.get("widget.utils").getNodeFragmentsOfIndex(element, from, to);
        };
        var highlightOffset = 2;
        var getRelativeTextBoundingBoxes = function(textRanges) {
            var bb = gingerModule.get("widget.measure").getPaddingBox(gingerInput.element, positionCache);
            var sr = gingerModule.get("widget.measure").getScaleRatio(gingerInput.element);
            var ghostH = bb.height / sr;
            var scroll = gingerModule.get("widget.measure").getElementScroll(element);
            var n = false;
            if (!Array.isArray(textRanges)) {
                textRanges = [ textRanges ];
            }
            var boxes = [];
            var docScroll = gingerModule.get("widget.measure").getDocumentScroll();
            var documentGap = {
                top: 0,
                left: 0
            };
            if (document && document.body && document.body.contains(element)) {
                documentGap = gingerModule.get("widget.measure").getDocumentGap(positionCache);
            }
            var paddingBox = gingerModule.get("widget.measure").getPaddingBox(element, positionCache);
            var c = docScroll.left - documentGap.left - paddingBox.left + scroll.left;
            var h = docScroll.top - documentGap.top - paddingBox.top + scroll.top;
            for (var tri = 0; tri < textRanges.length; tri++) try {
                var range = textRanges[tri];
                var docRange = document.createRange();
                docRange.setStart(range.node, range.from);
                docRange.setEnd(range.node, range.to);
                var rangeRects = Array.from(docRange.getClientRects());
                for (var rri = 0; rri < rangeRects.length; rri++) {
                    var rangeRect = rangeRects[rri];
                    if (rangeRect.width < .1) continue;
                    var lastBox = boxes[boxes.length - 1];
                    var top = rangeRect.top + h;
                    var left = rangeRect.left + c;
                    var bottom = rangeRect.bottom + h + highlightOffset;
                    var right = rangeRect.right + c;
                    var width = rangeRect.width;
                    var height = ghostH < rangeRect.height + highlightOffset ? rangeRect.height : rangeRect.height + highlightOffset;
                    if (lastBox && lastBox.right === left && lastBox.top === top && lastBox.bottom === bottom && lastBox.height === height) {
                        lastBox.right = right;
                        lastBox.width = lastBox.width + width;
                    } else {
                        boxes.push({
                            top: top,
                            left: left,
                            bottom: bottom,
                            right: right,
                            width: width,
                            height: height
                        });
                    }
                    var newest = boxes[boxes.length - 1];
                    var last = boxes[boxes.length - 2];
                    if (last && newest) if (newest.top === last.top && newest.left === last.left && newest.width === last.width && newest.height === last.height) {
                        boxes.pop();
                    }
                }
            } catch (t) {
                console.error("Ginger range selection failed.", t);
            }
            return boxes;
        };
        var getScrollDimensions = function(e) {
            return {
                width: Math.min(e.scrollWidth, 32767),
                height: Math.min(e.scrollHeight, 32767)
            };
        };
        var refreshTo;
        var gracefulRefresh = function(r) {
            if (refreshTo) {
                refreshTo = clearTimeout(refreshTo);
            }
            refreshTo = setTimeout(function() {
                refresh(r);
            }, 10);
        };
        var cachedRepresentation;
        var refresh = function(representation, force) {
            if (!representation) return;
            cachedRepresentation = representation;
            if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            var elementScroll = gingerModule.get("widget.measure").getElementScroll(element);
            var scaleRatio = gingerModule.get("widget.measure").getScaleRatio(element);
            var correctionIds = [];
            for (var ri = 0; ri < representation.length; ri++) {
                var sentence = representation[ri];
                if (sentence.correction) {
                    for (var ci = 0; ci < sentence.correction.Corrections.length; ci++) {
                        var correction = sentence.correction.Corrections[ci];
                        if (correction.ignored) continue;
                        correctionIds.push(correction.id);
                        var mistakeFragments = getMistakeText(sentence, correction);
                        var longMistakeFragment = getMistakeTextFragment(sentence, correction);
                        var relBoundingBoxes = getRelativeTextBoundingBoxes(mistakeFragments);
                        var relBoundingBoxesForFragment = getRelativeTextBoundingBoxes(longMistakeFragment);
                        var mistakeHighlights = $gingerWidgetJquery(ghost).find(".gwmw-" + correction.id);
                        if (mistakeHighlights.length > relBoundingBoxes.length) {
                            for (var mhi = Math.max(0, relBoundingBoxes.length - 1); mhi < mistakeHighlights.length; mhi++) {
                                mistakeHighlights[mhi].remove();
                            }
                        }
                        for (var rbbi = 0; rbbi < relBoundingBoxes.length; rbbi++) {
                            var mistakeHighlight = mistakeHighlights.filter(".gwmwi-" + rbbi);
                            if (correction.Suggestions.length !== 0 || !correction.Confidence) {
                                mistakeHighlight.removeClass("no-suggestion");
                            } else {
                                mistakeHighlight.addClass("no-suggestion");
                            }
                            if (!mistakeHighlight.length) {
                                mistakeHighlight = $gingerWidgetJquery(document.createElement(mistakeWrapTag));
                                mistakeHighlight.css("position", "absolute");
                                mistakeHighlight.addClass("ginger-module-highlighter-mistake-type-" + correction.CorrectionType);
                                mistakeHighlight.addClass("gwmw-" + correction.id);
                                mistakeHighlight.addClass("gwmwi-" + rbbi);
                                mistakeHighlight.data("cid", correction.id);
                                mistakeHighlight.addClass("ginger-module-highlighter-mistake-anim");
                                $gingerWidgetJquery(ghost).append(mistakeHighlight);
                            }
                            mistakeHighlight.css("top", relBoundingBoxes[rbbi].top);
                            mistakeHighlight.css("width", relBoundingBoxes[rbbi].width);
                            mistakeHighlight.css("height", relBoundingBoxes[rbbi].height);
                            mistakeHighlight.css("left", relBoundingBoxes[rbbi].left);
                            var mistakeCords = {
                                singleStart: relBoundingBoxes[0].left,
                                singleFirstTop: relBoundingBoxes[0].top,
                                singleLastTop: relBoundingBoxes[relBoundingBoxes.length - 1].top,
                                singleFirstHeight: relBoundingBoxes[0].height,
                                singleLastHeight: relBoundingBoxes[relBoundingBoxes.length - 1].height,
                                singleEnd: relBoundingBoxes[relBoundingBoxes.length - 1].left + relBoundingBoxes[relBoundingBoxes.length - 1].width,
                                fragmentStart: relBoundingBoxesForFragment[0].left,
                                fragmentFirstTop: relBoundingBoxesForFragment[0].top,
                                fragmentLastTop: relBoundingBoxesForFragment[relBoundingBoxesForFragment.length - 1].top,
                                fragmentFirstHeight: relBoundingBoxesForFragment[0].height,
                                fragmentLastHeight: relBoundingBoxesForFragment[relBoundingBoxesForFragment.length - 1].height,
                                fragmentEnd: relBoundingBoxesForFragment[relBoundingBoxesForFragment.length - 1].left + relBoundingBoxesForFragment[relBoundingBoxesForFragment.length - 1].width
                            };
                            mistakeHighlight.data("cords", mistakeCords);
                        }
                    }
                }
            }
            $gingerWidgetJquery(ghost).find("gwmw").each(function(i, e) {
                var cid = $gingerWidgetJquery(e).data("cid");
                if (correctionIds.indexOf(cid) === -1) {
                    $gingerWidgetJquery(e).remove();
                }
            });
            updateScrolling();
        };
        var getMistakeElements = function() {
            return $gingerWidgetJquery(ghost).find(mistakeWrapTag);
        };
        var setVisibility = function(shouldBeVisible) {
            if (!shouldBeVisible) {
                $gingerWidgetJquery(ghostWrapper).hide();
            } else {
                $gingerWidgetJquery(ghostWrapper).show();
            }
            isVisible = shouldBeVisible;
            gingerInput.events.listen.trigger("mutation");
        };
        var destroy = function() {
            $gingerWidgetJquery(ghostWrapper).remove();
            if (checkPositionInterval) {
                clearInterval(checkPositionInterval);
            }
        };
        var checkIfSiblingCSSRuleIsApplied = function(el) {
            var sheets = document.styleSheets, ret = [];
            if (!sheets) return;
            el.matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector || el.oMatchesSelector;
            try {
                for (var i in sheets) {
                    var rules = sheets[i].rules || sheets[i].cssRules;
                    for (var r in rules) {
                        if (el.matches(rules[r].selectorText)) {
                            ret.push(rules[r].cssText);
                            if (/[+]/.test(rules[r].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var ghostWrapper = $gingerWidgetJquery("<gdiv class='ginger-module-highlighter ginger-module-highlighter-float'></gdiv>");
        var ghost = $gingerWidgetJquery("<gdiv class='ginger-module-highlighter-float-content'></gdiv>");
        var buildGhost = function(afterFocus) {
            if (isQualtrics() || gingerModule.get("widget.utils").isNotion() || isSpreadsheet()) {
                return buildGhostForQualtrics(afterFocus);
            }
            if (isGoogleDocs()) {
                if ($gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float")) {
                    $gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float").remove();
                }
            }
            var inputPosition = $gingerWidgetJquery(element).css("position");
            if (hasSiblingCSSRuleApplied) {
                ghostWrapper.insertAfter($gingerWidgetJquery(element));
            } else if (inputPosition == "static" || inputPosition == "relative" || inputPosition == "absolute") {
                ghostWrapper.insertBefore($gingerWidgetJquery(element));
            } else {
                ghostWrapper.insertAfter($gingerWidgetJquery(element));
            }
            ghostWrapper.append(ghost);
            bgCache = $gingerWidgetJquery(element).css("background");
            positionCache = $gingerWidgetJquery(element).css("position");
            $gingerWidgetJquery(element).css("background", "transparent");
            $gingerWidgetJquery(ghostWrapper).css("background", bgCache);
            if (isFBChat(element)) {
                $gingerWidgetJquery(element).css("overflowY", "auto");
            }
            if (isOutlook() || gingerModule.get("widget.utils").isCKEditor(element)) {
                $gingerWidgetJquery(ghostWrapper).css({
                    backgroundColor: "transparent",
                    zIndex: "2",
                    pointerEvents: "none"
                });
            }
            if (isGoogleDocs()) {
                $gingerWidgetJquery(ghostWrapper).css({
                    zIndex: "25"
                });
            }
        };
        var buildGhostForQualtrics = function(afterFocus) {
            if ($gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float")) {
                $gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float").remove();
            }
            ghostWrapper.appendTo($gingerWidgetJquery(document.querySelector("body")));
            ghostWrapper.append(ghost);
            if (!afterFocus) {
                bgCache = $gingerWidgetJquery(element).css("background");
                positionCache = $gingerWidgetJquery(element).css("position");
                $gingerWidgetJquery(ghostWrapper).css("background", "transparent");
                $gingerWidgetJquery(ghostWrapper).data("overridedZIndex", gingerModule.get("widget.measure").findHighestZIndex() + 25);
            }
            if (isOutlook() || gingerModule.get("widget.utils").isCKEditor(element)) {
                $gingerWidgetJquery(ghostWrapper).css({
                    backgroundColor: "transparent",
                    zIndex: "2",
                    pointerEvents: "none"
                });
            }
        };
        var updateScrolling = function() {
            var t = getScrollPosition(element);
            ghostWrapper.get(0).scrollTop = t.top;
            ghostWrapper.get(0).scrollLeft = t.left;
        };
        var getScrollPosition = function(t) {
            var isCompatMode = t === window.document.body && "BackCompat" === window.document.compatMode;
            var top = isCompatMode ? 0 : t.scrollTop;
            var left = isCompatMode ? 0 : t.scrollLeft;
            return {
                top: top,
                left: left
            };
        };
        var renderGhost = function() {
            if (!$gingerWidgetJquery(element).is(":visible")) {
                return;
            }
            var zIndex = parseInt($gingerWidgetJquery(element).css("z-index"));
            if (!zIndex) zIndex = 1;
            if (zIndex < 2) zIndex = 2;
            var originalPosition = $gingerWidgetJquery(element).data("gingerPositionCache");
            if (!originalPosition) {
                originalPosition = $gingerWidgetJquery(element).css("position");
                $gingerWidgetJquery(element).data("gingerPositionCache", originalPosition);
            }
            var originalZindex = $gingerWidgetJquery(element).data("gingerZindexCache");
            if (!originalZindex) {
                originalZindex = $gingerWidgetJquery(element).css("z-index");
                $gingerWidgetJquery(element).data("gingerZindexCache", originalZindex);
            }
            var inputPosition = originalPosition;
            if (inputPosition == "fixed") {
                $gingerWidgetJquery(ghostWrapper).css("position", "fixed");
                $gingerWidgetJquery(ghostWrapper).css("z-index", zIndex - 1);
                $gingerWidgetJquery(element).css("z-index", zIndex);
            } else if (inputPosition == "relative") {
                $gingerWidgetJquery(ghostWrapper).css("position", "absolute");
                if (hasSiblingCSSRuleApplied) {
                    $gingerWidgetJquery(ghostWrapper).css("z-index", zIndex - 1);
                    $gingerWidgetJquery(element).css("z-index", zIndex);
                }
            } else if (inputPosition == "absolute") {
                $gingerWidgetJquery(ghostWrapper).css("position", "absolute");
                $gingerWidgetJquery(ghostWrapper).css("z-index", zIndex - 1);
                $gingerWidgetJquery(element).css("z-index", zIndex);
            } else {
                $gingerWidgetJquery(element).css("position", "relative");
                $gingerWidgetJquery(ghostWrapper).css("position", "absolute");
                if (hasSiblingCSSRuleApplied) {
                    $gingerWidgetJquery(ghostWrapper).css("z-index", zIndex - 1);
                    $gingerWidgetJquery(element).css("z-index", zIndex);
                }
            }
            if ($gingerWidgetJquery(ghostWrapper).data("overridedZIndex")) {
                ghostWrapper.css("pointer-events", "none");
                $gingerWidgetJquery(ghostWrapper).css("z-index", $gingerWidgetJquery(ghostWrapper).data("overridedZIndex"));
            }
            var bb = gingerModule.get("widget.measure").getPaddingBox(gingerInput.element, positionCache);
            var gwpb = gingerModule.get("widget.measure").getPaddingBox(ghostWrapper.get(0), positionCache);
            var sr = gingerModule.get("widget.measure").getScaleRatio(gingerInput.element);
            var styles = getComputedStyle(ghostWrapper.get(0));
            var topDifference = bb.top - gwpb.top;
            if (Math.abs(topDifference) > .1) {
                ghostWrapper.css("marginTop", parseFloat(styles["margin-top"]) + topDifference);
                if (isInstagram()) {
                    ghostWrapper.css("marginTop", "0");
                }
            }
            var leftDifference = bb.left - gwpb.left;
            if (Math.abs(leftDifference) > .1) {
                ghostWrapper.css("marginLeft", parseFloat(styles["margin-left"]) + leftDifference);
            }
            ghostWrapper.css("height", bb.height / sr);
            ghostWrapper.css("width", bb.width / sr);
            ghost.css("height", bb.height + element.scrollHeight);
            if (isGoogleDocs()) {
                ghost.css("height", bb.height);
            }
        };
        var ghost;
        var intId = undefined;
        var checkPositionInterval = undefined;
        var init = function(initGingerInput) {
            gingerInput = initGingerInput;
            element = gingerInput.element;
            hasSiblingCSSRuleApplied = checkIfSiblingCSSRuleIsApplied(element);
            buildGhost();
            renderGhost();
            $gingerWidgetJquery(element).on("scroll", function() {
                updateScrolling();
            });
            if (isQualtrics() || gingerModule.get("widget.utils").isNotion() || isSpreadsheet()) {
                gingerInput.events.listen.on("focus", function() {
                    buildGhost(true);
                    renderGhost();
                });
            }
            gingerInput.events.listen.on("mutation", function(e) {
                if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                renderGhost();
                refresh(cachedRepresentation, true);
            });
        };
        var mutationObserver = function(element) {
            if (!element || !element.parentNode) {
                return;
            }
            var observer = new MutationObserver(function(mutationRecords) {});
            observer.observe(element.parentNode, {
                childList: true
            });
        };
        var isQualtrics = function() {
            var splitHost = window.location.hostname.split(".");
            return splitHost && splitHost.length && splitHost[splitHost.length - 2] === "qualtrics";
        };
        function isSpreadsheet() {
            return /docs.google.com\/spreadsheets/.test(location.href);
        }
        var isFBChat = function(element) {
            if (/facebook.com/.test(location.hostname)) {
                var chatTabs = document.querySelectorAll('[data-pagelet="ChatTab"]');
                if (chatTabs && chatTabs.length) {
                    for (var i = 0; i < chatTabs.length; i++) {
                        if (chatTabs[i].contains(element)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var isInstagram = function() {
            if (/instagram.com/.test(location.hostname)) {
                return true;
            }
            return false;
        };
        var isOutlook = function() {
            return /outlook.live.com|outlook.office365.com|outlook.office.com/.test(location.hostname);
        };
        var checkPosition = function(element) {
            if (!element) {
                return;
            }
            var position = element.getBoundingClientRect();
            checkPositionInterval = setInterval(function() {
                var newPosition = element.getBoundingClientRect();
                if (newPosition.x !== position.x || newPosition.y !== position.y) {
                    renderGhost();
                    position = newPosition;
                }
            }, 5);
        };
        return {
            refresh: gracefulRefresh,
            init: init,
            setVisibility: setVisibility,
            getMistakeElements: getMistakeElements,
            destroy: destroy
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var module = gingerModule.load("widget.highlighters.ghost", function() {
        var gingerInput;
        var element;
        var ghost;
        var sentenceWrapTag = "gwsw";
        var mistakeWrapTag = "gwmw";
        var isVisible = true;
        var hasSiblingCSSRuleApplied = false;
        var representationCache = [];
        var checkIfSiblingCSSRuleIsApplied = function(el) {
            var sheets = document.styleSheets, ret = [];
            if (!sheets) return;
            el.matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector || el.oMatchesSelector;
            try {
                for (var i in sheets) {
                    var rules = sheets[i].rules || sheets[i].cssRules;
                    for (var r in rules) {
                        if (el.matches(rules[r].selectorText)) {
                            ret.push(rules[r].cssText);
                            if (/[+]/.test(rules[r].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var positionGhostBehindElement = function() {
            if (!$gingerWidgetJquery(element).is(":visible")) {
                return;
            }
            var elementPosition = $gingerWidgetJquery(element).position();
            var paddingBox = gingerModule.get("widget.measure").getPaddingBox(element);
            var dpr = window.devicePixelRatio || 1;
            if ($gingerWidgetJquery(ghost).css("box-sizing") === "border-box") {
                $gingerWidgetJquery(ghost).css("height", paddingBox.height + paddingBox.border.top + paddingBox.border.bottom);
                $gingerWidgetJquery(ghost).css("width", paddingBox.width + paddingBox.border.left + paddingBox.border.right);
            } else {
                var s = window.getComputedStyle(element);
                $gingerWidgetJquery(ghost).css("height", paddingBox.height - parseInt(s["padding-top"]) - parseInt(s["padding-bottom"]));
                $gingerWidgetJquery(ghost).css("width", paddingBox.width - parseInt(s["padding-right"]) - parseInt(s["padding-left"]));
            }
            var zIndex = parseInt($gingerWidgetJquery(element).css("z-index"));
            if (!zIndex) zIndex = 1;
            if (zIndex < 2) zIndex = 2;
            var originalPosition = $gingerWidgetJquery(element).data("gingerPositionCache");
            if (!originalPosition) {
                originalPosition = $gingerWidgetJquery(element).css("position");
                $gingerWidgetJquery(element).data("gingerPositionCache", originalPosition);
            }
            var originalZindex = $gingerWidgetJquery(element).data("gingerZindexCache");
            if (!originalZindex) {
                originalZindex = $gingerWidgetJquery(element).css("z-index");
                $gingerWidgetJquery(element).data("gingerZindexCache", originalZindex);
            }
            var inputPosition = originalPosition;
            if (inputPosition == "fixed") {
                $gingerWidgetJquery(ghost).css("position", "fixed");
                $gingerWidgetJquery(ghost).css("z-index", zIndex - 1);
                $gingerWidgetJquery(element).css("z-index", zIndex);
                $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                $gingerWidgetJquery(ghost).css("left", elementPosition.left);
            } else if (inputPosition == "relative") {
                $gingerWidgetJquery(ghost).css("position", "absolute");
                $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                $gingerWidgetJquery(ghost).css("left", elementPosition.left);
                if (hasSiblingCSSRuleApplied) {
                    $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                    $gingerWidgetJquery(ghost).css("left", elementPosition.left);
                    $gingerWidgetJquery(ghost).css("z-index", zIndex - 1);
                    $gingerWidgetJquery(element).css("z-index", zIndex);
                }
            } else if (inputPosition == "absolute") {
                $gingerWidgetJquery(ghost).css("position", "absolute");
                $gingerWidgetJquery(ghost).css("z-index", zIndex - 1);
                $gingerWidgetJquery(element).css("z-index", zIndex);
                $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                $gingerWidgetJquery(ghost).css("left", elementPosition.left);
            } else {
                $gingerWidgetJquery(element).css("position", "relative");
                $gingerWidgetJquery(ghost).css("position", "absolute");
                $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                $gingerWidgetJquery(ghost).css("left", elementPosition.left);
                if (hasSiblingCSSRuleApplied) {
                    $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                    $gingerWidgetJquery(ghost).css("left", elementPosition.left);
                    $gingerWidgetJquery(ghost).css("z-index", zIndex - 1);
                    $gingerWidgetJquery(element).css("z-index", zIndex);
                }
            }
        };
        var getSafeHtml = function(unsafe) {
            return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        };
        var createSentenceByRepresentation = function(sentence, existingMistakes) {
            var newSentenceInGhost = $gingerWidgetJquery("<" + sentenceWrapTag + " />").get(0);
            newSentenceInGhost.id = "gws-" + sentence.id;
            var preLineBreaks = sentence.preLineBreakCount ? new Array(sentence.preLineBreakCount + 1).join("\n") : "";
            var postLineBreaks = sentence.postLineBreakCount ? new Array(sentence.postLineBreakCount + 1).join("\n") : "";
            if (!sentence.correction || !sentence.correction.Corrections.length) {
                newSentenceInGhost.innerHTML = preLineBreaks + getSafeHtml(sentence.text) + postLineBreaks;
                return newSentenceInGhost;
            }
            newSentenceInGhost.innerHTML += preLineBreaks;
            var fragments = gingerModule.get("widget.phraseService").getSentenceFragments(sentence);
            var correctedText = "";
            for (var i = 0; i < fragments.length; i++) {
                var fragmentElement;
                if (fragments[i].correction && !fragments[i].correction.ignored) {
                    var animateMistake = false;
                    if (existingMistakes.indexOf(fragments[i].correction.id) === -1 && !$gingerWidgetJquery(ghost).find("#" + mistakeWrapTag + "-" + fragments[i].correction.id).length) {
                        animateMistake = true;
                    }
                    fragmentElement = document.createElement(mistakeWrapTag);
                    fragmentElement.className = "ginger-module-highlighter-mistake-type-" + fragments[i].correction.CorrectionType;
                    fragmentElement.className += " gwmw-" + fragments[i].correction.id;
                    $gingerWidgetJquery(fragmentElement).data("cid", fragments[i].correction.id);
                    $gingerWidgetJquery(fragmentElement).attr("id", "gwmw-" + fragments[i].correction.id);
                    if (animateMistake) {
                        fragmentElement.className += " ginger-module-highlighter-mistake-anim";
                    }
                    if (fragments[i].correction.Suggestions.length !== 0 || !fragments[i].correction.Confidence) {
                        $gingerWidgetJquery(fragmentElement).removeClass("no-suggestion");
                    } else {
                        fragmentElement.className += " no-suggestion";
                    }
                    fragmentElement.appendChild(document.createTextNode(fragments[i].text));
                } else {
                    fragmentElement = document.createTextNode(fragments[i].text);
                }
                newSentenceInGhost.appendChild(fragmentElement);
            }
            newSentenceInGhost.innerHTML += postLineBreaks;
            return newSentenceInGhost;
        };
        function getScrollbarWidth() {
            var outer = document.createElement("div");
            outer.style.visibility = "hidden";
            outer.style.overflow = "scroll";
            outer.style.msOverflowStyle = "scrollbar";
            document.body.appendChild(outer);
            var inner = document.createElement("div");
            outer.appendChild(inner);
            var scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
            outer.parentNode.removeChild(outer);
            return scrollbarWidth;
        }
        var cloneStyle = function() {
            if (!gingerInput.isEnabled()) return;
            var bg = $gingerWidgetJquery(element).css("background");
            var bgImage = $gingerWidgetJquery(element).css("background-image");
            var bgColor = $gingerWidgetJquery(element).css("background-color");
            var isTransparentBackground = bgImage == "none" && bgColor == "rgba(0, 0, 0, 0)" ? true : false;
            if (!isTransparentBackground) {
                $gingerWidgetJquery(element).get(0).style.setProperty("background", "none", "important");
                $gingerWidgetJquery(element).data("gingerBackgroundCache", bg);
            }
            var cloneStyleFrom = element;
            if (element.childNodes.length && /mentions-texteditor__content/.test(element.childNodes[0].className)) {
                cloneStyleFrom = element.childNodes[0];
            }
            var styles = [ "color", "borderRadius", "border", "borderColor", "boxSizing", "paddingTop", "paddingLeft", "paddingRight", "paddingBottom", "marginTop", "marginLeft", "marginRight", "marginBottom", "fontFamily", "direction", "fontSize", "textAlign", "letterSpacing", "fontWeight", "whiteSpace", "overflowWrap" ];
            for (var i = 0; i < styles.length; i++) {
                $gingerWidgetJquery(ghost).css(styles[i], $gingerWidgetJquery(element).css(styles[i]));
            }
            var lh = $gingerWidgetJquery(cloneStyleFrom).css("lineHeight");
            $gingerWidgetJquery(ghost).css("lineHeight", lh);
            $gingerWidgetJquery(cloneStyleFrom).css("lineHeight", lh);
            var backgroundCache = $gingerWidgetJquery(cloneStyleFrom).data("gingerBackgroundCache");
            if (backgroundCache) {
                $gingerWidgetJquery(ghost).css("background", backgroundCache);
            }
            $gingerWidgetJquery(ghost).css({
                color: "rgba(0,0,0,0)"
            });
            $gingerWidgetJquery(ghost).css({
                display: "block"
            });
            if (gingerModule.get("widget.utils").isRichTextElement(cloneStyleFrom)) {
                $gingerWidgetJquery(ghost).css("white-space", "pre-wrap");
            } else {
                $gingerWidgetJquery(ghost).css("white-space", $gingerWidgetJquery(cloneStyleFrom).css("white-space"));
            }
            gingerModule.get("widget.ghostModifiers").process(cloneStyleFrom, ghost);
        };
        var refresh = function(representation) {
            if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            if (!isVisible) return;
            var repr = gingerModule.get("widget.utils").clone(representation);
            try {
                if (repr[repr.length - 1].text.match(/\n$/)) {
                    repr[repr.length - 1].text += "\n";
                }
            } catch (e) {}
            cloneStyle();
            positionGhostBehindElement();
            var existingMistakes = $gingerWidgetJquery(ghost).find(mistakeWrapTag).map(function() {
                return this.id.substring((mistakeWrapTag + "-").length);
            }).get();
            var sentencesInGhost = $gingerWidgetJquery(ghost).find(sentenceWrapTag);
            for (var i = 0; i < repr.length || i < sentencesInGhost.length; i++) {
                var sentenceNeedsUpdate = !representationCache[i] || JSON.stringify(repr[i]) !== JSON.stringify(representationCache[i]);
                if (!repr[i]) {
                    $gingerWidgetJquery(sentencesInGhost[i]).remove();
                } else if (!sentencesInGhost[i]) {
                    $gingerWidgetJquery(ghost).append(createSentenceByRepresentation(repr[i], existingMistakes));
                } else if (sentenceNeedsUpdate) {
                    $gingerWidgetJquery(sentencesInGhost[i]).replaceWith(createSentenceByRepresentation(repr[i], existingMistakes));
                } else {}
            }
            representationCache = repr;
            scrollUpdate();
        };
        var scrollUpdate = function() {
            var scroll = gingerModule.get("widget.measure").getElementScroll(element);
            ghost.scrollTop(scroll.top);
            ghost.scrollLeft(scroll.left);
        };
        var createGhost = function() {
            var inputPosition = $gingerWidgetJquery(element).css("position");
            if (hasSiblingCSSRuleApplied) {
                ghost = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(element));
            } else if (inputPosition == "static" || inputPosition == "relative") {
                ghost = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertBefore($gingerWidgetJquery(element));
            } else {
                ghost = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(element));
            }
        };
        var getMistakeElements = function() {
            return $gingerWidgetJquery(ghost).find(mistakeWrapTag);
        };
        var setVisibility = function(shouldBeVisible) {
            if (shouldBeVisible) {
                $gingerWidgetJquery(ghost).show();
            } else {
                $gingerWidgetJquery(ghost).hide();
                var backgroundCache = $gingerWidgetJquery(element).data("gingerBackgroundCache");
                if (backgroundCache) {
                    $gingerWidgetJquery(element).css("background", backgroundCache);
                }
            }
            isVisible = !!shouldBeVisible;
        };
        var destroy = function() {
            var backgroundCache = $gingerWidgetJquery(element).data("gingerBackgroundCache");
            if (backgroundCache) {
                $gingerWidgetJquery(element).css("background", backgroundCache);
            }
            $gingerWidgetJquery(element).css("position", $gingerWidgetJquery(element).data("gingerPositionCache") || "");
            $gingerWidgetJquery(element).css("z-index", $gingerWidgetJquery(element).data("gingerZindexCache") || "");
            gingerInput.events.listen.off("mutation.ghostUpdate");
            $gingerWidgetJquery(element).off("blur", positionGhostBehindElement);
            $gingerWidgetJquery(element).off("scroll", scrollUpdate);
            $gingerWidgetJquery(ghost).remove();
        };
        var init = function(inputHandler) {
            gingerInput = inputHandler;
            element = gingerInput.element;
            hasSiblingCSSRuleApplied = checkIfSiblingCSSRuleIsApplied(element);
            $gingerWidgetJquery(element).blur(positionGhostBehindElement);
            $gingerWidgetJquery(element).scroll(scrollUpdate);
            element.addEventListener("scroll", scrollUpdate);
            gingerInput.events.listen.on("mutation.ghostUpdate", function() {
                if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                var dpr = window.devicePixelRatio || 1;
                if (dpr < 1) {
                    destroy();
                } else {
                    ghost.show();
                }
                cloneStyle();
                positionGhostBehindElement();
            });
            createGhost();
            positionGhostBehindElement();
        };
        return {
            refresh: refresh,
            refreshPosition: positionGhostBehindElement,
            init: init,
            setVisibility: setVisibility,
            scrollUpdate: scrollUpdate,
            getMistakeElements: getMistakeElements,
            destroy: destroy
        };
    }, [ "widget.utils", "widget.phraseService", "widget.ghostModifiers", "widget.measure" ]);
})();

(function() {
    var module = gingerModule.load("widget.highlighters.inline", function() {
        var gingerInput;
        var element;
        var mistakeWrapTag = "gwmw";
        var isVisible = true;
        var antiCollisionOff = false;
        var handleHighlighterExceptions = function() {
            var isSalesForceOldEmailTemplateEditor = /emailauthorframe\.jsp\?email_type=html/.test(window.location.href);
            if (isSalesForceOldEmailTemplateEditor) {
                mistakeWrapTag = "span";
            }
        };
        var isThereBlockElemDifference = function(startNode, endNode) {
            var blockSelectors = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (startNode === endNode) return false;
            var commonAncestor = $gingerWidgetJquery(startNode).parents().has(endNode).first();
            var hasStartNodeABlockParent = $gingerWidgetJquery(startNode).parentsUntil(commonAncestor, blockSelectors).length;
            var hasEndNodeABlockParent = $gingerWidgetJquery(endNode).parentsUntil(commonAncestor, blockSelectors).length;
            return hasStartNodeABlockParent || hasEndNodeABlockParent ? true : false;
        };
        var createMistakeTag = function(element, sentence, correction) {
            var from = correction.From + sentence.startsAt;
            var to = correction.To + 1 + sentence.startsAt;
            var nodeOffsets = gingerModule.get("widget.utils").getNodeOffsetOfIndex(element, from, to);
            if (!nodeOffsets.startNode || !nodeOffsets.endNode) {
                return;
            }
            var wrapNode = wrapSelection(mistakeWrapTag, nodeOffsets.startNode, nodeOffsets.startNodeOffset, nodeOffsets.endNode, nodeOffsets.endNodeOffset);
            $gingerWidgetJquery(element).find("b:empty,i:empty").remove();
            element.normalize();
            return wrapNode;
        };
        var saveSelection = function() {
            return gingerModule.get("widget.selectionManager").saveSelection(element);
        };
        var restoreSelection = function() {
            return gingerModule.get("widget.selectionManager").restoreSelection(element);
        };
        var wrapSelection = function(nodeName, startNode, startNodeOffset, endNode, endNodeOffset) {
            var range = document.createRange();
            try {
                range.setStart(startNode, startNodeOffset);
                range.setEnd(endNode, endNodeOffset);
            } catch (e) {
                console.error(e);
            }
            var wrapNode = document.createElement(nodeName);
            wrapNode.appendChild(range.extractContents());
            range.insertNode(wrapNode);
            return wrapNode;
        };
        var removeMistakeTag = function(mistakeTag) {
            if (!mistakeTag) return;
            $gingerWidgetJquery(mistakeTag).html($gingerWidgetJquery(mistakeTag).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            mistakeTag = $gingerWidgetJquery(mistakeTag);
            var parent = mistakeTag.parent();
            if (mistakeTag.contents().length) {
                mistakeTag.contents().insertBefore(mistakeTag);
                mistakeTag.remove();
            } else {
                mistakeTag.remove();
            }
            parent.find("b:empty,i:empty").remove();
        };
        var removeChromeRenderedSpanFontStylings = function() {
            var styledSpanTags = $gingerWidgetJquery(element).find("span[style]");
            styledSpanTags.each(function(i, e) {
                var color = $gingerWidgetJquery(e).css("background-color");
                if (color) {
                    color = color.toLowerCase().replace(/ /g, "");
                    if (color === "rgba(255,115,115,0.3)" || color === "rgba(87,131,204,0.3)") {
                        $gingerWidgetJquery(e).css("background-color", "");
                    }
                }
            });
        };
        var removeGmailAutoCompleteSpan = function() {
            $gingerWidgetJquery(element).find(".XjviVd").slice(1).remove();
        };
        var getSentenceBySentenceId = function(id, repr) {
            for (var i = 0; i < repr.length; i++) {
                if (repr[i].id === id) return repr[i];
            }
            return null;
        };
        var checkMistakeTagSanity = function(correction, sentence) {
            var mistakeTag = document.getElementById("gwmw-" + correction.id);
            if (!sentence || !correction || mistakeTag.innerText !== sentence.text.substring(correction.From, correction.To + 1) || mistakeTag.querySelectorAll(mistakeWrapTag).length) {
                return false;
            }
            return true;
        };
        var doesApplyForSpecialHighlightExclusion = function(element, repr, sentence, correction) {
            if (window.location.hostname.indexOf("lightning.force.com") != -1) {
                if (sentence.id === repr[repr.length - 1].id && correction.id === sentence.correction.Corrections[sentence.correction.Corrections.length - 1].id) {
                    var lastWordOfLastSentence = sentence.words[sentence.words.length - 1];
                    if (lastWordOfLastSentence.startsAt - sentence.startsAt === correction.From && lastWordOfLastSentence.endsAt - sentence.startsAt === correction.To + 1) {
                        if (!$gingerWidgetJquery("gwcphb").next().length) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var setAntiCollision = function(off) {
            antiCollisionOff = off;
        };
        var acrto = null;
        var antiCollisionRefresh = function(repr) {
            if (antiCollisionOff) {
                refresh(repr);
                return;
            }
            if (acrto) {
                clearTimeout(acrto);
                acrto = setTimeout(function() {
                    refresh(repr);
                }, 20);
            } else {
                refresh(repr);
                acrto = setTimeout(function() {});
            }
        };
        var refresh = function(representation) {
            if (!antiCollisionOff && element !== document.activeElement) return;
            if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            handleHighlighterExceptions();
            removeChromeRenderedSpanFontStylings();
            if (!isVisible) return;
            var repr = gingerModule.get("widget.utils").cloneRepresentation(representation);
            if (element.innerHTML == "") {
                $gingerWidgetJquery(element).html($gingerWidgetJquery(element).text());
            }
            var correctionIds = getCorrectionIdsOfRepr(repr);
            var selectionSaved = false;
            var mistakeTags = element.querySelectorAll(mistakeWrapTag);
            for (var mi = 0; mi < mistakeTags.length; mi++) {
                var mistakeTag = mistakeTags[mi];
                var mistakeTagCorrectionId = mistakeTag.id.replace("gwmw-", "");
                if (!mistakeTag.id || correctionIds.indexOf(mistakeTagCorrectionId) === -1) {
                    if (!selectionSaved) {
                        selectionSaved = true;
                        saveSelection();
                    }
                    removeMistakeTag(mistakeTag);
                }
            }
            for (var sid = 0; sid < repr.length; sid++) {
                var sentence = repr[sid];
                if (sentence.correction && sentence.correction.Corrections.length) {
                    for (var cid = 0; cid < sentence.correction.Corrections.length; cid++) {
                        var correction = sentence.correction.Corrections[cid];
                        var isCorrectionIgnored = correction && correction.ignored;
                        var mistakeNode = element.querySelector("#gwmw-" + correction.id);
                        var specialHighlightExclusion = doesApplyForSpecialHighlightExclusion(element, representation, sentence, correction);
                        if (!mistakeNode && !isCorrectionIgnored && !specialHighlightExclusion) {
                            if (!selectionSaved) {
                                selectionSaved = true;
                                saveSelection();
                            }
                            var newMistakeNode = createMistakeTag(element, sentence, correction);
                            if (newMistakeNode) {
                                newMistakeNode.className = "ginger-module-highlighter-mistake-anim ginger-module-highlighter-mistake-type-" + correction.CorrectionType;
                                newMistakeNode.id = "gwmw-" + correction.id;
                                newMistakeNode.addEventListener("animationend", function(node) {
                                    return function(e) {
                                        $gingerWidgetJquery(node).removeClass("ginger-module-highlighter-mistake-anim");
                                    };
                                }(newMistakeNode), {
                                    once: true
                                }, true);
                            }
                        } else if (specialHighlightExclusion) {} else if (correction.ignored) {
                            if (!selectionSaved) {
                                selectionSaved = true;
                                saveSelection();
                            }
                            removeMistakeTag(mistakeNode);
                        } else if (sentence.activeSentence && !checkMistakeTagSanity(correction, sentence)) {
                            if (!selectionSaved) {
                                selectionSaved = true;
                                saveSelection();
                            }
                            removeMistakeTag(mistakeNode);
                            var newMistakeNode = createMistakeTag(element, sentence, correction);
                            if (newMistakeNode) {
                                newMistakeNode.className = "ginger-module-highlighter-mistake-type-" + correction.CorrectionType;
                                newMistakeNode.id = "gwmw-" + correction.id;
                            }
                        }
                    }
                }
            }
            element.normalize();
            if (selectionSaved) restoreSelection();
            setTimeout(removeGmailAutoCompleteSpan, 150);
        };
        var getMistakeElements = function() {
            return $gingerWidgetJquery(element).find(mistakeWrapTag);
        };
        var setVisibility = function(shouldBeVisible) {
            if (!shouldBeVisible) {
                destroy();
            }
            isVisible = shouldBeVisible;
        };
        var destroy = function() {
            getMistakeElements().each(function(i, mistakeTag, i) {
                removeMistakeTag(mistakeTag);
            });
        };
        var getCorrectionIdsOfRepr = function(repr) {
            var ids = [];
            for (var i = 0; i < repr.length; i++) {
                if (repr[i].correction && repr[i].correction.Corrections && repr[i].correction.Corrections.length) {
                    for (var h = 0; h < repr[i].correction.Corrections.length; h++) {
                        ids.push(repr[i].correction.Corrections[h].id);
                    }
                }
            }
            return ids.sort();
        };
        var init = function(initGingerInput) {
            gingerInput = initGingerInput;
            element = gingerInput.element;
        };
        return {
            refresh: antiCollisionRefresh,
            init: init,
            setVisibility: setVisibility,
            getMistakeElements: getMistakeElements,
            destroy: destroy,
            unit: {
                createMistakeTag: createMistakeTag,
                removeMistakeTag: removeMistakeTag,
                saveSelection: saveSelection,
                restoreSelection: restoreSelection,
                wrapSelection: wrapSelection,
                isThereBlockElemDifference: isThereBlockElemDifference,
                setAntiCollision: setAntiCollision
            }
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var module = gingerModule.load("widget.injector.draft", function() {
        var injection = function() {
            var eventRegister = {};
            var findReactProp = function(elem) {
                for (var key in elem) {
                    if (key.indexOf("__reactInternalInstance") === 0 || key.indexOf("__reactProps")) {
                        return elem[key].memoizedProps || elem[key]._currentElement.props;
                    }
                }
                return null;
            };
            var dressUp = function(e) {
                e.defaultPrevented = false;
                e.target = document.activeElement;
                e.preventDefault = function() {};
                return e;
            };
            document.addEventListener("gingerModule-hasReactProp", function(e) {
                var data = e.detail;
                var hasReactProp = !!findReactProp(data.element);
                data.cb(hasReactProp);
            });
            document.addEventListener("gingerModule-eventEmitter-react-fire", function(e) {
                var reactProps = findReactProp(document.activeElement);
                if (e.detail.event) {
                    var eventName = e.detail.event;
                    var eventParams = e.detail.params ? dressUp(e.detail.params) : {};
                    if (reactProps && eventName && reactProps[eventName]) {
                        reactProps[eventName](eventParams);
                    }
                } else if (e.detail.prop) {
                    if (reactProps) {
                        reactProps[e.detail.prop] = e.detail.value;
                    }
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onpaste", function(e) {
                var reactProps = findReactProp(document.activeElement);
                var pasteObj = dressUp({
                    clipboardData: {
                        getData: function() {
                            return e.detail || "";
                        },
                        items: [ "text/plain" ]
                    }
                });
                if (reactProps && reactProps.onPaste) {
                    reactProps.onPaste(pasteObj);
                } else if (reactProps && reactProps.onChange) {
                    var textarea = document.activeElement;
                    var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
                    nativeTextAreaValueSetter.call(textarea, e.detail);
                    var event = new Event("input", {
                        bubbles: true
                    });
                    textarea.dispatchEvent(event);
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onkeydown", function(e) {
                var reactProps = findReactProp(document.activeElement);
                var keyDownObj = dressUp(e.detail);
                if (reactProps) {
                    reactProps.onKeyDown(keyDownObj);
                }
            });
            var trigger = function(eventName, data) {
                if (!eventRegister[eventName]) return;
                for (var i = 0; i < eventRegister[eventName].length; i++) {
                    var listener = eventRegister[eventName][i];
                    listener(new CustomEvent(eventName), data);
                }
            };
            var nativeEventListener = document.addEventListener.bind(document);
            document.addEventListener = function(eventName, callback, options) {
                var eventRegisterItem = eventRegister[eventName] || [];
                eventRegisterItem.push(callback);
                eventRegister[eventName] = eventRegisterItem;
                nativeEventListener(eventName, callback, options);
            };
        };
        return injection;
    });
})();

(function() {
    var module = gingerModule.load("widget.injector", function() {
        var inject = function(doc, injection, args) {
            if (!args) args = [];
            var scriptTag = doc.createElement("script");
            var injectionString = injection.toString();
            scriptTag.src = gingerModule.get("gingerchromeext.browser").runtime.getURL(injection);
            doc.documentElement.appendChild(scriptTag);
        };
        var injections = {};
        var injectOnce = function(whichInjector) {
            if (!injections[whichInjector]) {
                injections[whichInjector] = true;
                if (document.body) {
                    inject(document, whichInjector, []);
                }
            }
        };
        return {
            injectOnce: injectOnce
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.injector.quill", function() {
        var injection = function() {
            var searchForProp = function(o, prop, d, path) {
                if (!d) d = 0;
                if (!path) path = [];
                if (d > 5) return null;
                for (var key in o) {
                    if (key === "CSSStyleSheet") break;
                    if (key === prop) {
                        return o[key];
                    }
                    if (typeof o[key] === "object") {
                        var newPath = path.slice(0);
                        newPath.push(key);
                        var oFound = searchForProp(o[key], prop, d + 1, newPath);
                        if (oFound) {
                            return oFound;
                        }
                    }
                }
                return null;
            };
            var injectGingerModuleToQuill = function(quillInstance) {
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
                }
                function _possibleConstructorReturn(self, call) {
                    if (!self) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return call && (typeof call === "object" || typeof call === "function") ? call : self;
                }
                var gingerInline = function() {
                    _inherits(gingerInline, quillInstance.imports["blots/inline"]);
                    function gingerInline() {
                        return _possibleConstructorReturn(this, (gingerInline.__proto__ || Object.getPrototypeOf(gingerInline)).apply(this, arguments));
                    }
                    return gingerInline;
                }();
                gingerInline.tagName = "GWMW";
                gingerInline.blotName = "ginger-inline";
                gingerInline.formats = function(e) {
                    return e.id;
                };
                quillInstance.register("formats/ginger-inline", gingerInline);
                var gingerInlinePH = function() {
                    _inherits(gingerInlinePH, quillInstance.imports["blots/inline"]);
                    function gingerInlinePH() {
                        return _possibleConstructorReturn(this, (gingerInline.__proto__ || Object.getPrototypeOf(gingerInlinePH)).apply(this, arguments));
                    }
                    return gingerInlinePH;
                }();
                gingerInlinePH.tagName = "GWCPHB";
                gingerInlinePH.blotName = "ginger-inline-ph";
                quillInstance.register("formats/ginger-inline-ph", gingerInlinePH);
            };
            var injectionSucceeded = false;
            var init = function() {
                if (injectionSucceeded) return;
                try {
                    var components = searchForProp(window.Aura, "ComponentService.indexComponent");
                    var quillLib = searchForProp(components, "lightning/quillLib");
                    var quill = searchForProp(quillLib, "Quill");
                    injectGingerModuleToQuill(quill);
                    injectionSucceeded = true;
                    window.removeEventListener("click", init);
                } catch (e) {
                    console.error("ginger injection failed", e);
                }
            };
            window.addEventListener("click", init);
            init();
        };
        return injection;
    });
})();

(function() {
    var module = gingerModule.load("widget.inputFinder", function() {
        var config = {
            selector: "textarea, *[contenteditable]"
        };
        var eventScope = $gingerWidgetJquery({});
        var inputFields = [];
        var refreshIntervalTime = 5e3;
        var refreshInterval = null;
        var isNotionVal = null;
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        var addNewField = function(field) {
            $field = $gingerWidgetJquery(field);
            var newfield = {};
            newfield.id = gingerModule.get("widget.utils").generateUID();
            $field.data("gingerWidgetFieldId", newfield.id);
            $field.gingerWidgetFieldId = newfield.id;
            var exist = inputFields.some(function(existingField) {
                return $gingerWidgetJquery(existingField).data("gingerWidgetFieldId") === $field.gingerWidgetFieldId;
            });
            if (!exist) {
                inputFields.push(field);
            }
            eventScope.trigger("new", $field.get(0));
        };
        var doesAreaApplyForAnOverride = function(area) {
            var activeInput = $gingerWidgetJquery(area);
            var loc = location.hostname;
            if (self != top && /localhost/.test(loc) && window.parent.location) loc = window.parent.location.hostname;
            if (window.location.hostname === "www.linkedin.com") {
                if (activeInput.attr("id") === "jobs-description") {
                    return true;
                } else if (activeInput.hasClass("mentions-texteditor__contenteditable")) {
                    return true;
                } else if (/rich-text-editor/.test(activeInput.parent().attr("id"))) {
                    return true;
                }
            }
            if (window.location.hostname === "mail.google.com") {
                activeInput[0].setAttribute("data-ginger-wrap", "gmail");
                return true;
            }
            if (window.location.hostname === "translate.google.com") {
                return true;
            }
            if (window.location.hostname === "www.facebook.com") {
                return true;
            }
            if (/outlook.live.com|outlook.office365.com|outlook.office.com/.test(loc)) {
                return true;
            }
            if (/1und1.de|gmx.net|gmx.com|web.de/.test(loc)) {
                return true;
            }
            if (window.location.hostname === "localhost") {
                if (activeInput.attr("id") === "unittest-input-field-that-matches-override-criteria") {
                    return true;
                }
            }
            if (activeInput.is(".cke_editable")) {
                return true;
            }
            return false;
        };
        var refresh = function(cb) {
            if (config.selector === null) return;
            if (gingerModule.get("widget").isEnabled()) {
                if (gingerModule.get("widget.utils").isNotion() && !isNotionVal) {
                    return;
                }
                var activeInput = $gingerWidgetJquery(isNotionVal ? isNotionVal : document.activeElement);
                var areaConfig = gingerModule.get("widget.siteSettings").get(window.location.href, isNotionVal ? isNotionVal : document.activeElement);
                if (isGoogleDocs()) {
                    activeInput = $gingerWidgetJquery(document.querySelector(".ginger-container-body"));
                }
                var isConntentAttr = activeInput && (activeInput.attr("contenteditable") === "" || activeInput.attr("contenteditable") === true || activeInput.attr("contenteditable") == "true");
                if (activeInput && !activeInput.data("gingerWidgetFieldId") && activeInput.attr("disableGinger") !== "true" && activeInput.attr("data-ginger") !== "false" && (activeInput.is(config.selector) || isConntentAttr) && !areaConfig.disabled) {
                    if (activeInput.attr("spellcheck") !== "false" || doesAreaApplyForAnOverride(isNotionVal ? isNotionVal : document.activeElement)) {
                        gingerModule.get("widget.preFlightProbe").run(isNotionVal ? isNotionVal : document.activeElement).then(function passed() {
                            addNewField(activeInput);
                            if (cb) cb();
                        }, function failed(reason) {
                            addNewField(activeInput);
                            if (cb) cb();
                        });
                    }
                }
            } else {
                console.log("widget is disabled");
            }
        };
        var inited = false;
        var init = function(initConfig) {
            if (inited) return;
            config = gingerModule.get("widget.utils").merge(config, initConfig);
            refresh();
            refreshInterval = setInterval(refresh, refreshIntervalTime);
            document.addEventListener("click", function(e) {
                if (gingerModule.get("widget.utils").isNotion()) {
                    isNotionVal = e.target;
                    refresh();
                } else {
                    setTimeout(refresh, 400);
                }
            });
            if (gingerModule.get("widget.utils").isNotion()) {
                document.addEventListener("keydown", () => {
                    var notionBlock = getSelectionStart();
                    if (notionBlock?.className === "notranslate") {
                        isNotionVal = notionBlock;
                        refresh();
                    }
                });
            }
            inited = true;
        };
        function getSelectionStart() {
            return document.getSelection()?.anchorNode?.parentNode;
        }
        var feed = function(elem) {
            addNewField(elem);
            return elem;
        };
        return {
            listen: eventScope,
            refresh: refresh,
            feed: feed,
            init: init
        };
    }, [ "widget.utils", "widget.siteSettings" ]);
})();

(function() {
    var module = gingerModule.load("widget.inputHandler", function() {
        var gingerInput;
        var representation = [];
        var latestCorrectionTimeStamp = null;
        var mouseActiveOnInput = null;
        var typeTimeout = null;
        var typeTimeoutInterval = 1e3;
        var mistakeHoverTimeout = null;
        var mistakeHoverTimeoutInterval = 50;
        var mistakeHoverElement = null;
        var isEnabled = true;
        var isForeign = false;
        var foreignLogger = {};
        var typeEvent = null;
        var correctionHistory = [];
        var valCache = {};
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        const redBgColor = "rgba(255, 102, 140, 0.2)";
        const yellowBgColor = "rgba(255, 203, 1, 0.2)";
        let isGDocsPageDisabled = false;
        var getVal = function() {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(gingerInput.element);
            var raw = isRTE ? gingerInput.element.innerHTML : gingerInput.element.value;
            if (valCache.raw && valCache.raw === raw) {
                return valCache.value;
            }
            valCache.raw = raw;
            valCache.value = gingerModule.get("widget.contentManager").getVal(gingerInput.element);
            return valCache.value;
        };
        var getFormattedVal = function() {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(gingerInput.element);
            if (isRTE) {
                if ($gingerWidgetJquery(gingerInput.element).text() === $gingerWidgetJquery(gingerInput.element).attr("data-placeholder-default")) {
                    return "";
                } else {
                    return $gingerWidgetJquery(gingerInput.element).html().replace(/<[\/]?gwmw[^>]*>/gi, "");
                }
            } else {
                return $gingerWidgetJquery(gingerInput.element).val();
            }
        };
        var setVal = function(content, from, to, fromRephrase) {
            gingerModule.get("widget.contentManager").setVal(gingerInput.element, content, from, to, fromRephrase).then(function() {
                updateRepresentation();
                recheck(true);
            });
        };
        var getSentenceById = function(id) {
            var index = getSentenceIndexById(id);
            return index !== null ? representation[index] : null;
        };
        var getSentenceIndexById = function(id) {
            for (var i = 0; i < representation.length; i++) {
                if (representation[i].id === id) {
                    return i;
                }
            }
            return null;
        };
        var getSentenceByCorrectionId = function(correctionId) {
            for (var i = 0; i < representation.length; i++) {
                if (representation[i].correction && representation[i].correction.Corrections) {
                    for (var h = 0; h < representation[i].correction.Corrections.length; h++) {
                        var correction = representation[i].correction.Corrections[h];
                        if (correction.id === correctionId) {
                            return representation[i];
                        }
                    }
                }
            }
            return null;
        };
        var getCorrectionById = function(correctionId) {
            for (var i = 0; i < representation.length; i++) {
                if (representation[i].correction && representation[i].correction.Corrections) {
                    for (var h = 0; h < representation[i].correction.Corrections.length; h++) {
                        var correction = representation[i].correction.Corrections[h];
                        if (correction.id === correctionId) {
                            return correction;
                        }
                    }
                }
            }
            return null;
        };
        var getCorrectionIdByMistakeTagId = function(tagId) {
            return tagId.replace("gwmw-", "");
        };
        var replaceInTextarea = function(replacement, from, to, cords) {
            return gingerModule.get("widget.contentManager").setVal(gingerInput.element, replacement, from, to, undefined, cords);
        };
        var removeCorrectionById = function(correctionId) {
            var sentence = getSentenceByCorrectionId(correctionId);
            var offset = 0;
            for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                if (sentence.correction.Corrections[i].id === correctionId) {
                    sentence.correction.Corrections.splice(i, 1);
                    i--;
                }
            }
            return sentence;
        };
        var approveMistake = function(correctionId, cords) {
            var reprCache = representation;
            var deferred = $gingerWidgetJquery.Deferred();
            var sentence = getSentenceByCorrectionId(correctionId);
            var correction = getCorrectionById(correctionId);
            var mistakeSentenceStartsAt = sentence.startsAt;
            var replaceWith = getCorrectedSentencePart(sentence, correction.From, correction.To + 1);
            var lengthDifferenceToCorrectWithinSentence = replaceWith.length - (correction.To + 1 - correction.From);
            removeCorrectionById(correction.id);
            replaceInTextarea(replaceWith, mistakeSentenceStartsAt + correction.From, mistakeSentenceStartsAt + correction.To + 1, cords).then(function() {
                updateRepresentation();
                deferred.resolve();
            });
            return deferred.promise();
        };
        var handleCorrectionBubbleResult = function(result, data) {
            try {
                var mistake = document.querySelector(`.gwmw-${data.correctionId}`);
                var cords = $gingerWidgetJquery(mistake).data("cords");
                correctionHistory.push({
                    result: result,
                    bubbleResultData: data,
                    representation: representation
                });
                var correction, sentence;
                if (result === "ignoreAll") {
                    sentence = getSentenceById(data.sentenceId);
                    correction = getCorrectionById(data.correctionId);
                    var remainingCorrections = sentence.correction.Corrections.length;
                    var mistakesToIgnore = [];
                    for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                        var correctionItem = sentence.correction.Corrections[i];
                        if (correctionItem.From >= correction.UXFrgFrom && correctionItem.To <= correction.UXFrgTo) {
                            mistakesToIgnore.push(correctionItem);
                        }
                    }
                    for (var i = 0; i < mistakesToIgnore.length; i++) {
                        gingerModule.get("widget.correctionService").ignoreMistake(mistakesToIgnore[i], sentence, function() {});
                    }
                    recheck(true);
                } else if (result === "approve") {
                    var singleCords = {
                        startX: cords?.singleStart,
                        endX: cords?.singleEnd,
                        startY: cords?.singleFirstTop,
                        endY: cords?.singleLastTop,
                        startHeight: cords?.singleFirstHeight,
                        endHeight: cords?.singleLastHeight
                    };
                    approveMistake(data.correctionId, singleCords).then(function() {
                        gingerInput.stats.update(representation);
                    });
                    gingerModule.get("widget.licenseLimits").approvalsUsed(1);
                } else if (result === "ignore") {
                    sentence = getSentenceByCorrectionId(data.correctionId);
                    correction = getCorrectionById(data.correctionId);
                    removeCorrectionById(data.correctionId);
                    gingerModule.get("widget.correctionService").ignoreMistake(correction, sentence);
                    recheck(true);
                } else if (result === "approveAll") {
                    sentence = getSentenceById(data.sentenceId);
                    correction = getCorrectionById(data.correctionId);
                    var fragmentCords = {
                        startX: cords?.fragmentStart,
                        endX: cords?.fragmentEnd,
                        startY: cords?.fragmentFirstTop,
                        endY: cords?.fragmentLastTop,
                        startHeight: cords?.fragmentFirstHeight,
                        endHeight: cords?.fragmentLastHeight
                    };
                    var sentenceText = getCorrectedSentencePart(sentence, correction.UXFrgFrom, correction.UXFrgTo + 1);
                    var approvalsUsed = 0;
                    for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                        if (sentence.correction.Corrections[i].From >= correction.UXFrgFrom && sentence.correction.Corrections[i].To <= correction.UXFrgTo) {
                            approvalsUsed++;
                            sentence.correction.Corrections.splice(i, 1);
                            i--;
                        }
                    }
                    var correctionMock = {
                        From: correction.UXFrgFrom,
                        To: correction.UXFrgTo,
                        UXFrgFrom: correction.UXFrgFrom,
                        UXFrgTo: correction.UXFrgTo,
                        Suggestions: [ {
                            Text: sentenceText
                        } ],
                        id: gingerModule.get("widget.utils").generateUID()
                    };
                    sentence.correction.Corrections.push(correctionMock);
                    approveMistake(correctionMock.id, fragmentCords).then(function() {});
                    gingerModule.get("widget.licenseLimits").approvalsUsed(approvalsUsed);
                }
            } catch (e) {
                if (console && console.error) console.error(e);
                throw new Error(e);
            }
        };
        var lastHit = null;
        var checkMistakeHovers = function(e) {
            if (lastHit) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, lastHit)) {
                    return lastHit;
                }
            }
            var mistakeElements = gingerInput.highlighter.getMistakeElements();
            var hitFound = null;
            for (var i = 0; i < mistakeElements.length && hitFound === null; i++) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, mistakeElements[i])) {
                    hitFound = mistakeElements[i];
                    return hitFound;
                }
            }
            return null;
        };
        var handleMouseMoveOnElement = function(e) {
            if (mistakeHoverTimeout) mistakeHoverTimeout = clearTimeout(mistakeHoverTimeout);
            var target = e.currentTarget.id === "writer" || e.currentTarget.id === "mini-writer" ? e.currentTarget.id : "widget";
            mistakeHoverTimeout = setTimeout(function() {
                var mistakeTarget = checkMistakeHovers(e);
                if (mistakeTarget) {
                    var id;
                    lastHit = mistakeTarget;
                    if ($gingerWidgetJquery(mistakeTarget).attr("id")) {
                        id = getCorrectionIdByMistakeTagId($gingerWidgetJquery(mistakeTarget).attr("id"));
                    } else {
                        id = $gingerWidgetJquery(mistakeTarget).data("cid");
                    }
                    var correction = getCorrectionById(id);
                    if (!correction) return;
                    var sentence = getSentenceByCorrectionId(correction.id);
                    if (sentence.correction.checkType === "shallow") {
                        recheck(true, function() {
                            handleMouseMoveOnElement(e);
                        });
                    } else {
                        clearMistakeStylesOnHover();
                        if (!$gingerWidgetJquery(mistakeTarget).hasClass("no-suggestion")) {
                            $gingerWidgetJquery(mistakeTarget).css("background-color", redBgColor);
                        } else {
                            $gingerWidgetJquery(mistakeTarget).css("background-color", yellowBgColor);
                        }
                        gingerModule.get("widget.correctionBubble").show(correction, sentence, handleCorrectionBubbleResult, target);
                    }
                } else {
                    clearMistakeStylesOnHover();
                    if (lastHit) {
                        gingerModule.get("widget.correctionBubble").gracefulHide();
                    }
                    lastHit = null;
                }
            }, mistakeHoverTimeoutInterval);
        };
        function clearMistakeStylesOnHover() {
            const allMistakes = document.querySelectorAll("gwmw");
            allMistakes?.forEach(mistakeEl => {
                $gingerWidgetJquery(mistakeEl).css("background-color", "transparent");
            });
        }
        var bindToMistakeHovers = function() {
            $gingerWidgetJquery(gingerInput.element).on("mousemove", handleMouseMoveOnElement);
        };
        var unBindFromMistakeHovers = function() {
            $gingerWidgetJquery(gingerInput.element).off("mousemove", handleMouseMoveOnElement);
        };
        var setMouseActiveOnInput = function(isActive) {
            mouseActiveOnInput = isActive;
            if (isActive) {
                bindToMistakeHovers();
            } else {
                unBindFromMistakeHovers();
            }
        };
        var clearGracefulRecheck = function() {
            if (typeTimeout !== null) {
                typeTimeout = clearTimeout(typeTimeout);
            }
        };
        var gracefulRecheck = function(timeout) {
            clearGracefulRecheck();
            typeTimeout = setTimeout(function() {
                recheck(true);
            }, timeout || typeTimeoutInterval);
        };
        var isTeams = function() {
            var loc = location.hostname;
            return /teams.microsoft.com/.test(loc);
        };
        var getCorrectedSentencePart = function(sentence, from, to) {
            var sentenceText = sentence.text;
            var diff = 0;
            for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                if (sentence.correction.Corrections[i].From >= from && sentence.correction.Corrections[i].To <= to - 1) {
                    var mistakeFrom = sentence.correction.Corrections[i].From;
                    var mistakeTo = sentence.correction.Corrections[i].To + 1;
                    var replaceWith = sentence.correction.Corrections[i].Suggestions.length ? sentence.correction.Corrections[i].Suggestions[0].Text : sentence.text.substring(mistakeFrom, mistakeTo);
                    if (replaceWith.length === 0 && (isGoogleDocs || isTeams)) {
                        mistakeFrom -= 1;
                    }
                    sentenceText = sentenceText.substring(0, mistakeFrom + diff) + replaceWith + sentenceText.substring(mistakeTo + diff);
                    diff += replaceWith.length - (mistakeTo - mistakeFrom);
                }
            }
            return sentenceText.substring(from, to + diff);
        };
        var listenerRegistry = {};
        var subscribeToEvent = function(eventName, handler) {
            if (!listenerRegistry[eventName]) {
                listenerRegistry[eventName] = [];
            }
            var eventSpace = listenerRegistry[eventName];
            eventSpace.push(handler);
            gingerInput.events.listen.on(eventName, handler);
        };
        var unsubscribeFromEvent = function(eventName) {
            if (!listenerRegistry[eventName]) return;
            for (var i = 0; i < listenerRegistry[eventName].length; i++) {
                gingerInput.events.listen.off(eventName, listenerRegistry[eventName][i]);
            }
        };
        var destroy = function() {
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(gingerInput.element).attr("spellcheck", "true");
            $gingerWidgetJquery(gingerInput.element).data("gingerWidgetFieldId", null);
            gingerInput.highlighter.destroy();
            setMouseActiveOnInput(false);
            for (var event in listenerRegistry) {
                unsubscribeFromEvent(event);
            }
        };
        var subscribeToEvents = function() {
            subscribeToEvent("focus", function() {
                gracefulRecheck();
            });
            subscribeToEvent("blur", function() {
                setTimeout(function() {
                    gingerModule.get("widget.correctionBubble").hide();
                }, 1e3);
            });
            subscribeToEvent("delete", function() {
                typeEvent = "delete";
                setTimeout(function() {
                    gingerInput.events.listen.trigger("inputchange");
                }, 50);
            });
            subscribeToEvent("mouseover", function() {
                setMouseActiveOnInput(true);
            });
            subscribeToEvent("mouseout", function() {
                setMouseActiveOnInput(false);
            });
            subscribeToEvent("paste", function() {
                setTimeout(function() {
                    updateRepresentation();
                    recheck(true);
                }, 50);
            });
            subscribeToEvent("inputchange", function(e) {
                updateRepresentation();
                var isRTE = gingerModule.get("widget.utils").isRichTextElement(gingerInput.element);
                var val = isRTE ? $gingerWidgetJquery(gingerInput.element).text() : $gingerWidgetJquery(gingerInput.element).val();
                if (/^\s*$/.test(val)) {
                    representation = [];
                    gingerInput.stats.update([]);
                    gingerInput.highlighter.refresh([]);
                    if (isForeign) markForeign(false);
                } else {
                    if (typeEvent === "sentence.end") {
                        recheck(true);
                    } else if (typeEvent === "word.end") {
                        gracefulRecheck();
                    } else if (typeEvent === "delete") {
                        gingerInput.highlighter.refresh(representation);
                        gingerInput.stats.update(representation);
                        gracefulRecheck();
                    } else {
                        setTimeout(function() {
                            gingerInput.highlighter.refresh(representation);
                            gingerInput.stats.update(representation);
                            gracefulRecheck();
                        }, 10);
                    }
                }
                typeEvent = null;
                gingerInput.stats.update(representation);
            });
            subscribeToEvent("sentence.end", function() {
                typeEvent = "sentence.end";
            });
            subscribeToEvent("click", function() {
                if (window.location.hostname === "mail.google.com") {
                    removeGmailCorrection();
                }
                typeEvent = "sentence.end";
                setTimeout(function() {
                    gingerInput.events.listen.trigger("inputchange");
                }, 50);
            });
            subscribeToEvent("enter", function() {
                typeEvent = "sentence.end";
                setTimeout(function() {
                    gingerInput.events.listen.trigger("inputchange");
                }, 50);
            });
            subscribeToEvent("word.end", function() {
                typeEvent = "word.end";
            });
            subscribeToEvent("visibility.change", function(e, isVisible) {
                if (isEnabled) {
                    gingerInput.highlighter.setVisibility(isVisible);
                }
            });
        };
        var updateRepresentation = function() {
            var newRepr = gingerModule.get("widget.phraseService").getRepresentation(gingerInput.element);
            var oldRepr = gingerModule.get("widget.utils").cloneRepresentation(representation);
            var mergedRepr = gingerModule.get("widget.correctionService").mergeCorrections(newRepr, oldRepr);
            representation = mergedRepr;
            gingerInput.highlighter.refresh(representation);
            gingerInput.stats.update(representation);
            return representation;
        };
        var recheck = function(forceRecheck, next) {
            if (isGoogleDocs() && isGDocsPageDisabled) {
                return;
            }
            if (!isEnabled) {
                return next && next([]);
            }
            if (!representation.length) {
                gingerInput.highlighter.refresh(representation);
                gingerInput.stats.update(representation);
                if (next) next([]);
                return;
            }
            clearGracefulRecheck();
            if (forceRecheck) {
                for (var i = 0; i < representation.length; i++) {
                    representation[i].activeSentence = null;
                }
            }
            var repr = gingerModule.get("widget.utils").cloneRepresentation(representation);
            var timeStamp = new Date().getTime();
            latestCorrectionTimeStamp = timeStamp;
            var updateTimeout = null;
            gingerModule.get("widget.correctionService").correct(repr, function stepCallBack(correctedRepresentation) {
                if (latestCorrectionTimeStamp !== timeStamp) {
                    return;
                }
                representation = correctedRepresentation;
                if (!updateTimeout) {
                    updateRepresentation();
                } else {
                    updateTimeout = clearTimeout(updateTimeout);
                }
                updateTimeout = setTimeout(function() {
                    updateTimeout = clearTimeout(updateTimeout);
                    updateRepresentation();
                }, 10);
            }, function doneCallBack() {
                gingerModule.get("widget.config").set("charCount", representation[representation.length - 1].endsAt);
                if (latestCorrectionTimeStamp !== timeStamp) {
                    return;
                }
                foreignLogger = {};
                for (var ri = 0; ri < representation.length; ri++) {
                    var s = representation[ri];
                    if (s.correction && s.correction.Sentences && s.correction.Sentences.length && !s.correction.Sentences[0].IsEnglish && s.words.length >= 8) {
                        markForeign(true);
                    } else if (!getIsForeignLocked() && s.correction && s.correction.Corrections && s.correction.Corrections.length && s.words.length >= 8) {
                        gingerModule.get("widget.api").detectLang(s.text, function(result) {
                            var detectedLangsArray = result.detectedLanguages;
                            if (detectedLangsArray[0] && detectedLangsArray[0].language !== "en") markForeign(true);
                        });
                    }
                }
                gingerModule.get("widget.correctionBubble").hide();
                if (next) next(representation);
            });
        };
        var focus = function() {
            gingerInput.element.focus();
        };
        var flush = function() {
            setVal("");
            representation = [];
            gingerInput.stats.update([]);
            gingerInput.highlighter.refresh([]);
        };
        var disable = function() {
            if (!isEnabled) return;
            isEnabled = false;
            gingerModule.get("widget.correctionBubble").hide();
            if (!isGoogleDocs()) {
                $gingerWidgetJquery(gingerInput.element).attr("spellcheck", "true");
            }
            gingerInput.highlighter.setVisibility(false);
            gingerInput.events.listen.trigger("enable.change", {
                enabled: false
            });
            gingerInput.events.listen.trigger("disabled");
        };
        var enable = function() {
            if (isEnabled) return;
            isEnabled = true;
            $gingerWidgetJquery(gingerInput.element).attr("spellcheck", "false");
            gingerInput.highlighter.setVisibility(true);
            gingerInput.events.listen.trigger("enable.change", {
                enabled: true
            });
            gingerInput.events.listen.trigger("enabled");
            recheck(true);
        };
        var foreignLock = false;
        var markForeign = function(foreign, lock) {
            if (lock) foreignLock = true;
            if (isForeign === foreign) return;
            if (foreignLock && !lock) return;
            isForeign = foreign;
            if (foreign && isEnabled) {
                disable();
            } else if (!isEnabled) {
                enable();
            }
            gingerInput.events.listen.trigger("markedForeign.change", foreign);
        };
        var getIsForeign = function() {
            return isForeign;
        };
        var getIsForeignLocked = function() {
            return foreignLock;
        };
        var removeGmailCorrection = function() {
            var gmailCorrectionWrapper = document.querySelectorAll("[data-overlay-action=spellreplace]");
            gmailCorrectionWrapper = Array.from(gmailCorrectionWrapper);
            if (gmailCorrectionWrapper && Array.isArray(gmailCorrectionWrapper) && gmailCorrectionWrapper.length > 0) {
                gmailCorrectionWrapper.forEach(function(e) {
                    var gmailCorrectionElement = e.closest(".pl");
                    if (gmailCorrectionElement) {
                        gmailCorrectionElement.remove();
                    }
                });
            }
        };
        var getWordsCount = function() {
            return representation.reduce(function(acc, item) {
                return acc + item.words.length;
            }, 0);
        };
        var init = function(element) {
            if (!element) return;
            element.setAttribute("spellcheck", "false");
            try {
                gingerInput = {
                    element: $gingerWidgetJquery(element).get(0),
                    id: $gingerWidgetJquery(element).data("gingerWidgetFieldId"),
                    events: null,
                    highlighter: null,
                    rewriter: null,
                    stats: null,
                    empty: flush,
                    focus: focus,
                    setVal: setVal,
                    getVal: getVal,
                    enable: enable,
                    disable: disable,
                    getFormattedVal: getFormattedVal,
                    markForeign: markForeign,
                    getIsForeign: getIsForeign,
                    setRepresentation: function(repr) {
                        representation = repr;
                    },
                    getRepresentation: function() {
                        return representation;
                    },
                    getWordsCount: getWordsCount,
                    isEnabled: function() {
                        return isEnabled;
                    },
                    destroy: destroy,
                    unit: {
                        replaceInTextarea: replaceInTextarea,
                        recheck: recheck,
                        updateRepresentation: updateRepresentation,
                        handleCorrectionBubbleResult: handleCorrectionBubbleResult,
                        flush: flush
                    }
                };
                gingerInput.settings = gingerModule.get("widget.siteSettings").get(window.location.href, element);
                if (!gingerInput.settings) return;
                gingerInput.highlighter = new gingerModule.get(gingerInput.settings.highlighter, true)();
                gingerInput.stats = new gingerModule.get("widget.inputHandler.stats", true)();
                gingerInput.events = new gingerModule.get("widget.inputHandler.events", true)();
                gingerInput.events.init(gingerInput);
                gingerInput.highlighter.init(gingerInput);
                gingerInput.stats.init(element);
                gingerModule.get("widget.config").listen.on("change/dialect", function(e, value) {
                    gingerModule.get("widget.cache").flush();
                    representation = [];
                    updateRepresentation();
                    recheck(true);
                });
                gingerModule.get("widget.session").listen.on("change", function(event, data) {
                    updateRepresentation();
                    recheck(true);
                });
                if (gingerInput.settings.injection) {
                    gingerModule.get("widget.injector").injectOnce(gingerInput.settings.injection);
                }
                gingerModule.get("widget.onlinestatus").listen.on("online", function() {
                    recheck(true);
                    console.log("widget is back online");
                });
                gingerModule.get("widget.onlinestatus").listen.on("offline", function() {
                    console.warn("Ginger Widget is offline");
                });
                subscribeToEvents();
                gingerModule.get("widget.storage").get("gDocsBlackList").then(function(result) {
                    var gDocsblackList = result || [];
                    if (gDocsblackList.indexOf(window.location.href) !== -1) {
                        isGDocsPageDisabled = true;
                    }
                    representation = gingerModule.get("widget.phraseService").getRepresentation(gingerInput.element);
                    gingerInput.stats.update(representation);
                    if (representation.length) {
                        recheck(true);
                    }
                });
            } catch (e) {
                console.error(e);
            }
            return gingerInput;
        };
        return {
            init: init
        };
    }, [ "widget.utils", "widget.api", "widget.phraseService", "widget.correctionService", "widget.correctionBubble", "widget.inputHandler.events", "widget.inputHandler.stats", "widget.onlinestatus" ]);
})();

(function() {
    var module = gingerModule.load("widget.inputHandler.events", function() {
        var eventScope = $gingerWidgetJquery({});
        var bindElement;
        var isSentenceEndingCharacter = function(charCode) {
            var char = String.fromCharCode(charCode);
            var sentenceEndingCharacters = "?!.,;:-";
            return charCode === 13 || sentenceEndingCharacters.indexOf(char) !== -1;
        };
        var isWordEndingCharacter = function(charCode) {
            var char = String.fromCharCode(charCode);
            var wordEndingCharacters = /\s/;
            var isWordEnding = char.match(wordEndingCharacters) !== null;
            var input = $gingerWidgetJquery(bindElement);
            var caretPosition = gingerModule.get("widget.caret").get(input);
            var charBeforeCaret = input.val().substr(caretPosition - 1, 1);
            return isSentenceEndingCharacter(charBeforeCaret.charCodeAt(0)) || charBeforeCaret.match(wordEndingCharacters) ? false : isWordEnding;
        };
        var layoutCache = {};
        var defaultMutationTimeoutTick = 800;
        var mutationTimeout = null;
        var checkMutation = function() {
            var mutationTimeoutTick = defaultMutationTimeoutTick;
            if (mutationTimeout) mutationTimeout = clearTimeout(mutationTimeout);
            var layout = gingerModule.get("widget.mutationDetectorService").getLayout(bindElement);
            if (layout.isVisible !== layoutCache.isVisible) {
                mutationTimeoutTick = defaultMutationTimeoutTick;
                eventScope.trigger("visibility.change", layout.isVisible);
                if (layout.isVisible) {
                    eventScope.trigger("mutation", {
                        input: bindElement
                    });
                }
            } else {
                var hasLayoutChanged = gingerModule.get("widget.mutationDetectorService").compareLayouts(layout, layoutCache);
                if (hasLayoutChanged) {
                    eventScope.trigger("mutation", {
                        input: bindElement
                    });
                    mutationTimeoutTick = 80;
                }
            }
            layoutCache = layout;
            mutationTimeout = setTimeout(checkMutation, mutationTimeoutTick);
        };
        var bind = function(gingerInput) {
            bindElement = gingerInput.element;
            var $input = $gingerWidgetJquery(bindElement);
            $input.on("keypress", function(e) {
                if (isSentenceEndingCharacter(e.which)) {
                    eventScope.trigger("sentence.end", {
                        input: $input
                    });
                } else if (isWordEndingCharacter(e.which)) {
                    eventScope.trigger("word.end", {
                        input: $input
                    });
                }
            });
            $input.bind("paste", function() {
                eventScope.trigger("paste", {
                    input: $input
                });
            });
            $input.on("keyup", function(e) {
                if (e.which === 13) {
                    eventScope.trigger("enter", {
                        input: $input
                    });
                }
            });
            $input.on("keydown", function(e) {
                if ([ 8, 46 ].indexOf(e.which) !== -1) {
                    eventScope.trigger("delete", {
                        input: $input
                    });
                } else if ([ 37, 38, 39, 40 ].indexOf(e.which) !== -1) {
                    eventScope.trigger("inputchange", {
                        input: $input
                    });
                } else if (e.which === 89 && e.ctrlKey) {
                    eventScope.trigger("paste");
                } else if (e.which === 90 && e.ctrlKey) {
                    eventScope.trigger("paste");
                } else if (gingerModule.get("widget.utils").isCKEditor(bindElement)) {
                    eventScope.trigger("inputchange", {
                        input: $input
                    });
                }
            });
            $input.focus(function() {
                eventScope.trigger("focus", {
                    input: $input
                });
            });
            $input.blur(function() {
                eventScope.trigger("blur", {
                    input: $input
                });
            });
            $input.scroll(function() {
                eventScope.trigger("scroll", {
                    input: $input
                });
            });
            $input.mouseover(function() {
                eventScope.trigger("mouseover", {
                    input: $input
                });
            });
            $input.mouseout(function() {
                eventScope.trigger("mouseout", {
                    input: $input
                });
            });
            $input.keydown(function(e) {
                eventScope.trigger("keydown", {
                    input: $input,
                    event: e
                });
            });
            checkMutation();
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(bindElement);
            document.addEventListener("click", function() {
                const mutationIntervals = [ 0, 50, 100, 200, 500 ];
                mutationIntervals.forEach(function(interval) {
                    setTimeout(checkMutation, interval);
                });
                eventScope.trigger("click");
            });
            bindElement.addEventListener("input", function() {
                eventScope.trigger("inputchange", {
                    input: bindElement
                });
            });
            $input.on("paste", function(e) {
                if (e.which === 8 || e.which === 46) {
                    return true;
                }
                eventScope.trigger("paste");
            });
        };
        return {
            listen: eventScope,
            checkMutation: checkMutation,
            init: bind
        };
    }, [ "widget.utils", "widget.caret", "widget.mutationDetectorService" ]);
})();

(function() {
    var module = gingerModule.load("widget.inputHandler.stats", function() {
        var eventScope = $gingerWidgetJquery({});
        var element;
        var id = Math.random();
        var stats;
        var getMistakesCount = function(representation) {
            var newStats = {
                grammar: 0,
                spelling: 0
            };
            if (representation && representation.length) {
                for (var i = 0; i < representation.length; i++) {
                    if (representation[i].correction) {
                        for (var h = 0; h < representation[i].correction.Corrections.length; h++) {
                            var correction = representation[i].correction.Corrections[h];
                            if (!correction.ignored) {
                                if (correction.CorrectionType === 3 || correction.CorrectionType === 2) {
                                    newStats.grammar++;
                                } else {
                                    newStats.spelling++;
                                }
                            }
                        }
                    }
                }
            }
            return newStats;
        };
        var getWordAndCharacterCounts = function(representation) {
            var newCount = {
                words: 0,
                characters: 0,
                charactersWithSpace: 0,
                sentences: 0
            };
            var text = gingerModule.get("widget.contentManager").getVal(element);
            if (text && !text.match(/^\s+$/)) {
                var words = text.replace(/\d+/g, "").replace(/(^\s*|\s*$)/g, "").match(/([^\x00-\x7F]|\w)+/g);
                if (!words) words = [];
                if (words.length === 1 && words[0] == "") words = [];
                var characters = text.replace(/\s+/g, "");
                newCount.words = words.length;
                newCount.characters = characters.length;
                newCount.charactersWithSpace = text.length;
            }
            if (representation && representation.length) {
                newCount.sentences = representation.length;
                if (representation[representation.length - 1].text.match(/^\s*$/)) {
                    newCount.sentences--;
                }
            }
            return newCount;
        };
        var update = function(representation) {
            if (!representation) return;
            try {
                var newStats = {};
                newStats.mistakes = getMistakesCount(representation);
                if (location.hostname === gingerModule.get("gingerchromeext.browser").runtime.id) {
                    newStats.count = getWordAndCharacterCounts(representation);
                }
                stats = newStats;
                eventScope.trigger("changed", stats);
            } catch (e) {
                console.error(e);
            }
        };
        var get = function() {
            return stats;
        };
        var init = function(elem) {
            element = elem;
            update();
        };
        return {
            listen: eventScope,
            update: update,
            init: init,
            get: get
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.licenseLimits", function() {
        var approvalsLeft = null;
        var eventScope = $gingerWidgetJquery({});
        var setApprovalsLeft = function(newApprovalsLeft) {
            var approvalsLeftCache = approvalsLeft;
            approvalsLeft = newApprovalsLeft;
            handleLimitation(approvalsLeftCache);
        };
        var retrieveApprovalsLeft = function(dontHandleLimitation) {
            var deferred = $gingerWidgetJquery.Deferred();
            var session = gingerModule.get("widget.session").get();
            if (!gingerModule.get("widget.session").isLoggedIn()) {
                deferred.reject();
            } else {
                if (session.license === 2) {
                    if (dontHandleLimitation) {
                        approvalsLeft = -1;
                    } else {
                        setApprovalsLeft(-1);
                    }
                    deferred.resolve(approvalsLeft);
                } else {
                    gingerModule.get("widget.storage").get("loggedInApprovalsLeft").then(function(result) {
                        var loggedInApprovalsLeft = JSON.parse(result ?? "{}");
                        if (!loggedInApprovalsLeft[session.userId] && loggedInApprovalsLeft[session.userId] !== 0) {
                            loggedInApprovalsLeft[session.userId] = 10;
                            gingerModule.get("widget.storage").set("loggedInApprovalsLeft", JSON.stringify(loggedInApprovalsLeft));
                        }
                        if (dontHandleLimitation) {
                            approvalsLeft = loggedInApprovalsLeft[session.userId];
                        } else {
                            setApprovalsLeft(loggedInApprovalsLeft[session.userId]);
                        }
                        deferred.resolve(approvalsLeft);
                    });
                }
            }
            return deferred.promise();
        };
        var handleLimitation = function(prevApprovalCount) {
            if (prevApprovalCount === null) return;
            if (approvalsLeft === -1) return;
            if (prevApprovalCount >= 5 && approvalsLeft < 5 && approvalsLeft >= 1) {
                eventScope.trigger("triggered.approaching");
            } else if (approvalsLeft < 1) {
                if (prevApprovalCount > 0) {
                    eventScope.trigger("triggered.exceeded");
                } else {
                    eventScope.trigger("triggered.onbubble");
                }
            }
        };
        var hasLoggedOutApprovalsLeft = function() {
            var deferred = $gingerWidgetJquery.Deferred();
            gingerModule.get("widget.storage").get("loggedOutApprovalsLeft").then(function(loggedOutApprovalsLeft) {
                deferred.resolve(loggedOutApprovalsLeft > 0);
            });
            return deferred.promise();
        };
        var approvalsUsed = function(count) {
            if (!count) {
                setApprovalsLeft(approvalsLeft);
                return;
            }
            var session = gingerModule.get("widget.session").get();
            if (gingerModule.get("widget.session").isLoggedIn()) {
                if (session.license === 2) {
                    setApprovalsLeft(-1);
                    return;
                }
                gingerModule.get("widget.storage").get("loggedInApprovalsLeft").then(function(result) {
                    var loggedInApprovalsLeft = JSON.parse(result ?? "{}");
                    loggedInApprovalsLeft[session.userId] = loggedInApprovalsLeft[session.userId] - count;
                    if (loggedInApprovalsLeft[session.userId] <= 0) {
                        loggedInApprovalsLeft[session.userId] = 0;
                    }
                    gingerModule.get("widget.storage").set("loggedInApprovalsLeft", JSON.stringify(loggedInApprovalsLeft));
                    setApprovalsLeft(loggedInApprovalsLeft[session.userId]);
                });
            } else {
                gingerModule.get("widget.storage").get("loggedOutApprovalsLeft").then(function(loggedOutApprovalsLeft) {
                    if (loggedOutApprovalsLeft > 0) {
                        gingerModule.get("widget.storage").set("loggedOutApprovalsLeft", loggedOutApprovalsLeft - count);
                    }
                });
            }
        };
        var isCapacityLimited = function() {
            return approvalsLeft === 0;
        };
        var setLoggedInLastCheck = function(session, currentDate, weekInMSec) {
            gingerModule.get("widget.storage").get("loggedInApprovalsLeftLastCheck").then(function(result) {
                var loggedInApprovalsLeftLastCheck = JSON.parse(result ?? "{}");
                if (!loggedInApprovalsLeftLastCheck[session.userId]) {
                    if (!session.isAnonym && session.license !== 2) {
                        loggedInApprovalsLeftLastCheck[session.userId] = currentDate;
                        gingerModule.get("widget.storage").set("loggedInApprovalsLeftLastCheck", JSON.stringify(loggedInApprovalsLeftLastCheck));
                    }
                }
                if (currentDate - weekInMSec > loggedInApprovalsLeftLastCheck[session.userId]) {
                    loggedInApprovalsLeftLastCheck[session.userId] = currentDate;
                    gingerModule.get("widget.storage").set("loggedInApprovalsLeftLastCheck", JSON.stringify(loggedInApprovalsLeftLastCheck));
                    gingerModule.get("widget.storage").get("loggedInApprovalsLeft").then(function(result) {
                        var loggedInApprovalsLeft = JSON.parse(result ?? "{}");
                        loggedInApprovalsLeft[session.userId] = 10;
                        gingerModule.get("widget.storage").set("loggedInApprovalsLeft", JSON.stringify(loggedInApprovalsLeft));
                    });
                }
            });
        };
        var init = function() {
            gingerModule.get("widget.storage").get("loggedOutApprovalsLeft").then(function(result) {
                if (!result && result !== 0) {
                    gingerModule.get("widget.storage").set("loggedOutApprovalsLeft", 10);
                }
            });
            var weekInMSec = 1e3 * 60 * 60 * 24 * 7;
            var session = gingerModule.get("widget.session").get();
            var currentDate = Date.now();
            var loggedOutApprovalsLeftLastCheck;
            gingerModule.get("widget.storage").get("loggedOutApprovalsLeftLastCheck").then(function(result) {
                loggedOutApprovalsLeftLastCheck = result;
                if (!loggedOutApprovalsLeftLastCheck) {
                    gingerModule.get("widget.storage").set("loggedOutApprovalsLeftLastCheck", currentDate);
                }
            });
            gingerModule.get("widget.session").listen.on("change", function(e, session) {
                if (!gingerModule.get("widget.session").isLoggedIn()) {
                    if (currentDate - weekInMSec > loggedOutApprovalsLeftLastCheck) {
                        gingerModule.get("widget.storage").set("loggedOutApprovalsLeftLastCheck", currentDate);
                        gingerModule.get("widget.storage").set("loggedOutApprovalsLeft", 10);
                    }
                    approvalsLeft = 10;
                } else {
                    setLoggedInLastCheck(session, currentDate, weekInMSec);
                    approvalsLeft = null;
                    retrieveApprovalsLeft(true);
                }
            });
            if (gingerModule.get("widget.session").isLoggedIn()) {
                setLoggedInLastCheck(session, currentDate, weekInMSec);
                retrieveApprovalsLeft(true);
            } else {
                if (currentDate - weekInMSec > loggedOutApprovalsLeftLastCheck) {
                    gingerModule.get("widget.storage").set("loggedOutApprovalsLeftLastCheck", currentDate);
                    gingerModule.get("widget.storage").set("loggedOutApprovalsLeft", 10);
                }
                approvalsLeft = 10;
            }
        };
        init();
        return {
            approvalsUsed: approvalsUsed,
            isCapacityLimited: isCapacityLimited,
            hasLoggedOutApprovalsLeft: hasLoggedOutApprovalsLeft,
            retrieveApprovalsLeft: retrieveApprovalsLeft,
            listen: eventScope
        };
    }, [ "widget.session", "widget.config", "widget.storage" ]);
})();

var module = gingerModule.load("widget.measure", function() {
    var getPaddingBox = function(element, positionCache) {
        var borderBox = getBorderBoxWithScroll(element, positionCache);
        var width = borderBox.width;
        var height = borderBox.height;
        var top = borderBox.top;
        var left = borderBox.left;
        var elementStyles = getComputedStyle(element);
        var borderTop = parseFloat(elementStyles["border-top-width"]) || 0;
        var borderRight = parseFloat(elementStyles["border-right-width"]) || 0;
        var borderBottom = parseFloat(elementStyles["border-bottom-width"]) || 0;
        var borderLeft = parseFloat(elementStyles["border-left-width"]) || 0;
        var a = 0;
        var scaledWidth = 0;
        if ("BackCompat" !== document.compatMode || element !== document.body || element !== document.scrollingElement) {
            var scaledHeight = element.clientWidth / getScaleRatio(element);
            scaledWidth = height - element.clientHeight / getScaleRatio(element) - borderTop - borderBottom, 
            (a = width - scaledHeight - borderLeft - borderRight) < 1 && (a = 0), 
            scaledWidth < 1 && (scaledWidth = 0);
        }
        width -= borderLeft + a + borderRight, height -= borderTop + scaledWidth + borderBottom, 
        top += borderTop, left += borderLeft;
        return {
            width: width,
            height: height,
            top: top,
            right: left + width,
            bottom: top + height,
            left: left,
            border: {
                top: borderTop,
                right: borderRight,
                bottom: borderBottom,
                left: borderLeft
            }
        };
    };
    var getElementScroll = function(e) {
        var isBody = e === document.body && "BackCompat" === document.compatMode;
        var stop = isBody ? 0 : e.scrollTop;
        var sleft = isBody ? 0 : e.scrollLeft;
        return {
            top: stop,
            left: sleft
        };
    };
    var getScaleRatio = function(elem) {
        var ratio = 1;
        var width = elem.getBoundingClientRect().width;
        if (width > 0) {
            var oWidth = elem.offsetWidth;
            Math.abs(width - oWidth) > 1 ? ratio = oWidth / width : ratio = 1;
        } else ratio = 1;
        return ratio;
    };
    var getBorderBox = function(element) {
        var boundingClientRect = element.getBoundingClientRect();
        return {
            width: boundingClientRect.width,
            height: boundingClientRect.height,
            top: boundingClientRect.top,
            right: boundingClientRect.right,
            bottom: boundingClientRect.bottom,
            left: boundingClientRect.left
        };
    };
    var getBorderBoxWithScroll = function(e, positionCache) {
        var borderBox = getBorderBox(e);
        var documentScroll = getDocumentScroll();
        borderBox.top += documentScroll.top;
        borderBox.left += documentScroll.left;
        borderBox.bottom += documentScroll.top;
        borderBox.right += documentScroll.left;
        if (document.body && document.body.contains(e)) {
            var documentGap = getDocumentGap(positionCache);
            borderBox.top -= documentGap.top;
            borderBox.right -= documentGap.left;
            borderBox.bottom -= documentGap.top;
            borderBox.left -= documentGap.left;
        }
        return {
            width: borderBox.width,
            height: borderBox.height,
            top: borderBox.top,
            right: borderBox.right,
            bottom: borderBox.bottom,
            left: borderBox.left
        };
    };
    var getDocumentScroll = function() {
        var t = document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0, e = document.documentElement && document.documentElement.scrollLeft || document.body && document.body.scrollLeft || 0;
        return {
            top: t,
            left: e
        };
    };
    var hasRelativePosition = function(positionCache) {
        return [ "relative", "fixed", "absolute", "sticky" ].indexOf(positionCache) > -1;
    };
    var getDocumentGap = function(positionCache) {
        var result = {
            top: 0,
            left: 0
        };
        if (document.body && hasRelativePosition(positionCache)) {
            var documentRect = document.documentElement.getBoundingClientRect();
            var bodyRect = document.body.getBoundingClientRect();
            var docTop = document.documentElement.offsetTop;
            var docLeft = document.documentElement.offsetLeft;
            var topMesaure = bodyRect.top - documentRect.top + docTop;
            var leftMesaure = bodyRect.left - documentRect.left + docLeft;
            var bodyComputedStyle = window.getComputedStyle(document.body);
            var borderTopWidth = parseFloat(bodyComputedStyle["border-top-width"]) || 0;
            var borderLeftWidth = parseFloat(bodyComputedStyle["border-left-width"]) || 0;
            result = {
                top: topMesaure + borderTopWidth,
                left: leftMesaure + borderLeftWidth
            };
        }
        return result;
    };
    var getScrollPosition = function(t) {
        var isCompatMode = t === window.document.body && "BackCompat" === window.document.compatMode;
        var top = isCompatMode ? 0 : t.scrollTop;
        var left = isCompatMode ? 0 : t.scrollLeft;
        return {
            top: top,
            left: left
        };
    };
    var findHighestZIndex = function(ShouldQueryAll) {
        var highestZIndex = 1;
        document.querySelectorAll("body *").forEach(function(e) {
            if ($gingerWidgetJquery(e).css("position") !== "static" && (!ShouldQueryAll ? !/ginger-/.test(e.className) : true)) {
                var elementZIndex = parseInt($gingerWidgetJquery(e).css("z-index"));
                elementZIndex = isNaN(elementZIndex) ? 1 : elementZIndex;
                highestZIndex = Math.max(elementZIndex, highestZIndex);
            }
        });
        return highestZIndex;
    };
    return {
        getPaddingBox: getPaddingBox,
        getScrollPosition: getScrollPosition,
        getElementScroll: getElementScroll,
        getDocumentScroll: getDocumentScroll,
        getDocumentGap: getDocumentGap,
        getScaleRatio: getScaleRatio,
        findHighestZIndex: findHighestZIndex
    };
}, [ "widget.session", "widget.config" ]);

(function() {
    var module = gingerModule.load("widget.mutationDetectorService", function(config) {
        var hasOverflow = function(node) {
            if (node.tagName === "IFRAME") {
                node = node.contentWindow.document.body;
                var isBodyHeightFixed = false;
                var cssRulesOfBody = node.ownerDocument.defaultView.getMatchedCSSRules(node, "");
                if (cssRulesOfBody && $gingerWidgetJquery.isArray(cssRulesOfBody)) {
                    for (var i = 0; i < cssRulesOfBody.length; i++) {
                        if (cssRulesOfBody[i].style.height) {
                            isBodyHeightFixed = true;
                        }
                    }
                }
                if (isBodyHeightFixed) return {
                    vertical: node.clientHeight + config.scrollbarWidth < node.scrollHeight,
                    horizontal: node.clientWidth < node.scrollWidth
                }; else return {
                    vertical: node.clientHeight + config.scrollbarWidth > node.scrollHeight,
                    horizontal: node.clientWidth < node.scrollWidth
                };
            } else {
                return {
                    vertical: node.clientHeight < node.scrollHeight,
                    horizontal: node.clientWidth < node.scrollWidth
                };
            }
        };
        var handleSpecialExceptions = function(node) {
            var mod = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: node
            }, $node = $gingerWidgetJquery(node);
            var isThisGmailComposer = $node.hasClass("LW-avf");
            if (isThisGmailComposer) {
                try {
                    mod.node = $node.closest("table").closest("td").get(0);
                    var $firstChild = $gingerWidgetJquery(node.firstElementChild || node.firstChild);
                    if ($firstChild.length > 0) {
                        var computerStyles = getComputedStyle($firstChild.get(0));
                        if (computerStyles) mod.direction = computerStyles.direction;
                    }
                } catch (e) {}
            }
            return mod;
        };
        var getLayout = function(node) {
            if (!node) return;
            var mod = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: node
            };
            var offset = $gingerWidgetJquery(mod.node).offset();
            var overflow = hasOverflow(mod.node);
            return {
                height: $gingerWidgetJquery(mod.node).outerHeight() + mod.height,
                width: $gingerWidgetJquery(mod.node).outerWidth() + mod.width,
                direction: mod.direction || $gingerWidgetJquery(mod.node).css("direction"),
                top: (offset ? offset.top : 0) + mod.top,
                left: (offset ? offset.left : 0) + mod.left,
                hasVerticalScrollbar: overflow.vertical || $gingerWidgetJquery(mod.node).css("overflow") == "scroll" || $gingerWidgetJquery(mod.node).css("overflow-y") == "scroll" ? true : false,
                scrollTop: $gingerWidgetJquery(mod.node).scrollTop(),
                scrollLeft: $gingerWidgetJquery(mod.node).scrollLeft(),
                hasHorizontalScrollbar: overflow.horizontal || $gingerWidgetJquery(mod.node).css("overflow") == "scroll" || $gingerWidgetJquery(mod.node).css("overflow-x") == "scroll" ? true : false,
                isVisible: $gingerWidgetJquery(node).is(":visible"),
                fontSize: $gingerWidgetJquery(mod.node).css("font-size")
            };
        };
        var compareLayouts = function(layout_new, layout_old) {
            if (!layout_old) {
                return true;
            }
            for (var key in layout_new) {
                if (layout_new[key] !== layout_old[key]) {
                    return true;
                }
            }
            return false;
        };
        return {
            compareLayouts: compareLayouts,
            getLayout: getLayout
        };
    }, []);
})();

(function() {
    var module = gingerModule.load("widget.onlinestatus", function() {
        var eventScope = $gingerWidgetJquery({});
        var online = true;
        var init = function() {
            window.addEventListener("online", function(e) {
                if (!online) {
                    eventScope.trigger("online");
                }
                online = true;
            });
            window.addEventListener("offline", function(e) {
                if (online) {
                    eventScope.trigger("offline");
                }
                online = false;
            });
            online = !!window.navigator.onLine;
        };
        var isOnline = function() {
            return online;
        };
        init();
        return {
            listen: eventScope,
            isOnline: isOnline
        };
    }, [ "widget.report" ]);
})();

(function() {
    var module = gingerModule.load("widget.phraseService", function() {
        var sentenceSplitter = /[\x1F]*[\s]*(([^.^!^?^\n^\x1F]|[.!?]+(?=\S)|(?=\x1F))+)([.!?\x1F]+(\n*(?=$))?|.*(?=[\n])|$|(?=\x1F))/gi;
        var nonCharacterBreakCount = /[^\x1F]+/g;
        var nonCharacterBreakRemoval = /\x1F/g;
        var sentenceIgnoreCharacter = /\x1C/g;
        var licenseStatus = gingerModule.get("widget.config").get("licenseStatus");
        var getSentences = function(phrase) {
            if (!phrase) return [];
            var trimmed = gingerModule.get("widget.utils").trimAndMatch(phrase);
            var sentenceSplit = trimmed.text.match(sentenceSplitter);
            if (!sentenceSplit) return [];
            sentenceSplit[0] = trimmed.pre + sentenceSplit[0];
            sentenceSplit[sentenceSplit.length - 1] = sentenceSplit[sentenceSplit.length - 1] + trimmed.post;
            var sentences = [];
            var sentenceOffset = 0;
            for (var i = 0; i < sentenceSplit.length; i++) {
                var preLineBreakCountMatch = sentenceSplit[i].match(/^[\x1F]+/);
                var postLineBreakCountMatch = sentenceSplit[i].match(/[\x1F]+$/);
                var preLineBreakCount = preLineBreakCountMatch ? preLineBreakCountMatch.toString().replace(nonCharacterBreakCount, "").length : 0;
                var postLineBreakCount = postLineBreakCountMatch ? postLineBreakCountMatch.toString().replace(nonCharacterBreakCount, "").length : 0;
                sentenceSplit[i] = sentenceSplit[i].replace(nonCharacterBreakRemoval, "");
                var startsAt = sentenceOffset;
                var endsAt = startsAt + sentenceSplit[i].length;
                var isIgnored = false;
                if (sentenceIgnoreCharacter.test(sentenceSplit[i])) {
                    sentenceSplit[i] = sentenceSplit[i].replace(sentenceIgnoreCharacter, "");
                    isIgnored = true;
                }
                var sentence = {
                    text: sentenceSplit[i],
                    startsAt: startsAt,
                    endsAt: endsAt,
                    activeSentence: false,
                    id: gingerModule.get("widget.utils").generateUID(),
                    preLineBreakCount: preLineBreakCount,
                    postLineBreakCount: postLineBreakCount
                };
                if (isIgnored) sentence.ignored = true;
                sentence.words = getWordsOfSentence(sentence);
                sentences.push(sentence);
                sentenceOffset += sentenceSplit[i].length;
            }
            return sentences;
        };
        var getActiveSentence = function(input, sentences) {
            if (document.activeElement !== input && !gingerModule.get("widget.utils").isGoogleDocs()) {
                return null;
            }
            if (!sentences) sentences = getSentences($gingerWidgetJquery(input).val());
            try {
                var caretPosition = gingerModule.get("widget.caret").get(input);
            } catch (e) {
                return null;
            }
            for (var i = 0; i < sentences.length; i++) {
                if (sentences[i].startsAt <= caretPosition && sentences[i].endsAt >= caretPosition) {
                    return i;
                }
            }
            return null;
        };
        var getSentenceFragments = function(sentence, from, to) {
            var fragments = [];
            if (!from) from = 0;
            if (typeof to === "undefined") to = sentence.text.length;
            var corrections = sentence.correction.Corrections;
            var fragmentOffset = 0;
            for (var i = 0; i < corrections.length; i++) {
                if (from <= corrections[i].From && to >= corrections[i].To) {
                    var fragmentBeforeMistakeFrom = from >= fragmentOffset ? from : fragmentOffset;
                    var fragmentBeforeMistakeTo = from >= fragmentOffset ? from : fragmentOffset;
                    var fragmentBeforeMistake = sentence.text.substring(fragmentBeforeMistakeFrom, corrections[i].From);
                    var fragmentOfMistake = sentence.text.substring(corrections[i].From, corrections[i].To + 1);
                    fragments.push({
                        text: fragmentBeforeMistake
                    });
                    fragments.push({
                        text: fragmentOfMistake,
                        correction: corrections[i]
                    });
                }
                fragmentOffset = corrections[i].To + 1;
            }
            if (corrections[corrections.length - 1].To + 1 <= to) {
                var fragmentAfterLastMistake = sentence.text.substring(corrections[corrections.length - 1].To + 1, to + 1);
                fragments.push({
                    text: fragmentAfterLastMistake
                });
            }
            return fragments;
        };
        var getWordsOfSentence = function(sentence) {
            if (sentence.text.match(/^\s+$/)) return [];
            var wordSplit = sentence.text.match(/(^\s+)?\S+(\s*[.?!])?(\s+|$)/g);
            if (!wordSplit) return [];
            var words = [];
            for (var i = 0; i < wordSplit.length; i++) {
                var startsAt = i == 0 ? sentence.startsAt : sentence.startsAt + wordSplit.slice(0, i).join("").length;
                var endsAt = startsAt + wordSplit[i].length;
                var word = {
                    text: wordSplit[i],
                    startsAt: startsAt,
                    endsAt: endsAt
                };
                words.push(word);
            }
            return words;
        };
        var handleCharLimit = function(sentences) {
            var charLimit = gingerModule.get("widget.config").get("charLimit");
            var isPremium = gingerModule.get("widget.session").get("license") === licenseStatus.premium;
            var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs();
            if (charLimit && charLimit > 0 && sentences && sentences.length && sentences[sentences.length - 1].endsAt > charLimit) {
                for (var i = 0; i < sentences.length; i++) {
                    if (sentences[i].endsAt > charLimit && !(isPremium && isGoogleDocs)) {
                        sentences[i].charLimited = true;
                    } else {
                        sentences[i].charLimited = false;
                    }
                }
            }
        };
        var getRepresentation = function(input) {
            var val = gingerModule.get("widget.contentManager").getVal(input);
            var sentences = getSentences(val);
            var activeSentence = getActiveSentence(input, sentences);
            handleCharLimit(sentences);
            if (activeSentence !== null) sentences[activeSentence].activeSentence = true;
            return sentences;
        };
        return {
            getSentences: getSentences,
            getActiveSentence: getActiveSentence,
            getRepresentation: getRepresentation,
            getSentenceFragments: getSentenceFragments,
            getWordsOfSentence: getWordsOfSentence
        };
    }, [ "widget.contentManager", "widget.caret", "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.preFlightProbe", function() {
        var disabled = false;
        var reactRTETest = function(area) {
            var deferred = $gingerWidgetJquery.Deferred();
            var reactRootParent = $gingerWidgetJquery(area).closest("[data-reactroot], [data-reactid]");
            if (reactRootParent.length) {
                deferred.reject("reactRTETest failed");
            } else {
                deferred.resolve();
            }
            return deferred.promise();
        };
        var injectionTest = function(area) {
            var deferred = $gingerWidgetJquery.Deferred();
            var textNodesWithinArea = $gingerWidgetJquery(area).contents().filter(function() {
                return this.nodeType == Node.TEXT_NODE;
            });
            var injectFakeHighlightInto = area;
            if (textNodesWithinArea.length) {
                injectFakeHighlightInto = textNodesWithinArea[0].parentNode;
            } else if ($gingerWidgetJquery(area).find("p").length) {
                injectFakeHighlightInto = $gingerWidgetJquery(area).find("p").eq(0);
            } else if ($gingerWidgetJquery(area).find("br").length) {
                injectFakeHighlightInto = $gingerWidgetJquery(area).find("br").eq(0).parent();
            }
            $gingerWidgetJquery("<gwmw style='display:none;'></gwmw>").appendTo(injectFakeHighlightInto);
            var prEvent = document.createEvent("CustomEvent");
            prEvent.initCustomEvent("input", true, true, null);
            area.dispatchEvent(prEvent);
            setTimeout(function() {
                var fhlights = $gingerWidgetJquery(area).find("gwmw");
                if (fhlights.length) {
                    deferred.resolve();
                } else {
                    deferred.reject("injectionTest failed");
                }
                fhlights.remove();
            }, 50);
            return deferred.promise();
        };
        var run = function(area) {
            var editorConfig = gingerModule.get("widget.siteSettings").get(window.location.href, area);
            var attr = $gingerWidgetJquery(area).attr("contenteditable");
            if (area && area.hasAttribute("contenteditable")) {
                return injectionTest(area).then(function() {
                    return reactRTETest(area);
                }).catch(function(error) {
                    throw error;
                });
            } else {
                var deferred = $gingerWidgetJquery.Deferred();
                deferred.resolve();
                return deferred.promise();
            }
        };
        return {
            run: run,
            disable: function(isDisabled) {
                disabled = isDisabled;
            }
        };
    }, [ "widget.utils", "widget.report" ]);
})();

(function() {
    var module = gingerModule.load("widget.report", function() {
        var eventScope = $gingerWidgetJquery({});
        var reporterGA4 = gingerModule.get("widget.backgroundConnector").proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporterGA4"
        });
        return {
            reporterGA4: reporterGA4
        };
    }, [ "widget.correctionBubble", "widget.config", "widget.correctionService" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.common", function() {
        var executeTimeout = 10;
        var executeTimeoutRef = null;
        var executeQueue = [];
        var executeInQueue = function(fnToRun) {
            if (fnToRun) executeQueue.push(fnToRun);
            var isQueueBeingProcessed = !!executeTimeoutRef;
            if (isQueueBeingProcessed) {
                return;
            }
            var queueItem = executeQueue.shift();
            queueItem();
            if (executeQueue.length) {
                executeTimeoutRef = setTimeout(executeInQueue, executeTimeout);
            } else {
                executeTimeoutRef = null;
            }
            return queueItem;
        };
        var findElementUntil = function(selector, fromElement, tillElement) {
            var closestParent = $gingerWidgetJquery(fromElement).closest(selector);
            if ($gingerWidgetJquery(closestParent).find(tillElement)) {
                return closestParent;
            } else {
                return null;
            }
        };
        var getTextNodesUnder = function(el) {
            var n, a = [], walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            while (n = walk.nextNode()) {
                a.push(n);
            }
            return a;
        };
        var selectText = function(element) {
            var doc = document;
            var text = element;
            var range, selection;
            if (doc.body.createTextRange) {
                range = document.body.createTextRange();
                range.moveToElementText(text);
                range.select();
            } else if (window.getSelection) {
                selection = window.getSelection();
                range = document.createRange();
                range.selectNodeContents(text);
                selection.removeAllRanges();
                selection.addRange(range);
            }
            return range;
        };
        var contentEditableReplacer = function(element, value, from, to, blockSelector, replaceCb) {
            $gingerWidgetJquery(element).focus();
            var textNodes = getTextNodesUnder(element);
            if (!textNodes.length) {
                var tn;
                tn = element.appendChild(document.createTextNode(""));
                replaceCb(element, tn, value);
                return;
            }
            var nodeOffsets = gingerModule.get("widget.utils").getNodeOffsetOfIndex(element, from, to);
            var isInReplacingMode = false;
            for (var tni = 0; tni < textNodes.length; tni++) {
                var fragment = textNodes[tni].nodeValue;
                var isStartNode = textNodes[tni] == nodeOffsets.startNode;
                var isEndNode = textNodes[tni] == nodeOffsets.endNode;
                if (isStartNode) {
                    isInReplacingMode = true;
                }
                if (isInReplacingMode) {
                    if (isStartNode && isEndNode) {
                        replaceCb(element, textNodes[tni], fragment.substring(0, nodeOffsets.startNodeOffset) + value + fragment.substring(nodeOffsets.endNodeOffset));
                    } else if (isStartNode) {
                        replaceCb(element, textNodes[tni], fragment.substring(0, nodeOffsets.startNodeOffset) + value);
                    } else if (isEndNode) {
                        replaceCb(element, textNodes[tni], fragment.substring(nodeOffsets.endNodeOffset));
                    } else {
                        replaceCb(element, textNodes[tni], "");
                    }
                }
                if (isEndNode) {
                    break;
                }
            }
            return;
        };
        return {
            executeInQueue: executeInQueue,
            selectText: selectText,
            contentEditableReplacer: contentEditableReplacer
        };
    });
})();

(function() {
    var module = gingerModule.load("widget.rewriters.contentEditable", function() {
        var rewrite = function(element, value, from, to) {
            var blockSelector = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (document.activeElement !== element) element.focus();
            gingerModule.get("widget.selectionManager").saveSelection(element);
            var textNodeReplacer = function(area, node, value) {
                $gingerWidgetJquery(node).replaceWith(value);
            };
            var walker = gingerModule.get("widget.rewriters.common").contentEditableReplacer(element, value, from, to, blockSelector, textNodeReplacer);
            gingerModule.get("widget.selectionManager").restoreSelection(element);
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.draft.ce", function() {
        return gingerModule.get("widget.rewriters.facebook.ce");
    }, [ "widget.rewriters.common", "widget.rewriters.facebook.ce" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.draft.textarea", function() {
        var rewrite = function(element, value, from, to) {
            var deferred = $gingerWidgetJquery.Deferred();
            var textarea = $gingerWidgetJquery(element);
            textarea.get(0).select();
            var len = textarea.val().length;
            var sentence = textarea.val().substring(from, to);
            var newValue = textarea.val().substring(0, from) + value + textarea.val().substring(to, len);
            textarea.val(newValue);
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var evenChange = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        prop: "value",
                        value: newValue
                    }
                });
                document.dispatchEvent(evenChange);
            });
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var evenChange = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onChange",
                        params: {
                            target: {
                                value: newValue
                            }
                        }
                    }
                });
                document.dispatchEvent(evenChange);
                deferred.resolve();
            });
            return deferred.promise();
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.facebook.ce", function() {
        var eventRegister = {};
        var rewrite = function(element, value, from, to) {
            var blockSelector = "[data-block='true']";
            var textNodeReplacer = function(area, node, value) {
                var elem = document.activeElement;
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onFocus"
                        }
                    });
                    document.dispatchEvent(event);
                    var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(node);
                    document.dispatchEvent(event);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!value) {
                        var eventKeyDown = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(eventKeyDown);
                    } else {
                        var eventPaste = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: value
                        });
                        document.dispatchEvent(eventPaste);
                    }
                });
            };
            gingerModule.get("widget.rewriters.common").contentEditableReplacer(element, value, from, to, blockSelector, textNodeReplacer);
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.gdocs", function() {
        const MOUSE_EVENT_DETAIL = 99;
        const SCROLL_CONTAINER_SELECTOR = "div.kix-appview-editor-container > div.kix-appview-editor";
        const RECT_ELEMENTS_SELECTOR = "div.kix-canvas-tile-content:not(.kix-canvas-tile-selection) g rect";
        const GINGER_OVERLAY_SELECTOR = ".ginger-container-body";
        const DOCS_IFRAME_SELECTOR = ".docs-texteventtarget-iframe";
        const DOCS_INPUT_CONTAINER_SELECTOR = "div.kix-canvas-tile-content";
        let mousemoveCapture = null;
        const shiftKeyEvent = {
            shiftKey: true,
            key: "Shift",
            code: "ShiftLeft",
            keyCode: 16,
            charCode: 0,
            which: 16,
            location: 1
        };
        function getTargetElement(event) {
            if (typeof event.composedPath === "function") {
                const composedPath = event.composedPath();
                if (composedPath[0]) {
                    return composedPath[0];
                }
            }
            return event.target;
        }
        function addGlobalEventListener(target, eventType, callback) {
            const documentContext = isDocument(target) ? target : target.ownerDocument;
            const eventHandler = event => {
                const targetElement = getTargetElement(event);
                if ((isElementNode(targetElement) || isTextNode(targetElement)) && target.contains(targetElement)) {
                    callback(event);
                }
            };
            documentContext.defaultView.addEventListener(eventType, eventHandler, true);
            return {
                destroy() {
                    documentContext.defaultView.removeEventListener(eventType, eventHandler, true);
                }
            };
        }
        function isDocument(node) {
            return node.nodeType === Node.DOCUMENT_NODE;
        }
        function isElementNode(node) {
            return node.nodeType === Node.ELEMENT_NODE;
        }
        function isTextNode(node) {
            return node.nodeType === Node.TEXT_NODE;
        }
        function getDocsIframe() {
            const docsIframe = document.querySelector(DOCS_IFRAME_SELECTOR);
            return docsIframe && docsIframe.contentWindow || null;
        }
        function getScrollContainer() {
            var inputArea = document.querySelector(DOCS_INPUT_CONTAINER_SELECTOR);
            return inputArea.closest(SCROLL_CONTAINER_SELECTOR);
        }
        function getCurrentRects(rects, target) {
            let rectCords = rects.map(rect => {
                let cords = rect.getBoundingClientRect();
                return {
                    cords: cords,
                    rect: rect
                };
            });
            let result;
            for (let i = 0; i < rectCords.length; i++) {
                const element = rectCords[i]?.cords;
                const nextElement = rectCords[i + 1]?.cords;
                if (Math.round(element.left) <= target.x && target.x <= Math.round(element.left) + Math.round(element.width) && Math.round(element.top) <= target.y + target.height / 2 && target.y + target.height / 2 <= Math.round(nextElement?.top > element.top + element.height ? nextElement.top : element.bottom)) {
                    result = rectCords[i];
                }
            }
            return result;
        }
        function localTimeout(e = 25, t = null) {
            return new Promise(n => setTimeout(() => n(t), e));
        }
        function _selectFromRightToLeft(firstBox, lastBox, iframeWindow, firstBoxParentNode, lastBoxParentNode, editableContainer) {
            const sourceMouseEvent = {
                clientX: Math.round(lastBox.x),
                clientY: Math.round(lastBox.y + lastBox.height / 2),
                bubbles: true,
                shftKey: false,
                detail: MOUSE_EVENT_DETAIL
            };
            const targetMouseEvent = {
                clientX: Math.round(firstBox.x),
                clientY: Math.round(firstBox.y + lastBox.height / 2),
                bubbles: true,
                shftKey: true,
                detail: MOUSE_EVENT_DETAIL
            };
            return lastBoxParentNode.dispatchEvent(new MouseEvent("mousemove", sourceMouseEvent)), 
            localTimeout(50).then(() => {
                try {
                    lastBoxParentNode.dispatchEvent(new MouseEvent("mousedown", sourceMouseEvent));
                    firstBoxParentNode.dispatchEvent(new MouseEvent("mousemove", targetMouseEvent));
                    editableContainer.dispatchEvent(new iframeWindow.KeyboardEvent("keydown", shiftKeyEvent));
                    firstBoxParentNode.dispatchEvent(new MouseEvent("mouseup", targetMouseEvent));
                    editableContainer.dispatchEvent(new iframeWindow.KeyboardEvent("keyup", shiftKeyEvent));
                    return Promise.resolve();
                } catch (e) {
                    return Promise.reject();
                }
            });
        }
        function _selectFromLeftToRight(firstBox, lastBox, iframeWindow, firstBoxParentNode, lastBoxParentNode, editableContainer) {
            const sourceMouseEvent = {
                clientX: Math.round(firstBox.x),
                clientY: Math.round(firstBox.y + firstBox.height / 2),
                bubbles: true,
                shftKey: false,
                detail: MOUSE_EVENT_DETAIL
            };
            const targetMouseEvent = {
                clientX: Math.round(lastBox.x),
                clientY: Math.round(lastBox.y + firstBox.height / 2),
                bubbles: true,
                shftKey: true,
                detail: MOUSE_EVENT_DETAIL
            };
            return firstBoxParentNode.dispatchEvent(new MouseEvent("mousemove", sourceMouseEvent)), 
            localTimeout(50).then(() => {
                try {
                    firstBoxParentNode.dispatchEvent(new MouseEvent("mousedown", sourceMouseEvent));
                    lastBoxParentNode.dispatchEvent(new MouseEvent("mousemove", targetMouseEvent));
                    editableContainer.dispatchEvent(new iframeWindow.KeyboardEvent("keydown", shiftKeyEvent));
                    lastBoxParentNode.dispatchEvent(new MouseEvent("mouseup", targetMouseEvent));
                    editableContainer.dispatchEvent(new iframeWindow.KeyboardEvent("keyup", shiftKeyEvent));
                    return Promise.resolve();
                } catch (e) {
                    return Promise.reject();
                }
            });
        }
        function lockMousemove() {
            mousemoveCapture || (mousemoveCapture = (0, addGlobalEventListener)(document, "mousemove", e => e.stopImmediatePropagation()));
        }
        function unlockMousemove() {
            mousemoveCapture && (mousemoveCapture.destroy(), mousemoveCapture = null);
        }
        var rewrite = function(value, replacementCoordinates, fromRephrase) {
            const scrollContainer = getScrollContainer();
            if (!scrollContainer) {
                console.log("No scroll container");
            }
            const docsIframe = getDocsIframe();
            if (!docsIframe) {
                console.log("No scroll iframe");
            }
            const iframeEditableField = docsIframe.document.querySelector("[contenteditable=true]");
            if (!iframeEditableField) {
                console.log("No scroll editable field in iframe");
            }
            if (fromRephrase) {
                lockMousemove();
                return localTimeout(50).then(() => {
                    let pasteEvent;
                    try {
                        pasteEvent = new docsIframe.ClipboardEvent("paste", {
                            clipboardData: new docsIframe.DataTransfer(),
                            bubbles: true
                        });
                        pasteEvent.clipboardData.setData("text/plain", value);
                    } catch (e) {
                        pasteEvent = new docsIframe.ClipboardEvent("paste", {
                            bubbles: !0
                        });
                    }
                    iframeEditableField.dispatchEvent(pasteEvent);
                    iframeEditableField.textContent = value;
                    return Promise.resolve();
                }).catch(e => {
                    console.log("SOME ERR", e);
                }).finally(() => unlockMousemove());
            }
            var rectElements = document.querySelectorAll(RECT_ELEMENTS_SELECTOR);
            const inputField = document.querySelector(GINGER_OVERLAY_SELECTOR).getBoundingClientRect();
            if (!inputField) {
                console.log("No inputField");
            }
            if (!fromRephrase) {
                var firstBox = {
                    x: Math.round(replacementCoordinates.startX + inputField.x),
                    y: Math.round(replacementCoordinates.startY + inputField.y),
                    height: Math.round(replacementCoordinates.startHeight)
                };
                var lastBox = {
                    x: Math.round(replacementCoordinates.endX + inputField.x),
                    y: Math.round(replacementCoordinates.endY + inputField.y),
                    height: Math.round(replacementCoordinates.endHeight)
                };
            }
            let startRect = getCurrentRects(Array.from(rectElements), firstBox);
            let endRect = getCurrentRects(Array.from(rectElements), lastBox);
            if (!startRect) {
                startRect = endRect;
                console.log("No startRect");
            }
            if (!endRect) {
                endRect = startRect;
                console.log("No endRect");
            }
            let startRectParentEl = startRect?.rect?.parentElement;
            let endRectParentEl = endRect?.rect?.parentElement;
            if (!startRectParentEl) {
                startRectParentEl = endRectParentEl;
                console.log("No startRectParentEl");
            }
            if (!endRectParentEl) {
                endRectParentEl = startRectParentEl;
                console.log("No endRectParentEl");
            }
            lockMousemove();
            return localTimeout(50).then(() => unlockMousemove()).then(() => _selectFromLeftToRight(firstBox, lastBox, getDocsIframe(), startRect.rect.parentElement, startRect.rect.parentElement, iframeEditableField).catch(() => _selectFromRightToLeft(firstBox, lastBox, getDocsIframe(), startRect.rect.parentElement, startRect.rect.parentElement, iframeEditableField))).then(() => {
                let pasteEvent;
                try {
                    pasteEvent = new docsIframe.ClipboardEvent("paste", {
                        clipboardData: new docsIframe.DataTransfer(),
                        bubbles: true
                    });
                    pasteEvent.clipboardData.setData("text/plain", value);
                } catch (e) {
                    pasteEvent = new docsIframe.ClipboardEvent("paste", {
                        bubbles: true
                    });
                }
                iframeEditableField.dispatchEvent(pasteEvent);
                iframeEditableField.textContent = value;
                return Promise.resolve();
            }).catch(e => {
                console.log(e);
            }).finally(() => unlockMousemove());
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.newReact.ce", function() {
        var getCrrarShift = function(originText, replaceIndex) {
            var shift = 0;
            try {
                if (!replaceIndex || !originText) return 0;
                var clonedIndex = replaceIndex;
                for (var i = 0; i < originText.length; i++) {
                    if (/\n/.test(originText[i]) && i <= clonedIndex) {
                        clonedIndex = clonedIndex + 1;
                    }
                }
                return clonedIndex;
            } catch (error) {
                return shift;
            }
        };
        var rewrite = function(element, value, from, to, fromRephrase) {
            var isTextArea = !!element.value;
            var originText = element.value ? element.value : element.innerText;
            var dataBlocks = element.querySelectorAll('[data-block="true"]');
            var offsetFrom = 0;
            if (dataBlocks && dataBlocks.length) {
                originText = "";
                for (var i = 0; i < dataBlocks.length; i++) {
                    if (originText.length < from) {
                        var matches = dataBlocks[i].innerText.match(/\n/g);
                        if (matches && matches.length) {
                            offsetFrom += matches.length - 1;
                        }
                    }
                    if (i !== 0) {
                        originText += "\n";
                    }
                    originText += dataBlocks[i].textContent;
                }
                if (fromRephrase) {
                    from = from - offsetFrom;
                    to = to - offsetFrom;
                } else {
                    var oldFrom = from;
                    from = getCrrarShift(originText, from);
                    to = from + (to - oldFrom);
                }
            }
            value = originText.slice(0, from) + value + originText.slice(to);
            var textNodeReplacer = function(node, value) {
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onFocus"
                        }
                    });
                    document.dispatchEvent(event);
                    var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(node);
                    document.dispatchEvent(event);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!value) {
                        var eventKeyDown = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(eventKeyDown);
                    } else {
                        var eventPaste = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: value
                        });
                        document.dispatchEvent(eventPaste);
                    }
                });
            };
            $gingerWidgetJquery(element).focus();
            textNodeReplacer(element, value);
            return new Promise(function(resolve, reject) {
                resolve(true);
            });
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.newFloating", function() {
        var eventRegister = {};
        var actionQueueTimeout = 20;
        var actionQueue = [];
        var actionGap = null;
        var actionQueueRunner = function() {
            if (!actionQueue.length) {
                return;
            }
            if (actionGap) {
                return;
            }
            var action = actionQueue.shift();
            action.action();
            actionGap = setTimeout(function() {
                actionGap = null;
                actionQueueRunner();
            }, action.timeout);
        };
        var runAction = function(fn, timeout) {
            if (!timeout) timeout = actionQueueTimeout;
            actionQueue.push({
                action: fn,
                timeout: timeout
            });
            actionQueueRunner();
        };
        function textNodesUnder(el) {
            var n, a = [], walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            while (n = walk.nextNode()) a.push(n);
            return a;
        }
        var getTextNodesWithReplacementValues = function(element, value, from, to) {
            var r = gingerModule.get("widget.utils").getNodeFragmentsOfIndex(element, from, to);
            r.forEach(function(e) {
                if (!e.node.nodeValue) e.node.nodeValue = "";
                var nv = e.node.nodeValue;
                var i = Math.min(nv.length, value.length);
                e.newtext = nv.substr(0, e.from) + value.substr(0, i) + nv.substr(e.to);
                e.replacement = value.substr(0, e.to - e.from);
                value = value.substr(e.to - e.from);
            });
            if (value && r[r.length - 1]) r[r.length - 1].replacement += value;
            return r;
        };
        var appendStylesForSelection = function(element) {
            try {
                if (!element || document.querySelector("#ginger-rewriter-selection")) {
                    return;
                }
                var cssRules = "[ginger-rewriter-selection]::selection {background: transparent!important} [ginger-rewriter-selection] *::selection {background: transparent!important}";
                var ghostStyles = document.createElement("style");
                ghostStyles.id = "ginger-rewriter-selection";
                ghostStyles.type = "text/css";
                ghostStyles.textContent = cssRules;
                document.getElementsByTagName("head")[0].appendChild(ghostStyles);
            } catch (e) {
                console.error("appendStylesForSelection Error: ", e);
            }
        };
        var rewrite = function(element, value, from, to, fromRephrase, isReactUsingApp = false) {
            appendStylesForSelection(element);
            try {
                $gingerWidgetJquery(element).attr("ginger-rewriter-selection", true);
            } catch (e) {
                console.error(e);
            }
            var deferred = $gingerWidgetJquery.Deferred();
            var origValue = value;
            var isStandardArea = !(isTinyMCE(element) || isGutenberg(element) || isTrixEditor(element) || isSlateEditor(element) || gingerModule.get("widget.utils").isCKEditor(element));
            if (isStandardArea) {
                runAction(function() {
                    simulateSelection(element);
                });
            }
            var r = getTextNodesWithReplacementValues(element, value, from, to);
            var replaceIndexOffset = 0;
            r.reverse();
            r.forEach(function(e, i) {
                if (!e) return;
                if (e.node.nodeValue === e.replacement) return;
                if (isStandardArea) {
                    runAction(function() {
                        try {
                            simulateSelection(e.node.parentNode);
                        } catch (e) {
                            actionQueue.length = 0;
                            return rewrite(element, value, from, to + replaceIndexOffset);
                        }
                    });
                }
                if (!(gingerModule.get("widget.utils").isCKEditor(element) && fromRephrase)) {
                    runAction(function() {
                        selectText(e.node, e.from, e.to);
                    });
                }
                if (!gingerModule.get("widget.utils").isCKEditor(element)) {
                    runAction(function() {
                        var t = new window.InputEvent("beforeinput", {
                            bubbles: !0,
                            cancelable: 1,
                            inputType: "insertText",
                            data: e.replacement
                        });
                        element.dispatchEvent(t);
                        replaceIndexOffset += e.replacement.length - (e.to - e.from);
                        if (isReactUsingApp) {
                            document.execCommand("insertHTML", !1, e.replacement);
                        } else {
                            try {
                                document.execCommand("insertText", !1, e.replacement);
                            } catch (e) {
                                console.error(e);
                            }
                        }
                    });
                } else {
                    runAction(function() {
                        const e = new DataTransfer();
                        e.setData("text/plain", value);
                        const i = new ClipboardEvent("paste", {
                            clipboardData: e,
                            target: element,
                            dataType: "text/plain",
                            data: value,
                            bubbles: !0,
                            cancelable: !0
                        });
                        element.dispatchEvent(i);
                    });
                }
            });
            if (r[0]) {
                runAction(function() {
                    var selection = window.getSelection();
                    selection.removeAllRanges();
                    if (element.contains(r[0].node)) {
                        var range = new Range();
                        var minPos = Math.min(r[0].from + r[0].replacement.length, r[0].node.nodeValue.length);
                        range.setStart(r[0].node, minPos);
                        range.collapse();
                        selection.addRange(range);
                    }
                });
            }
            runAction(function() {
                simulateChange(element);
            });
            runAction(function() {
                try {
                    $gingerWidgetJquery(element).removeAttr("ginger-rewriter-selection");
                } catch (e) {
                    console.error(e);
                }
                deferred.resolve();
            });
            return deferred.promise();
        };
        function replaceSelectedText(replacementText) {
            var sel, range;
            if (window.getSelection) {
                sel = window.getSelection();
                if (sel.rangeCount) {
                    range = sel.getRangeAt(0);
                    range.deleteContents();
                    range.insertNode(document.createTextNode(replacementText));
                }
            } else if (document.selection && document.selection.createRange) {
                range = document.selection.createRange();
                range.text = replacementText;
            }
        }
        function selectText(e, t, n) {
            t = Math.max(t, 0);
            n = Math.min(n, e.nodeValue.length);
            var s = window.getSelection();
            s.empty();
            var r = new Range();
            r.setStart(e, t), r.setEnd(e, n), s.addRange(r);
        }
        function isFormElement(t) {
            return isTextArea(t) || isTextInput(t);
        }
        function isTextArea(t) {
            return t instanceof HTMLTextAreaElement;
        }
        function isTextInput(t) {
            return t instanceof HTMLInputElement && ("text" === t.type || "search" === t.type);
        }
        function isTinyMCE(t) {
            return t.classList.contains("mce-content-body") || t.classList.contains("mceContentBody");
        }
        function isSlateEditor(t) {
            return t.hasAttribute("data-slate-editor");
        }
        function isProseMirror(t) {
            return t.classList.contains("ProseMirror");
        }
        function isGutenberg(t) {
            return t.classList.contains("editor-rich-text__editable") || t.classList.contains("block-editor-rich-text__editable");
        }
        function isTrixEditor(t) {
            return "trix-editor" === t.nodeName.toLowerCase();
        }
        function isReactArea(element) {
            var ce = element.getAttribute("contenteditable");
            return ce && $gingerWidgetJquery(element).find("[data-block='true']").length > 0 || ce && $gingerWidgetJquery(element).closest("[data-reactroot]").length;
        }
        function simulateSelection(e) {
            var t = window.getSelection();
            t.empty();
            var n = new Range();
            n.setStart(e, false);
            n.collapse();
            t.addRange(n);
            var s = new MouseEvent("mousedown", {
                bubbles: !0,
                cancelable: !1
            }), r = new MouseEvent("mouseup", {
                bubbles: !0,
                cancelable: !1
            });
            e.dispatchEvent(s);
            e.dispatchEvent(r);
        }
        function simulateChange(element) {
            var e = new Event("change", {
                bubbles: !0,
                cancelable: !1
            });
            element.dispatchEvent(e);
        }
        function simulateInput(element, data) {
            var t = new window.InputEvent("input", {
                bubbles: !0,
                cancelable: !1,
                inputType: "insertText",
                data: data
            });
            element.dispatchEvent(t);
        }
        function offsetInRawText(e, t) {
            t = Math.min(e.length, t);
            var n = -1;
            var ZWC = [ "​", "‌", "‍" ];
            for (var zwci = 0; zwci < ZWC.length; zwci++) {
                var t2 = ZWC[zwci];
                var s2 = e.indexOf(t2);
                -1 !== s2 && (n = -1 === n ? s2 : Math.min(n, s2));
            }
            if (-1 === n || t < n) return t;
            var s = n, r = n;
            do {
                if (ZWC.includes(e[s]) || r++, r > t) break;
                s++;
            } while (s < e.length);
            return s;
        }
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.plainTextContentEditable", function() {
        var rewrite = function(element, value, from, to) {
            var blockSelector = "div, p";
            var textNodeReplacer = function(area, node, value) {
                node.nodeValue = value;
            };
            var walker = gingerModule.get("widget.rewriters.common").contentEditableReplacer(element, value, from, to, blockSelector, textNodeReplacer);
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.textarea", function() {
        var rewrite = function(element, value, from, to) {
            var deferred = $gingerWidgetJquery.Deferred();
            var textarea = $gingerWidgetJquery(element);
            var len = textarea.val().length;
            var sentence = textarea.val().substring(from, to);
            var newValue = textarea.val().substring(0, from) + value + textarea.val().substring(to, len);
            textarea.val(newValue);
            deferred.resolve();
            return deferred.promise();
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.whatsapp.ce", function() {
        var rewrite = function(element, value, from, to) {
            var textNodeReplacer = function(area, node, value) {
                node.nodeValue = value;
                var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onInput"
                    }
                });
                document.dispatchEvent(event);
                var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onFocus"
                    }
                });
                document.dispatchEvent(event);
                $gingerWidgetJquery(area).focus();
            };
            var walker = gingerModule.get("widget.rewriters.common").contentEditableReplacer(element, value, from, to, null, textNodeReplacer);
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.selectionManager", function() {
        var saveSelection = function(element) {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(element);
            if (isRTE) {
                return saveSelectionInRTE(element);
            } else {
                return saveSelectionInTextarea(element);
            }
        };
        var saveSelectionInRTE = function(element) {
            $gingerWidgetJquery("gwcphb").remove();
            $gingerWidgetJquery("gwcphe").remove();
            var sel = window.getSelection();
            if (sel.rangeCount > 0) {
                var range = sel.getRangeAt(0);
                var cursorRangeBegin = range.cloneRange();
                cursorRangeBegin.collapse(true);
                var cursorPlaceHolderBegin = document.createElement("gwcphb");
                cursorRangeBegin.insertNode(cursorPlaceHolderBegin);
                cursorRangeBegin.detach();
                if (!range.collapsed) {
                    var cursorRangeEnd = range.cloneRange();
                    cursorRangeEnd.collapse();
                    var cursorPlaceHolderEnd = document.createElement("gwcphe");
                    cursorRangeEnd.insertNode(cursorPlaceHolderEnd);
                    cursorRangeEnd.detach();
                }
            }
            return null;
        };
        var saveSelectionInTextarea = function() {};
        var restoreSelection = function(element) {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(element);
            if (isRTE) {
                return restoreSelectionInRTE(element);
            } else {
                return restoreSelectionInTextarea(element);
            }
        };
        var restoreSelectionInRTE = function(element) {
            var startNode = element.querySelector("gwcphb");
            var endNode = element.querySelector("gwcphe");
            if (!startNode && !endNode) return null;
            var range = document.createRange();
            range.setStartAfter(startNode);
            if (endNode) {
                range.setEndAfter(endNode);
            } else {
                range.collapse(true);
            }
            if (startNode) startNode.parentNode.removeChild(startNode);
            if (endNode) endNode.parentNode.removeChild(endNode);
            range.commonAncestorContainer.normalize();
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            return range;
        };
        var restoreSelectionInTextarea = function() {};
        return {
            saveSelection: saveSelection,
            restoreSelection: restoreSelection
        };
    }, [ "widget.utils" ]);
})();

gingerModule.load("widget.session", function() {
    var eventScope = $gingerWidgetJquery("<eventScope>");
    var session = null;
    var isSessionsMerged = false;
    var licenseStatus = gingerModule.get("widget.config").get("licenseStatus");
    var get = function(prop) {
        return session && prop ? session[prop] : session;
    };
    var set = function(newsession) {
        var sessionChanged = JSON.stringify(session) !== JSON.stringify(newsession);
        session = newsession ? newsession : null;
        if (sessionChanged) {
            gingerModule.get("widget.backgroundConnector").callPromise({
                module: "gingerchromeext.background.correctionLimits",
                callFunction: "get"
            }).then(function(correctionLimits) {
                gingerModule.get("widget.config").set("charLimit", newsession.license === licenseStatus.premium ? correctionLimits.premium : correctionLimits.free);
                eventScope.trigger("change", newsession);
            }, function(error) {
                console.warn("chrome.session.set is not supported", error);
                eventScope.trigger("change", newsession);
            });
        }
    };
    var isLoggedIn = function() {
        return session && !session.isAnonym;
    };
    gingerModule.get("widget.backgroundConnector").call({
        module: "gingerchromeext.background.session",
        callFunction: "get"
    }, function(result) {
        if (result && !isSessionsMerged) {
            session = gingerModule.get("widget.utils").merge(session, result);
            isSessionsMerged = true;
        }
    });
    return {
        get: get,
        set: set,
        isLoggedIn: isLoggedIn,
        listen: eventScope
    };
});

(function() {
    var module = gingerModule.load("widget.siteSettings", function() {
        var shiftIcon = {
            x: 20,
            y: 30
        };
        var shiftRephraseIcon = {
            y: 15
        };
        var settings = {
            kdfieneakcjfaiglcfcgkidlkmlijjnh: {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "web.whatsapp.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    }
                },
                shiftIcon: {
                    x: 15,
                    y: 8
                },
                minifyIcon: true
            },
            "gingersoftware.com": {
                pages: {
                    "ginger-writer": {
                        disabled: true
                    }
                }
            },
            "twitter.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    }
                },
                isMiniRephrase: true,
                shiftIcon: shiftIcon
            },
            "notion.so": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                minifyIcon: true
            },
            "linkedin.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "/talent/job-posting": {
                        disabled: true
                    }
                },
                selectors: {
                    ".mentions-texteditor__contenteditable": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    },
                    ".ql-editor": {
                        minifyIcon: false
                    }
                },
                shiftIcon: {
                    x: 20,
                    y: 10
                },
                minifyIcon: true
            },
            "salesforce.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "layout=EmailTemplate": {
                        disabled: true
                    }
                }
            },
            "slack.com": {},
            "discussions.apple.com": {},
            "lightning.force.com": {
                pages: {
                    "/lightning": {
                        postRewriteEvents: [ "input" ]
                    }
                },
                shiftIcon: {
                    x: 0,
                    y: 100
                },
                shiftRephraseIcon: shiftRephraseIcon,
                injection: "injection/js/ckeditor_inject_script.min.js"
            },
            "facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating",
                            plainText: "widget.rewriters.draft.textarea"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    },
                    "/notes": {
                        disabled: true
                    }
                },
                injection: "injection/js/inject_script.min.js",
                isMiniRephrase: true,
                minifyIcon: true,
                shiftIcon: {
                    x: 10,
                    y: 7
                }
            },
            "app.hubspot.com": {
                pages: {
                    "/notes": {
                        disabled: true
                    }
                }
            },
            "messenger.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    }
                },
                minifyIcon: true
            },
            "work.fb.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "outlook.live.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                shiftRephraseIcon: shiftRephraseIcon
            },
            "outlook.office.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                shiftRephraseIcon: shiftRephraseIcon
            },
            "discord.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                shiftRephraseIcon: shiftRephraseIcon,
                minifyIcon: true
            },
            localhost: {
                pages: {
                    "/ginger-widget/quill-injector.html": {}
                },
                selectors: {
                    "[ginger-debug-ghostarea]": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    },
                    "[unittest-area]": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "business.facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "docs.google.com": {
                pages: {
                    "/document": {
                        rewriter: {
                            richText: "widget.rewriters.gdocs"
                        }
                    },
                    "/spreadsheets": {
                        disabled: true
                    }
                }
            },
            "instagram.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating",
                            plainText: "widget.rewriters.draft.textarea"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    }
                },
                injection: "injection/js/inject_script.min.js",
                shiftIcon: shiftIcon
            },
            "mail.google.com": {
                selectors: {
                    "textarea[name=to]": {
                        disabled: true
                    },
                    "textarea[name=cc]": {
                        disabled: true
                    },
                    "textarea[name=bcc]": {
                        disabled: true
                    }
                }
            },
            "chat.openai.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                minifyIcon: true,
                shiftIcon: {
                    x: -40,
                    y: 10
                }
            },
            "web.telegram.org": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                shiftIcon: {
                    x: 15,
                    y: 10
                },
                minifyIcon: true
            },
            "*": {
                selectors: {
                    "#advanced-search": {
                        disabled: true
                    },
                    ".cke_editable": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "translate.google": {
                disabled: true,
                name: "Google Translate"
            },
            "evernote.com": {
                disabled: true,
                name: "Evernote"
            },
            "quora.com": {
                disabled: true,
                name: "Quora"
            },
            "canva.com": {
                disabled: true,
                name: "Canva"
            },
            "pinterest.com": {
                disabled: true,
                name: "Pinterest"
            },
            "drive.google.com": {
                disabled: true,
                name: "Google Drive"
            },
            "hootsuite.com": {
                disabled: true,
                name: "Hoot Suite"
            },
            "onedrive.live.com": {
                disabled: true,
                name: "OneDrive"
            },
            "texteditor.nsspot.net": {
                disabled: true,
                name: "Text Editor for Google Drive"
            },
            "jsbin.com": {
                disabled: true,
                name: "JSBin"
            },
            "jsfiddle.net": {
                disabled: true,
                name: "JsFiddle"
            },
            "imperavi.com": {
                disabled: true,
                name: "Imperavi"
            },
            "miro.com": {
                disabled: true,
                name: "Miro"
            },
            "app.diagrams.net": {
                disabled: true,
                name: "App Diagrams"
            },
            "qualtrix.com": {
                isMiniRephrase: true
            }
        };
        var getLocation = function(href) {
            var match = href.match(/^([^:]+\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);
            return match && {
                href: href,
                protocol: match[1],
                host: match[2],
                hostname: match[3].replace(/^www\./, ""),
                port: match[4],
                pathname: match[5],
                search: match[6],
                hash: match[7]
            };
        };
        var isPossiblyReactArea = function(element) {
            var reactRootParent = $gingerWidgetJquery(element).closest("[data-reactroot]");
            if (reactRootParent.length) {
                return true;
            }
            return false;
        };
        var endsWith = function(str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        };
        var get = function(url, area) {
            if (!url && !area) {
                return settings;
            }
            if (!url) url = window.location.href;
            var parsedLocation = getLocation(url);
            var areaSettings = {
                rewriter: {
                    richText: "widget.rewriters.newFloating",
                    plainText: "widget.rewriters.textarea"
                },
                highlighter: {
                    richText: "widget.highlighters.floating",
                    plainText: "widget.highlighters.ghost"
                }
            };
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(area);
            var isReactArea = isPossiblyReactArea(area);
            if (parsedLocation && !/about:blank/i.test(url)) {
                for (var hostname in settings) {
                    if (hostname === "*" || endsWith(parsedLocation.hostname, hostname)) {
                        if (settings[hostname].disabled) {
                            return $gingerWidgetJquery.extend(settings[hostname], {
                                domainDisabled: true
                            });
                        }
                        if (settings[hostname].injection) {
                            $gingerWidgetJquery.extend(areaSettings, {
                                injection: settings[hostname].injection
                            });
                        }
                        if (typeof settings[hostname].isMiniRephrase !== "undefined") {
                            $gingerWidgetJquery.extend(areaSettings, {
                                isMiniRephrase: settings[hostname].isMiniRephrase
                            });
                        }
                        if (typeof settings[hostname].shiftIcon !== "undefined") {
                            $gingerWidgetJquery.extend(areaSettings, {
                                shiftIcon: settings[hostname].shiftIcon
                            });
                        }
                        if (typeof settings[hostname].shiftRephraseIcon !== "undefined") {
                            $gingerWidgetJquery.extend(areaSettings, {
                                shiftRephraseIcon: settings[hostname].shiftRephraseIcon
                            });
                        }
                        if (typeof settings[hostname].minifyIcon !== "undefined") {
                            $gingerWidgetJquery.extend(areaSettings, {
                                minifyIcon: settings[hostname].minifyIcon
                            });
                        }
                        if (settings[hostname].pages) {
                            for (var page in settings[hostname].pages) {
                                if (page === "*" || parsedLocation.href.indexOf(page) >= 0) {
                                    $gingerWidgetJquery.extend(true, areaSettings, settings[hostname].pages[page]);
                                }
                            }
                        }
                        if (area && settings[hostname].selectors) {
                            for (var selector in settings[hostname].selectors) {
                                if ($gingerWidgetJquery(area).is(selector)) {
                                    $gingerWidgetJquery.extend(true, areaSettings, settings[hostname].selectors[selector]);
                                }
                            }
                        }
                    }
                }
            }
            if (isReactArea) {
                if (isRTE) {
                    areaSettings.highlighter.richText = "widget.highlighters.floating";
                } else {
                    areaSettings.rewriter.plainText = "widget.rewriters.draft.textarea";
                    areaSettings.highlighter.plainText = "widget.highlighters.ghost";
                }
                if (!areaSettings.injection) areaSettings.injection = "injection/js/inject_script.min.js";
            }
            var result = areaSettings;
            if (isRTE) {
                result.highlighter = areaSettings.highlighter.richText;
                result.rewriter = areaSettings.rewriter.richText;
            } else {
                result.highlighter = areaSettings.highlighter.plainText;
                result.rewriter = areaSettings.rewriter.plainText;
            }
            return areaSettings;
        };
        return {
            get: get
        };
    }, []);
})();

gingerModule.load("widget.storage", function() {
    var eventScope = $gingerWidgetJquery("<eventScope>");
    var init = function() {
        gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(changes, namespace) {
            eventScope.trigger("change", changes, namespace);
        });
    };
    var set = function(key, value) {
        if (!key) return;
        var deferred = $gingerWidgetJquery.Deferred();
        var valueToSet = {};
        valueToSet[key] = value;
        try {
            gingerModule.get("gingerchromeext.browser").storage.sync.set(valueToSet, function() {
                deferred.resolve();
            });
        } catch (e) {
            console.warn("chrome.storage.sync.set is not supported", e);
            deferred.resolve();
        }
        return deferred.promise();
    };
    var get = function(key) {
        var deferred = $gingerWidgetJquery.Deferred();
        try {
            gingerModule.get("gingerchromeext.browser").storage.sync.get(key, function(result) {
                deferred.resolve(result[key]);
            });
        } catch (e) {
            console.warn("chrome.storage.sync.get is not supported", e);
            deferred.resolve();
        }
        return deferred.promise();
    };
    init();
    return {
        get: get,
        set: set,
        listen: eventScope
    };
}, []);

(function() {
    var module = gingerModule.load("widget.utils", function() {
        var generateUID = function() {
            var rnd = new Date().valueOf().toString() + Math.random().toString().substr(2, 10);
            return rnd;
        };
        var compareObjects = function(obj1, obj2) {
            return JSON.stringify(obj1) === JSON.stringify(obj2);
        };
        var getStyleOfObject = function(source) {
            var dom = source;
            var style;
            var returns = {};
            if (window.getComputedStyle) {
                var camelize = function(a, b) {
                    return b.toUpperCase();
                };
                style = window.getComputedStyle(dom, null);
                for (var i = 0, l = style.length; i < l; i++) {
                    var prop = style[i];
                    var camel = prop.replace(/\-([a-z])/g, camelize);
                    var val = style.getPropertyValue(prop);
                    returns[camel] = val;
                }
                return returns;
            }
            if (style = dom.currentStyle) {
                for (var prop in style) {
                    returns[prop] = style[prop];
                }
                return returns;
            }
            return source.css();
        };
        var isMouseEventOverElement = function(evt, elem) {
            elem = $gingerWidgetJquery(elem);
            var o = elem.offset();
            var w = elem.width();
            var h = elem.height();
            return evt.pageX >= o.left && evt.pageX <= o.left + w && evt.pageY >= o.top && evt.pageY <= o.top + h;
        };
        var isRichTextElement = function(element) {
            if (element && element.hasAttribute("contenteditable")) {
                return true;
            } else {
                return false;
            }
        };
        var merge = function(config, mergeConfig) {
            if (!config) config = {};
            for (var key in mergeConfig) {
                config[key] = mergeConfig[key];
            }
            return config;
        };
        var clone = function(o) {
            return JSON.parse(JSON.stringify(o));
        };
        var preFixRegex = /^[\s\-'"(\[:;,]+/;
        var postFixRegex = /[\s\-'")\]!?.:;,]+$/;
        var trimAndMatch = function(s) {
            var preFix = s.match(preFixRegex) || [ "" ];
            var postFix = s.match(postFixRegex) || [ "" ];
            return {
                text: s.replace(preFixRegex, "").replace(postFixRegex, ""),
                post: postFix[0],
                pre: preFix[0]
            };
        };
        var diffString = function(oldStr, newStr) {
            var preCommon = 0;
            var postCommon;
            for (var i = 0; i < newStr.length && i < oldStr.length; i++) {
                if (oldStr.substring(0, i) === newStr.substring(0, i)) {
                    preCommon = i;
                } else {
                    break;
                }
            }
            for (var i = 0; i < newStr.length && i < oldStr.length; i++) {
                if (oldStr.substring(oldStr.length - i, oldStr.length) === newStr.substring(newStr.length - i, newStr.length)) {
                    postCommon = i;
                } else {
                    break;
                }
            }
            return {
                preCommon: preCommon,
                postCommon: postCommon,
                diff: newStr.length - oldStr.length,
                from: preCommon,
                to: oldStr.length - postCommon
            };
        };
        var getTextNodesUnder = function(el) {
            var n, a = [], walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            while (n = walk.nextNode()) {
                a.push(n);
            }
            return a;
        };
        var getNodeFragmentsOfIndex = function(element, from, to) {
            if (typeof to == "undefined") to = from;
            var textOffset = 0;
            var result = [];
            var textNodes = getTextNodesUnder(element);
            if (!textNodes.length) {
                var tn = document.createTextNode("");
                element.appendChild(tn);
                return [ {
                    node: tn,
                    from: 0,
                    to: 0
                } ];
            }
            for (var tni = 0; tni < textNodes.length; tni++) {
                var fragment = textNodes[tni].nodeValue;
                if (textOffset + fragment.length < from) {
                    textOffset = textOffset + fragment.length;
                    continue;
                }
                var fragmentToPush = {
                    node: textNodes[tni],
                    from: Math.max(0, from - textOffset),
                    to: Math.min(fragment.length, to - textOffset)
                };
                if (fragmentToPush.from !== fragmentToPush.to) {
                    result.push(fragmentToPush);
                }
                if (textOffset + fragment.length > to) break;
                textOffset = textOffset + fragment.length;
            }
            return result;
        };
        var getNodeOffsetOfIndex = function(element, from, to) {
            if (typeof to == "undefined") to = from;
            var textOffset = 0;
            var result = {
                startNode: null,
                startNodeOffset: 0,
                endNode: null,
                endNodeOffset: 0
            };
            var textNodes = gingerModule.get("widget.utils").getTextNodesUnder(element);
            if (from === 0) {
                result.startNode = textNodes[0];
                result.startNodeOffset = 0;
            }
            for (var tni = 0; tni < textNodes.length; tni++) {
                var fragment = textNodes[tni].nodeValue;
                if (from >= textOffset && from <= textOffset + fragment.length) {
                    if (fragment.length === from - textOffset && textNodes[tni + 1]) {
                        tniOffset = 1;
                        while (textNodes.length > tni + tniOffset && textNodes[tni + tniOffset].nodeValue.length == 0) {
                            tniOffset++;
                        }
                        result.startNode = textNodes[tni + tniOffset];
                        result.startNodeOffset = 0;
                    } else {
                        result.startNode = textNodes[tni];
                        result.startNodeOffset = from - textOffset;
                    }
                }
                if (to > textOffset && to <= textOffset + fragment.length) {
                    result.endNode = textNodes[tni];
                    result.endNodeOffset = to - textOffset;
                }
                textOffset = textOffset + fragment.length;
            }
            return result;
        };
        var cloneRepresentation = function(repr) {
            if (!repr || !repr.length) return repr;
            var cloned = [];
            for (var i = 0; i < repr.length; i++) {
                cloned.push({
                    text: repr[i].text,
                    startsAt: repr[i].startsAt,
                    endsAt: repr[i].endsAt,
                    activeSentence: repr[i].activeSentence,
                    id: repr[i].id,
                    preLineBreakCount: repr[i].preLineBreakCount,
                    postLineBreakCount: repr[i].postLineBreakCount,
                    words: repr[i].words,
                    correction: repr[i].correction
                });
                if (repr[i].ignored) cloned[cloned.length - 1].ignored = repr[i].ignored;
                if (repr[i].charLimited) cloned[cloned.length - 1].charLimited = repr[i].charLimited;
            }
            return cloned;
        };
        var getElementZ = function(e) {
            var z = window.document.defaultView.getComputedStyle(e, null).getPropertyValue("z-index");
            if (isNaN(z)) return 1;
            return z;
        };
        var findHighestZIndex = function(node) {
            var zindex = 0;
            var current = node;
            if (node instanceof $gingerWidgetJquery) {
                current = node[0];
            }
            try {
                while (current.parentNode) {
                    var currentZindex = getElementZ(current);
                    if (currentZindex > zindex) zindex = parseInt(currentZindex);
                    current = current.parentNode;
                }
            } catch (e) {}
            return zindex;
        };
        function isCKEditor(element) {
            return element?.classList?.contains("ck-editor__editable");
        }
        function isNotion() {
            return /notion.so/.test(location.hostname);
        }
        var isGoogleDocs = function() {
            return /docs.google.com\/document/.test(location.href);
        };
        var getDomainOfUrl = function(url) {
            if (/docs.google.com/.test(url)) {
                try {
                    var parsedUrl = new URL(url);
                    var pathParts = parsedUrl.pathname.split("/");
                    return parsedUrl.hostname + "/" + pathParts[1];
                } catch (e) {
                    return url.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
                }
            }
            return url.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
        };
        function expandSelectionToHyphenatedWord() {
            const selection = window.getSelection();
            const range = selection.getRangeAt(0);
            const selectedText = selection.toString();
            const textNode = range.startContainer;
            const textContent = textNode.textContent;
            const selectionStartIndex = range.startOffset;
            const selectionEndIndex = range.endOffset;
            const wordBoundaries = /[\s,.!?;:"'()]+/;
            const words = textContent.split(wordBoundaries);
            let index = 0;
            let wordIndices = words.map(word => {
                let startIndex = textContent.indexOf(word, index);
                index = startIndex + word.length;
                return {
                    word: word,
                    startIndex: startIndex,
                    endIndex: index
                };
            });
            const wordWithHyphen = wordIndices.find(({
                word,
                startIndex,
                endIndex
            }) => {
                return word.includes(selectedText) && word.includes("-") && selectionStartIndex >= startIndex && selectionEndIndex <= endIndex;
            });
            if (wordWithHyphen) {
                range.setStart(textNode, wordWithHyphen.startIndex);
                range.setEnd(textNode, wordWithHyphen.endIndex);
                selection.removeAllRanges();
                selection.addRange(range);
            }
        }
        function getSelectionSurroundingText(wordCountBefore = 5, wordCountAfter = 5) {
            let selection = window.getSelection();
            const initialRange = selection.getRangeAt(0).cloneRange();
            if (!selection.rangeCount) {
                return null;
            }
            expandSelectionToHyphenatedWord();
            const range = selection.getRangeAt(0);
            const selectedText = selection.toString().trim();
            selection.modify("extend", "backward", "sentence");
            const startTextAsArray = selection.toString().trim().split(/\s+/);
            if (selectedText === startTextAsArray[startTextAsArray.length - 1]) {
                startTextAsArray.pop();
            }
            const fiveWordsBefore = startTextAsArray.slice(-wordCountBefore);
            const startText = fiveWordsBefore.join(" ").trim();
            selection.removeAllRanges();
            selection.addRange(range);
            selection.modify("extend", "forward", "sentence");
            const endTextAsArray = selection.toString().split(/\s+/);
            const theWordAndFiveWordsAfter = endTextAsArray.slice(0, wordCountAfter + 1);
            const endText = theWordAndFiveWordsAfter.join(" ").trim();
            selection.removeAllRanges();
            selection.addRange(initialRange);
            let contextSegment = startText + " " + endText;
            if (startText[startText.length - 1] === "-") {
                contextSegment = startText + endText;
            }
            return contextSegment;
        }
        return {
            merge: merge,
            getNodeOffsetOfIndex: getNodeOffsetOfIndex,
            getNodeFragmentsOfIndex: getNodeFragmentsOfIndex,
            generateUID: generateUID,
            isMouseEventOverElement: isMouseEventOverElement,
            clone: clone,
            cloneRepresentation: cloneRepresentation,
            compareObjects: compareObjects,
            trimAndMatch: trimAndMatch,
            diffString: diffString,
            isRichTextElement: isRichTextElement,
            getTextNodesUnder: getTextNodesUnder,
            getStyleOfObject: getStyleOfObject,
            findHighestZIndex: findHighestZIndex,
            isNotion: isNotion,
            isCKEditor: isCKEditor,
            isGoogleDocs: isGoogleDocs,
            getDomainOfUrl: getDomainOfUrl,
            getSelectionSurroundingText: getSelectionSurroundingText
        };
    });
})();

(function() {
    var module = gingerModule.load("widget", function() {
        var config;
        var eventScope = $gingerWidgetJquery({});
        var inputs = [];
        var wordSpellMistakes = [];
        var sentenceMistakes = [];
        var enabled = true;
        var representation = [];
        var addInput = function(input) {
            var gingerInputInstance = new gingerModule.get("widget.inputHandler", true);
            var gingerInput = gingerInputInstance().init(input);
            inputs.push(gingerInput);
            eventScope.trigger("input.added", gingerInput);
        };
        var getInputs = function() {
            return inputs;
        };
        var init = function(initConfig) {
            if (initConfig.apiKey) gingerModule.get("widget.config").set("apiKey", initConfig.apiKey);
            if (initConfig.userId) gingerModule.get("widget.config").set("userId", initConfig.userId);
            if (initConfig.widgetUid) gingerModule.get("widget.config").set("widgetUid", initConfig.widgetUid);
            if (initConfig.apiKey) gingerModule.get("widget.config").set("apiKey", initConfig.apiKey);
            if (initConfig.affId) gingerModule.get("widget.config").set("affId", initConfig.affId);
            if (initConfig.dialect) gingerModule.get("widget.config").set("dialect", initConfig.dialect);
            if (initConfig.version) gingerModule.get("widget.config").set("version", initConfig.version);
            if (initConfig.source) gingerModule.get("widget.config").set("source", initConfig.source);
            if (initConfig.charLimit) gingerModule.get("widget.config").set("charLimit", initConfig.charLimit);
            if (gingerModule.get("widget.utils").isGoogleDocs()) {
                gingerModule.get("widget.googledocs").init();
                setTimeout(() => {
                    gingerModule.get("widget.googledocs").parseText();
                });
                var targetNode = document.querySelector(".kix-rotatingtilemanager-content");
                var filteredMutationsList;
                var observer = new MutationObserver((mutationsList, observer) => {
                    filteredMutationsList = mutationsList.filter(el => typeof el.target.parentNode.className === "string" && !el.target.parentNode.className.includes("kix-canvas-tile-selection") || el.addedNodes.length && el.type === "childList" && el.target.nodeName !== "svg");
                    if (filteredMutationsList.length) {
                        setTimeout(() => {
                            gingerModule.get("widget.googledocs").parseText();
                            inputs[0]?.events.listen.trigger("inputchange");
                        });
                    }
                });
                observer.observe(targetNode, {
                    attributes: false,
                    childList: true,
                    subtree: true
                });
                var secondObserver = new MutationObserver((mutationsList, observer) => {
                    setTimeout(() => {
                        gingerModule.get("widget.googledocs").parseText();
                        inputs[0]?.events.listen.trigger("inputchange");
                    });
                });
                secondObserver.observe(targetNode, {
                    attributes: true,
                    attributeFilter: [ "style" ]
                });
            }
            gingerModule.get("widget.inputFinder").listen.on("new", function(event, input) {
                addInput(input);
            });
            $gingerWidgetJquery(document).ready(function() {
                gingerModule.get("widget.inputFinder").init(initConfig.inputFinder);
            });
            if (console && console.log) console.log("Running Ginger Widget v" + gingerModule.get("widget.config").get("version"));
            if (gingerModule.get("widget.utils").isNotion()) {
                document.removeEventListener("click", handleNotionFieldsOnClick);
                document.addEventListener("click", handleNotionFieldsOnClick);
                document.removeEventListener("keydown", handleNotionFieldsOnKeyDown);
                document.addEventListener("keydown", handleNotionFieldsOnKeyDown);
            }
        };
        var handleNotionFieldsOnClick = function($event) {
            setTimeout(() => {
                if ($event.target && $event.target.className === "notranslate" && inputs.length) {
                    inputs.forEach(function(input) {
                        if (input.element === $event.target) {
                            input.events.listen.trigger("inputchange");
                            input.events.listen.trigger("focus");
                        }
                    });
                }
            });
        };
        var handleNotionFieldsOnKeyDown = function() {
            setTimeout(() => {
                var ds = getSelectionStart();
                if (ds.className === "notranslate" && inputs.length) {
                    inputs.forEach(function(input) {
                        if (input.element === ds) {
                            input.events.listen.trigger("inputchange");
                        }
                    });
                }
            });
        };
        function getSelectionStart() {
            return document.getSelection()?.anchorNode?.parentNode;
        }
        var findInputIndexById = function(id) {
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].id === id) {
                    return i;
                }
            }
            return null;
        };
        var removeInput = function(id) {
            var inputIndex = findInputIndexById(id);
            var inputToDestroy = inputs[inputIndex];
            if (inputIndex !== null) {
                inputToDestroy.destroy();
                inputs.splice(inputIndex, 1);
            }
            eventScope.trigger("input.removed", inputToDestroy);
        };
        var disable = function() {
            enabled = false;
            while (inputs.length) {
                removeInput(inputs[0].id);
            }
        };
        var enable = function(cb) {
            enabled = true;
            gingerModule.get("widget.inputFinder").refresh(cb);
        };
        var isEnabled = function() {
            return enabled;
        };
        return {
            getInputs: getInputs,
            listen: eventScope,
            disable: disable,
            enable: enable,
            remove: removeInput,
            isEnabled: isEnabled,
            init: init
        };
    }, [ "widget.inputFinder", "widget.inputHandler", "widget.phraseService", "widget.api", "widget.config", "widget.report", "widget.licenseLimits", "widget.googledocs" ]);
})();

if (!gingerModule) {
    var gingerModule = function(moduleName, module) {
        var modules = {};
        var appdependencies = null;
        var isModuleLoaded = function(moduleName) {
            return modules[moduleName] && modules[moduleName].isInited;
        };
        var haveAllDependenciesLoaded = function(deps) {
            if (!deps) return true;
            var depsHaveLoaded = true;
            for (var i = 0; i < deps.length; i++) {
                if (!isModuleLoaded(deps[i])) {
                    depsHaveLoaded = false;
                }
            }
            return depsHaveLoaded;
        };
        var initModule = function(moduleName) {
            var module = modules[moduleName];
            module.module = module.classCache();
            module.isInited = true;
        };
        var tryInitModule = function(moduleName) {
            var module = modules[moduleName];
            if (haveAllDependenciesLoaded(module.deps)) {
                initModule(moduleName);
                return true;
            } else {
                return false;
            }
        };
        var load = function(moduleName, module, deps) {
            if (modules[moduleName]) {
                if (console && console.log) console.log("Module already loaded: " + moduleName, "...overwriting module");
            }
            modules[moduleName] = {
                classCache: module,
                isInited: false,
                deps: deps
            };
            var successfullyInited = true;
            while (successfullyInited) {
                successfullyInited = false;
                for (var key in modules) {
                    if (!modules[key].isInited) {
                        var initResult = tryInitModule(key);
                        if (!successfullyInited) {
                            successfullyInited = initResult;
                        }
                    }
                }
            }
            return modules[moduleName];
        };
        var get = function(moduleName, returnClass) {
            if (typeof modules[moduleName] === "undefined") {
                throw "Module '" + moduleName + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (returnClass) return modules[moduleName].classCache; else return modules[moduleName].module;
        };
        var appLoaded = function() {
            for (var key in modules) {
                modules[key] = modules[key]();
            }
        };
        var debug = function(moduleName) {
            if (!modules[moduleName]) {
                console.log(moduleName, "not added to project or has not been loaded");
                return false;
            } else if (!modules[moduleName].isInited) {
                console.log("module ", moduleName, "not loaded, because");
                var deps = modules[moduleName].deps;
                if (deps.length) {
                    var hasEveryThingLoaded = true;
                    for (var i = 0; i < deps.length; i++) {
                        var dep = deps[i];
                        hasEveryThingLoaded = hasEveryThingLoaded && debug(dep);
                    }
                    return hasEveryThingLoaded;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: load,
            get: get,
            debug: debug
        };
    }();
}

(function(angular) {
    angular.module("gingerchromeext.popup", [ "ui.router", "gingerchromeext.popup.config", "gingerchromeext.popup.home", "gingerchromeext.popup.siteBlackList", "gingerchromeext.popup.switch", "gingerchromeext.popup.auth", "gingerchromeext.popup.login", "gingerchromeext.popup.storage", "gingerchromeext.popup.notsupported", "gingerchromeext.popup.synonympopup", "gingerchromeext.popup.favicon", "gingerchromeext.popup.report", "gingerchromeext.popup.backgroundConnector", "gingerchromeext.popup.external", "gingerchromeext.popup.rephrase", "gingerchromeext.popup.banners", "gingerchromeext.popup.templates" ]).config([ "$httpProvider", function($httpProvider) {
        $httpProvider.defaults.withCredentials = false;
    } ]).config([ "$sceDelegateProvider", function($sceDelegateProvider) {
        $sceDelegateProvider.resourceUrlWhitelist([ "self", "https://**gingersoftware.com/**" ]);
    } ]).config([ "$locationProvider", "$stateProvider", "$httpProvider", "$urlRouterProvider", "$urlMatcherFactoryProvider", function($locationProvider, $stateProvider, $httpProvider, $urlRouterProvider, $urlMatcherFactoryProvider) {
        $locationProvider.hashPrefix("!");
        $stateProvider.state("external", {
            url: "/external",
            controller: "externalController",
            resolve: {
                favicon: [ "faviconFactory", function(faviconFactory) {
                    return faviconFactory.retrieveCurrentFaviconUrl();
                } ],
                config: [ "configFactory", "$q", function(configFactory, $q) {
                    var deferred = $q.defer();
                    configFactory.retrieve().then(function(res) {
                        deferred.resolve();
                    }, function() {
                        deferred.reject();
                    });
                    return deferred.promise;
                } ],
                gaFields: [ "reportingFactory", "$q", function(reportingFactory, $q) {
                    var deferred = $q.defer();
                    reportingFactory.retrieve().then(function() {
                        deferred.resolve();
                    }, function() {
                        deferred.reject();
                    });
                    return deferred.promise;
                } ]
            }
        }).state("external.login", {
            url: "^/login",
            templateUrl: "partials/login.partial.html",
            controller: "loginController"
        }).state("supported", {
            url: "/supported",
            abstract: true,
            resolve: {
                favicon: [ "faviconFactory", function(faviconFactory) {
                    return faviconFactory.retrieveCurrentFaviconUrl();
                } ],
                shouldBeSupported: [ "siteBlackListFactory", "configFactory", "backgroundConnectorFactory", "$q", "$state", function(siteBlackListFactory, configFactory, backgroundConnectorFactory, $q, $state) {
                    var deferred = $q.defer();
                    siteBlackListFactory.getCurrentHost().then(function(currentHost) {
                        deferred.resolve();
                    });
                    return $q.promise;
                } ],
                config: [ "configFactory", "$q", function(configFactory, $q) {
                    var deferred = $q.defer();
                    configFactory.retrieve().then(function() {
                        deferred.resolve();
                    }, function() {
                        deferred.reject();
                    });
                    return deferred.promise;
                } ],
                gaFields: [ "reportingFactory", "$q", function(reportingFactory, $q) {
                    var deferred = $q.defer();
                    reportingFactory.retrieve().then(function() {
                        deferred.resolve();
                    }, function() {
                        deferred.reject();
                    });
                    return deferred.promise;
                } ]
            }
        }).state("supported.home", {
            url: "/home",
            templateUrl: "partials/home.partial.html",
            controller: "homeController"
        }).state("supported.exceeded", {
            url: "/exceeded",
            templateUrl: "modules/banners/partials/limit-exceeded.partial.html",
            controller: "bannersController"
        }).state("supported.approaching", {
            url: "/approaching",
            templateUrl: "modules/banners/partials/limit-approaching.partial.html",
            controller: "bannersController"
        }).state("supported.floatingGActive", {
            url: "/fgactive",
            templateUrl: "modules/banners/partials/floatingG-active.partial.html",
            controller: "bannersController"
        }).state("supported.floatingGSignin", {
            url: "/fgsignin",
            templateUrl: "modules/banners/partials/floatingG-signin.partial.html",
            controller: "bannersController"
        }).state("notsupported", {
            url: "/notsupported",
            templateUrl: "partials/notsupported.partial.html",
            controller: "notsupportedController",
            resolve: {
                favicon: [ "faviconFactory", function(faviconFactory) {
                    return faviconFactory.retrieveCurrentFaviconUrl();
                } ],
                shouldBeSupported: [ "siteBlackListFactory", "backgroundConnectorFactory", "configFactory", "$q", "$state", function(siteBlackListFactory, backgroundConnectorFactory, configFactory, $q, $state) {
                    var deferred = $q.defer();
                    siteBlackListFactory.getCurrentHost().then(function(currentHost) {
                        backgroundConnectorFactory.call({
                            module: "gingerchromeext.background.nonSupportedSites",
                            callFunction: "isUrlEnabled",
                            callArgs: [ currentHost ]
                        }, function(isSupported) {
                            if (!isSupported) {
                                deferred.resolve();
                            } else {
                                $state.go("supported.home");
                                deferred.reject();
                            }
                        });
                    });
                    return $q.promise;
                } ],
                config: [ "configFactory", "$q", function(configFactory, $q) {
                    var deferred = $q.defer();
                    configFactory.retrieve().then(function() {
                        deferred.resolve();
                    }, function() {
                        deferred.reject();
                    });
                    return deferred.promise;
                } ],
                gaFields: [ "reportingFactory", "$q", function(reportingFactory, $q) {
                    var deferred = $q.defer();
                    reportingFactory.retrieve().then(function() {
                        deferred.resolve();
                    }, function() {
                        deferred.reject();
                    });
                    return deferred.promise;
                } ]
            }
        });
        $urlRouterProvider.otherwise("/external");
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.backgroundConnector", []);

angular.module("gingerchromeext.popup.banners", []);

angular.module("gingerchromeext.popup.external", []);

angular.module("gingerchromeext.popup.favicon", []);

angular.module("gingerchromeext.popup.home", []);

angular.module("gingerchromeext.popup.login", []);

angular.module("gingerchromeext.popup.notsupported", []);

(function(angular) {
    angular.module("gingerchromeext.popup.rephrase", []);
})(window.angular);

angular.module("gingerchromeext.popup.report", []);

angular.module("gingerchromeext.popup.auth", []);

angular.module("gingerchromeext.popup.siteBlackList", []);

angular.module("gingerchromeext.popup.storage", []);

angular.module("gingerchromeext.popup.switch", []);

angular.module("gingerchromeext.popup.synonympopup", []);

gingerModule.load("gingerchromeext.browser", function() {
    return chrome;
});

(function(angular) {
    angular.module("gingerchromeext.popup.backgroundConnector").factory("backgroundConnectorFactory", [ "$q", function($q) {
        var call = function(config, cb) {
            gingerModule.get("gingerchromeext.browser").runtime.sendMessage(config, function(result, a, b) {
                if (cb) cb(result);
            });
        };
        var callPromise = function(config) {
            var deferred = $q.defer();
            config.promise = true;
            call(config, function(callBackResult) {
                if (callBackResult.rejected) {
                    deferred.reject(callBackResult.result);
                } else {
                    deferred.resolve(callBackResult.result);
                }
            });
            return deferred.promise;
        };
        var proxy = function(config) {
            var proxyFunction = function(arg, cb) {
                if (config.promise) {
                    config.callArgs = [];
                    for (var ai = 0; ai < arguments.length; ai++) {
                        config.callArgs.push(arguments[ai]);
                    }
                    return callPromise(config);
                } else {
                    config.callArgs = [ arg ];
                    return call(config, cb);
                }
            };
            return proxyFunction;
        };
        return {
            call: call,
            callPromise: callPromise,
            proxy: proxy
        };
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.banners").controller("bannersController", [ "$scope", "configFactory", function($scope, configFactory) {
        $scope.config = configFactory.get();
        $scope.banners = {};
        var closeBtnsContainer = document.querySelector(".frame-banner__content");
        if (closeBtnsContainer) {
            closeBtnsContainer.addEventListener("click", function(event) {
                if (event.target.classList.contains("close-iframe-btn")) {
                    var message = JSON.stringify({
                        action: "close"
                    });
                    top.postMessage(message, "*");
                }
            });
        }
        $scope.banners.postMessage = function(data) {
            if (!data) {
                data = {};
            }
            data.type = "floatingGContentPopup";
            data.promise = "resolved";
            window.parent.postMessage(data, "*");
        };
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.config", []).factory("configFactory", [ "backgroundConnectorFactory", "$rootScope", "$q", function(backgroundConnectorFactory, $rootScope, $q) {
    var config = {};
    $rootScope.config = config;
    var retrieve = function() {
        var deferred = $q.defer();
        backgroundConnectorFactory.call({
            module: "gingerchromeext.background.config",
            callFunction: "get"
        }, function(result) {
            if (result) {
                set(result);
            }
            deferred.resolve(config);
        });
        return deferred.promise;
    };
    var set = function(property, value) {
        if (angular.isUndefined(value)) {
            config = property;
        } else {
            config[property] = value;
        }
        $rootScope.config = config;
        return config;
    };
    var get = function(property) {
        return angular.isDefined(property) ? config[property] : config;
    };
    return {
        get: get,
        set: set,
        retrieve: retrieve
    };
} ]);

(function(angular) {
    angular.module("gingerchromeext.popup.external").controller("externalController", [ "$scope", "siteBlackListFactory", "faviconFactory", "sessionFactory", "configFactory", "$state", "$timeout", "reportingFactory", "storageFactory", function($scope, siteBlackListFactory, faviconFactory, sessionFactory, configFactory, $state, $timeout, reportingFactory, storageFactory) {
        $scope.config = configFactory.get();
        var init = function() {
            $state.go("supported.home");
        };
        init();
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.favicon").factory("faviconFactory", [ "$q", "$sce", function($q, $sce) {
        var faviconUrl = null;
        var getFaviconUrl = function() {
            return faviconUrl;
        };
        var retrieveCurrentFaviconUrl = function() {
            var deferred = $q.defer();
            try {
                gingerModule.get("gingerchromeext.browser").tabs.query({
                    active: true,
                    currentWindow: true
                }, function(tabs) {
                    if (tabs[0].favIconUrl && tabs[0].favIconUrl.match(/^https?/i)) {
                        faviconUrl = $sce.trustAsResourceUrl(tabs[0].favIconUrl);
                    } else {
                        faviconUrl = null;
                    }
                    deferred.resolve(faviconUrl);
                });
            } catch (e) {
                console.error("Failed to retrieve favicon for active tab", e);
                deferred.resolve(faviconUrl);
            }
            return deferred.promise;
        };
        return {
            getFaviconUrl: getFaviconUrl,
            retrieveCurrentFaviconUrl: retrieveCurrentFaviconUrl
        };
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.home").controller("homeController", [ "sessionFactory", "backgroundConnectorFactory", "configFactory", "$scope", "$state", "$http", "$timeout", "faviconFactory", "storageFactory", "siteBlackListFactory", "reportingFactory", "synonympopupFactory", "$rootScope", "$window", "rephraseService", function(sessionFactory, backgroundConnectorFactory, configFactory, $scope, $state, $http, $timeout, faviconFactory, storageFactory, siteBlackListFactory, reportingFactory, synonympopupFactory, $rootScope, $window, rephraseService) {
        var gingerInput = null;
        var eventScope = $rootScope.$new(true);
        var selectionContent = null;
        var ajaxGraceTimeout = null;
        var activeRepIndex = 0;
        var reprLength = 0;
        var overFlowWrapper;
        var premiumCharLimitReachedEventSent = false;
        var gaFields = reportingFactory.get();
        var config = configFactory.get();
        var isNotSupportedSite = false;
        var isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
        var showDownloadToolbar = false;
        var showSignInToolbarForEnable = false;
        var showSignInToolbarForDblClick = false;
        var wordLimitForRephrase;
        backgroundConnectorFactory.call({
            module: "gingerchromeext.background.config",
            callFunction: "get"
        }, function(config) {
            wordLimitForRephrase = config.wordsLimitRephrase;
        });
        $scope.gaFields = gaFields;
        $scope.config = config;
        $scope.isMac = isMac;
        var wrapCharLimitedPart = function(el, repr, fromSentence) {
            var tns = gingerModule.get("widget.utils").getTextNodesUnder(el);
            var tnsOffset = 0;
            for (var tnsi = 0; tnsi < tns.length; tnsi++) {
                var tnsLen = tns[tnsi].nodeValue.length;
                if (tnsOffset + tnsLen > repr[fromSentence].startsAt) {
                    var r = document.createRange();
                    r.setStart(tns[tnsi], repr[fromSentence].startsAt - tnsOffset);
                    r.setEnd(tns[tns.length - 1], tns[tns.length - 1].nodeValue.length);
                    overFlowWrapper = document.createElement("gwofw");
                    overFlowWrapper.appendChild(r.extractContents());
                    r.insertNode(overFlowWrapper);
                    return;
                }
                tnsOffset += tnsLen;
            }
        };
        var detectLang = function(word, next) {
            $gingerWidgetJquery.ajax({
                url: `${configFactory.get("urlDetectLang")}?text=${word}`,
                method: "GET",
                responseType: "json",
                accept: "*/*",
                headers: {
                    "X-Reverso-Origin": configFactory.get("extOrigin")
                }
            }).then(function resolve(res) {
                next(res);
            }, function reject() {});
        };
        var contentCache;
        var handleCharLimit = function(el) {
            if ($scope.session.license !== 2) {
                if ($scope.main.charcount > $scope.main.charLimit) {
                    if (!premiumCharLimitReachedEventSent) {
                        reportingFactory.reporterGA4({
                            event: gaFields.GAEvent.premiumDisplay,
                            category: gaFields.GACategory.Premium,
                            trigger: gaFields.GATrigger.limitReachedText,
                            interface: gaFields.GAInterface.miniWriter
                        });
                        premiumCharLimitReachedEventSent = true;
                    }
                } else {
                    premiumCharLimitReachedEventSent = false;
                }
            }
            if (document.querySelector("#mini-writer") && document.querySelector("#mini-writer").innerHTML === contentCache) return;
            var cursorPosition;
            if (el === document.activeElement) {
                cursorPosition = document.createElement("gwcp");
                var sel = window.getSelection();
                sel.getRangeAt(0).insertNode(cursorPosition);
            }
            $gingerWidgetJquery(el).find("[style]").removeAttr("style");
            $gingerWidgetJquery(el).find("gwofw").contents().unwrap();
            var repr = gingerInput.getRepresentation();
            var wordsCount = gingerInput.getWordsCount();
            $scope.main.charcount = repr.length ? repr[repr.length - 1].endsAt : 0;
            $scope.main.wordsCount = wordsCount;
            for (var i = 0; i < repr.length; i++) {
                if (repr[i].charLimited) {
                    wrapCharLimitedPart(el, repr, i);
                    break;
                }
            }
            var cursorPosition = document.querySelector("gwcp");
            if (cursorPosition) {
                var tn = document.createTextNode("");
                cursorPosition.parentNode.insertBefore(tn, cursorPosition);
                var r = document.createRange();
                r.setStart(tn, 0);
                r.setEnd(tn, 0);
                r.collapse(true);
                var sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(r);
                cursorPosition.parentNode.removeChild(cursorPosition);
            }
            contentCache = document.querySelector("#mini-writer").innerHTML;
        };
        var initGingerWidget = function() {
            backgroundConnectorFactory.callPromise({
                module: "gingerchromeext.background.correctionLimits",
                callFunction: "get"
            }).then(function(correctionLimits) {
                $scope.main.charLimit = $scope.session.license === 2 ? correctionLimits.premium : correctionLimits.free;
                gingerModule.get("widget").init({
                    inputFinder: {
                        selector: null
                    },
                    charLimit: $scope.main.charLimit,
                    version: configFactory.get("clientVersion"),
                    apiKey: configFactory.get("apiKey"),
                    source: configFactory.get("source"),
                    widgetUid: configFactory.get("widgetUid"),
                    dialect: configFactory.get("dialect")
                });
                gingerModule.get("widget.inputFinder").feed("#mini-writer");
                gingerModule.get("widget.licenseLimits").retrieveApprovalsLeft(true);
                gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft();
            });
            gingerModule.get("widget").listen.on("input.added", function() {
                gingerInput = gingerModule.get("widget").getInputs().pop();
                if (gingerInput) {
                    gingerInput.markForeign(false, true);
                }
                handleCharLimit(gingerInput.element);
                gingerInput.events.listen.on("inputchange", function() {
                    handleCharLimit(gingerInput.element);
                    $scope.main.ui.writerHasValue = angular.element("#mini-writer").get(0).innerText !== "";
                });
                gingerInput.element.addEventListener("mouseup", function() {
                    $timeout(function() {
                        var selectedText = getSelectedText();
                        if (selectedText) eventScope.$emit("text.selected", getSelectedText()); else eventScope.$emit("text.selected", null);
                    });
                });
                gingerInput.stats.listen.on("changed", handleStatsChanged);
                if (angular.element("#mini-writer").get(0).innerText !== "") $scope.main.ui.showCopyButton = true;
            });
            gingerModule.get("widget.correctionBubble").listen.on("show", function(event, data) {
                var correctionsQty = data.shownCorrections;
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.suggestionDisplay,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: data.target,
                    multiEvents: correctionsQty
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function(event, data) {
                var correctionsQty = data.shownCorrections;
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.suggestionApproveClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.miniWriter,
                    multiEvents: correctionsQty
                });
                backgroundConnectorFactory.callPromise({
                    module: "gingerchromeext.background.statisticService",
                    callFunction: "increase",
                    callArgs: [ "correction", correctionsQty ]
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {});
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.suggestionApproveClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.miniWriter
                });
                backgroundConnectorFactory.callPromise({
                    module: "gingerchromeext.background.statisticService",
                    callFunction: "increase",
                    callArgs: [ "correction" ]
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function() {
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.suggestionIgnoreClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.miniWriter
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function(event, data) {
                var correctionsQty = data.shownCorrections;
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.suggestionIgnoreClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.miniWriter,
                    multiEvents: correctionsQty
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("addedtodict.mistake", function() {});
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
                $scope.main.ui.openAuthPage();
            });
        };
        var getSelectedText = function() {
            if (!document.getElementById("mini-writer").contains(window.getSelection() && window.getSelection().focusNode)) return;
            var range = window.getSelection().getRangeAt(0);
            var commonAncestorContainer = range.commonAncestorContainer;
            var selectedText = commonAncestorContainer.innerText ? commonAncestorContainer.innerText : range.toString();
            selectedText = selectedText.trim();
            if (selectedText && selectedText !== "" && !/\s/g.test(selectedText)) {
                return selectedText;
            }
        };
        $scope.main = {
            charLimit: 600,
            host: "localhost",
            blackList: [],
            isGingerEnabled: true,
            isSiteSupported: true,
            hasActiveCampaign: false,
            settings: {
                doubleClickEnabled: true,
                dialect: "UK"
            },
            ui: {
                userListOpen: false,
                dialectListOpen: false,
                showCopyButton: false,
                rephraseOpen: false,
                showSelectionPopup: false,
                previousDisabled: true,
                nextDisabled: true
            }
        };
        $scope.config = configFactory.get();
        $scope.session = {};
        $scope.main.premiumBanner = {
            oneDay: 1e3 * 10,
            numberOfDays: 3,
            isShow: false,
            numberOfShows: 0
        };
        $scope.main.premiumBanner.hide = function() {
            $scope.main.premiumBanner.isShow = false;
            var now = new Date().getTime();
            storageFactory.set("premiumBannerDisplayTimer", now + $scope.main.premiumBanner.oneDay * $scope.main.premiumBanner.numberOfDays);
            storageFactory.set("premiumBannerDisplayNumberOfShows", $scope.main.premiumBanner.numberOfShows + 1);
        };
        $scope.main.premiumBanner.show = function() {
            $scope.main.premiumBanner.isShow = true;
        };
        $scope.main.ui.openLink = function(url) {
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: url,
                active: true
            });
        };
        $scope.main.ui.captalizeFilter = function(str) {
            return $filter("capitalize")(str);
        };
        $scope.main.reporterGA = function(category, action, label, value) {};
        $scope.main.reporterGA4 = function(params) {
            reportingFactory.reporterGA4(params);
        };
        $scope.main.rephrase = {
            selectedIndex: null,
            result: null,
            loading: false,
            masterPhrase: null,
            limited: false
        };
        $scope.main.rephrase.step = function(dir) {
            if (dir === "backward" && activeRepIndex < 1 || dir === "forward" && activeRepIndex >= reprLength) return;
            var sentence = rephraseService.stepRephraseActiveSentence(dir === "backward" ? "backward" : "forward");
            $scope.main.rephrase.selectedIndex = sentence.activeRephrase;
            rephraseActiveSentence();
        };
        $scope.main.rephrase.use = function(index) {
            if ($scope.main.rephrase.limited) return;
            if ($scope.main.rephrase.selectedIndex === index) {
                $scope.main.rephrase.selectedIndex = null;
                rephraseService.undo();
                return;
            }
            reportingFactory.reporterGA4({
                event: gaFields.GAEvent.variantClick,
                category: gaFields.GACategory.Rephrase,
                trigger: gaFields.GATrigger.accept,
                interface: gaFields.GAInterface.miniWriter
            });
            backgroundConnectorFactory.callPromise({
                module: "gingerchromeext.background.rephraseLimits",
                callFunction: "increase"
            }).then(function(rephraseLimited) {
                $scope.main.rephrase.limited = rephraseLimited;
                if (rephraseLimited) {
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.premiumDisplay,
                        category: gaFields.GACategory.Premium,
                        trigger: gaFields.GATrigger.limitReachedRephrase,
                        interface: gaFields.GAInterface.miniWriter
                    });
                }
            });
            backgroundConnectorFactory.callPromise({
                module: "gingerchromeext.background.statisticService",
                callFunction: "increase",
                callArgs: [ "rephrase" ]
            });
            $scope.main.rephrase.selectedIndex = index;
            reportingFactory.reporterGA4({
                event: gaFields.GAEvent.rephraseClick,
                category: gaFields.GACategory.rephrase,
                trigger: gaFields.GATrigger.clickAnotherSentence,
                interface: gaFields.GAInterface.miniWriter,
                eventValue: window.location.hostname
            });
            rephraseService.applyRephrase(index);
        };
        $scope.main.rephrase.undo = function() {
            $scope.main.rephrase.selectedIndex = null;
            rephraseService.undo();
        };
        sessionFactory.listen.$on("login", function() {
            rephraseActiveSentence();
        });
        rephraseService.listen.$on("sentence.clicked", function() {
            rephraseActiveSentence();
        });
        var rephraseActiveSentence = function(sentenceIndex) {
            $scope.main.ui.nextDisabled = true;
            $scope.main.ui.previousDisabled = true;
            $scope.main.rephrase.loading = true;
            $scope.main.rephrase.result = null;
            $scope.main.ui.rephraseShortSentence = false;
            if (sentenceIndex) {
                rephraseService.setActiveSentence(sentenceIndex);
            }
            activeRepIndex = rephraseService.getActiveSentence().index;
            if (activeRepIndex > 0) $scope.main.ui.previousDisabled = false;
            if (activeRepIndex < reprLength) $scope.main.ui.nextDisabled = false;
            var phrase = rephraseService.getActiveSentence().sentence.text;
            if (phrase.trim().split(/\s+/).length > wordLimitForRephrase) {
                $scope.main.rephrase.loading = false;
                $scope.main.rephrase.result = null;
                return;
            }
            rephraseService.rephrase(phrase, $scope.main.rephrase.limited).then(function(result) {
                $scope.main.ui.rephraseShortSentence = result.length > 0 && (phrase.trim().split(/\s+/).length <= 3 || phrase.length < 20);
                $scope.main.rephrase.loading = false;
                $scope.main.rephrase.result = result;
                $scope.main.rephrase.masterPhrase = phrase;
            });
        };
        $scope.main.ui.logout = function() {
            var session = sessionFactory.get();
            if (session && session.token) $http({
                method: "POST",
                url: configFactory.get("urlBaseAuth") + "/signOut/" + encodeURIComponent(session.token)
            });
            reportingFactory.reporterGA4({
                event: gaFields.GAEvent.logOutClick,
                category: gaFields.GACategory.Profile,
                trigger: gaFields.GATrigger.profile,
                interface: gaFields.GAInterface.miniWriter
            });
            sessionFactory.set(null);
        };
        $scope.main.ui.openBigWriter = function() {
            var element = document.getElementById("mini-writer");
            reportingFactory.reporterGA4({
                event: gaFields.GAEvent.openWriterClick,
                category: gaFields.GACategory.Writer,
                trigger: gaFields.GATrigger.writer,
                interface: gaFields.GAInterface.miniWriter
            });
            window.localStorage.setItem("initWriterTextFromPopup", element.innerHTML);
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: `${configFactory.get("urlBase")}/ginger-writer`,
                active: true
            });
        };
        var timeout;
        $scope.main.ui.setUserListOpen = function(vis) {
            $scope.main.ui.dialectListOpen = false;
            if (timeout) $timeout.cancel(timeout);
            if (angular.isUndefined(vis)) {
                $scope.main.ui.userListOpen = !$scope.main.ui.userListOpen;
            } else if (vis === false) {
                timeout = $timeout(function() {
                    $scope.main.ui.userListOpen = false;
                }, 600);
            } else {
                $timeout.cancel(timeout);
                $scope.main.ui.userListOpen = true;
            }
        };
        $scope.main.ui.setDialectListOpen = function(vis) {
            $scope.main.ui.userListOpen = false;
            if (timeout) $timeout.cancel(timeout);
            if (angular.isUndefined(vis)) {
                $scope.main.ui.dialectListOpen = !$scope.main.ui.dialectListOpen;
            } else if (vis === false) {
                timeout = $timeout(function() {
                    $scope.main.ui.dialectListOpen = false;
                }, 600);
            } else {
                $timeout.cancel(timeout);
                $scope.main.ui.dialectListOpen = true;
            }
        };
        $scope.main.ui.openCloseTooltip = function(view) {
            $scope.main.showDownloadToolbar = view;
        };
        $scope.main.ui.signInTooltip = function(view) {
            $scope.main.showSignInToolbarForEnable = view;
        };
        $scope.main.ui.signInTooltipForDblClick = function(view) {
            $scope.main.showSignInToolbarForDblClick = view;
        };
        $scope.main.ui.openRephrase = function(event) {
            event.preventDefault();
            if ($scope.main.rephrase.limited) {}
            document.getElementsByTagName("body")[0].addEventListener("click", bodyClickListener);
            var repr = gingerModule.get("widget.phraseService").getRepresentation(document.querySelector("#mini-writer"));
            reprLength = repr.length - 1;
            for (var i = 0; i < repr.length; i++) {
                if (/^\s+$/.test(repr[i].text)) {
                    repr.splice(i, 1);
                }
            }
            var sentenceIndex = 0;
            repr.forEach(function(sentence, index) {
                if (sentence.activeSentence) {
                    if (/^\s+$/.test(sentence.text)) {
                        sentenceIndex = repr.length - 1 === index ? index + 1 : index - 1;
                    } else {
                        sentenceIndex = index;
                    }
                }
            });
            $scope.main.ui.rephraseOpen = true;
            rephraseService.setContentFromWriter(gingerInput);
            rephraseActiveSentence(sentenceIndex);
        };
        $scope.main.ui.closeRephrase = function() {
            document.getElementsByTagName("body")[0].removeEventListener("click", bodyClickListener);
            var rephraseContent = angular.element("#rephraser").html().replace(/<\/?gwrw[^>]*>/g, "");
            $scope.main.ui.rephraseOpen = false;
            rephraseService.passContentToWriter(rephraseContent, gingerInput);
            if (gingerInput) gingerInput.events.listen.trigger("inputchange");
        };
        $window.onblur = function() {
            var writerContent;
            if ($scope.main.ui.rephraseOpen) {
                writerContent = angular.element("#rephraser").html().replace(/<\/?gwrw[^>]*>/g, "");
            } else {
                writerContent = document.getElementById("mini-writer").innerHTML;
            }
            window.localStorage.setItem("miniWriter", writerContent);
            storageFactory.set("miniWriterCache", JSON.stringify(gingerModule.get("widget.api").dumpCorrectionCache()));
        };
        var copyElementToClipboard = function(element) {
            $window.getSelection().removeAllRanges();
            var range = document.createRange();
            range.selectNodeContents(typeof element === "string" ? document.getElementById(element) : element);
            $window.getSelection().addRange(range);
            document.execCommand("copy");
            $window.getSelection().removeAllRanges();
        };
        var statsCache;
        var mistakesCount = 0;
        var handleStatsChanged = function(e, statsChanged) {
            $timeout(function() {
                if (statsChanged.count.charactersWithSpace > 0) {
                    $scope.main.ui.showCopyButton = true;
                } else {
                    $scope.main.ui.showCopyButton = false;
                }
                eventScope.$emit("stats.changed", statsChanged);
            });
            var stats = gingerInput.stats.get();
            if (stats && stats.mistakes) setMistakes(stats.mistakes.grammar + stats.mistakes.spelling);
            statsCache = stats;
        };
        var mistakeSteps = [ 1, 5, 10, 20 ];
        var isMistakesStepTaken = function(mistakes) {
            if (mistakesCount < mistakes) {
                for (var i = 0; i < mistakeSteps.length; i++) {
                    if (mistakesCount < mistakeSteps[i] && mistakes >= mistakeSteps[i]) {
                        return true;
                    }
                }
            }
            return false;
        };
        var setMistakes = function(mistakes) {
            if (mistakes !== mistakesCount) {
                if (isMistakesStepTaken(mistakes)) {
                    $gingerWidgetJquery(".popup-body-floatingG").addClass("spin");
                } else {
                    $gingerWidgetJquery(".popup-body-floatingG").removeClass("spin");
                }
                mistakesCount = mistakes;
            }
            if (mistakes > 0) {
                $gingerWidgetJquery(".popup-body-floatingG").addClass("dirty");
                if (mistakes > 99) {
                    $gingerWidgetJquery(".popup-body-floatingG span").html('<gdiv style="font-size:11px">99+</gdiv>');
                } else {
                    $gingerWidgetJquery(".popup-body-floatingG span").text(mistakes);
                }
            } else {
                $gingerWidgetJquery(".popup-body-floatingG").removeClass("dirty");
                $gingerWidgetJquery(".popup-body-floatingG span").text(mistakes);
            }
        };
        $scope.main.ui.copyText = function() {
            copyElementToClipboard(document.getElementById("mini-writer"));
            $scope.main.ui.showCopySuccess = true;
            $timeout(function() {
                $scope.main.ui.showCopySuccess = false;
            }, 2e3);
        };
        var flushCache = function() {
            storageFactory.set("miniWriterCache", null);
            gingerModule.get("widget.cache").restore({});
        };
        $scope.main.ui.clearText = function(e) {
            flushCache();
            document.getElementById("mini-writer").textContent = "";
            angular.element("#mini-writer").focus();
        };
        var setMiniWriterContent = function(miniWriterContent) {
            var element = document.getElementById("mini-writer");
            element.innerHTML = miniWriterContent;
            setTimeout(function() {
                if (gingerInput) gingerInput.events.listen.trigger("inputchange");
            }, 100);
        };
        $scope.main.acceptReplaceContentWithSelection = function() {
            setMiniWriterContent(selectionContent.text);
            $scope.main.ui.showSelectionPopup = false;
            angular.element("#mini-writer").focus();
        };
        $scope.main.rejectReplaceContentWithSelection = function() {
            $scope.main.ui.showSelectionPopup = false;
            angular.element("#mini-writer").focus();
        };
        var bodyClickListener = function(event) {
            if (!$scope.main.ui.rephraseOpen) return;
            var closeRephrase = true;
            var path = event.composedPath ? event.composedPath() : event.path;
            path.forEach(function(element) {
                if (element.tagName === "GWRW" || element.className && element.className.includes("popup-rephrase")) closeRephrase = false;
            });
            if (closeRephrase) $scope.main.ui.closeRephrase();
        };
        sessionFactory.listen.$on("change", function() {
            handleRephraseLimit();
        });
        var handleRephraseLimit = function() {
            backgroundConnectorFactory.callPromise({
                module: "gingerchromeext.background.rephraseLimits",
                callFunction: "get"
            }).then(function(rephraseLimited) {
                $scope.main.rephrase.limited = rephraseLimited;
            });
        };
        $scope.main.ui.openAuthPage = function(type) {
            var params = [ "clientType=extension", "widgetUid=" + configFactory.get("widgetUid"), "clientVersion=" + configFactory.get("clientVersion"), "affId=" + configFactory.get("affId"), "application=" + configFactory.get("platform"), "origin=" + configFactory.get("affId"), "platform=" + configFactory.get("source"), "targetUrl=" + encodeURIComponent("/login-welcome"), "trigger=ExtensionMenu", "utm_medium=ExtensionMenu", "utm_source=button", "utm_campaign=signup_login" ];
            if (!type) {
                type = "login";
            }
            if (type === "login") {
                setTimeout(() => {
                    gingerModule.get("gingerchromeext.browser").tabs.create({
                        url: configFactory.get("urlBase") + "/login?" + params.join("&"),
                        active: true
                    });
                });
            } else {
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.signUpClick,
                    category: gaFields.GACategory.Login,
                    trigger: gaFields.GATrigger.banner,
                    interface: gaFields.GAInterface.miniWriter
                });
                setTimeout(() => {
                    gingerModule.get("gingerchromeext.browser").tabs.create({
                        url: configFactory.get("urlBase") + "/login?view=signUp&" + params.join("&"),
                        active: true
                    });
                });
            }
        };
        var init = function() {
            siteBlackListFactory.getCurrentHost().then(function(currentHost) {
                backgroundConnectorFactory.call({
                    module: "gingerchromeext.background.nonSupportedSites",
                    callFunction: "getNonSupportedItemByUrl",
                    callArgs: [ currentHost ]
                }, function(nonSupportedItem) {
                    if (!nonSupportedItem) return;
                    $scope.main.currentHost = currentHost;
                    $scope.main.currentHostName = nonSupportedItem.name;
                    $scope.main.isSiteSupported = false;
                    $scope.main.isGingerEnabled = false;
                    isNotSupportedSite = true;
                });
            });
            handleRephraseLimit();
            sessionFactory.listen.$on("logout", function() {
                $timeout(function() {
                    $state.go("external.login");
                });
            });
            sessionFactory.refresh().then(function(session) {
                if (!session.name && session.email) {
                    session.name = session.email.split("@")[0];
                }
                gingerModule.get("widget.session").set(session);
                $scope.session = session;
                if (!$scope.session || $scope.session.isAnonym) {
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.loginDisplay,
                        category: gaFields.GACategory.Login,
                        trigger: gaFields.GATrigger.banner,
                        interface: gaFields.GAInterface.miniWriter
                    });
                }
                var falsePremium = [ 1, 2, 3 ];
                if ($scope.session.license == 2 && !$scope.session.isAnonym && falsePremium.indexOf($scope.session.falsePremium) > -1) {
                    storageFactory.get("premiumBannerDisplayTimer").then(function(time) {
                        storageFactory.get("premiumBannerDisplayNumberOfShows").then(function(quantity) {
                            var now = new Date().getTime();
                            var qnt = !quantity ? 0 : typeof quantity === "string" ? parseInt(quantity, 10) : quantity;
                            if (typeof qnt !== "number") {
                                qnt = 0;
                                storageFactory.set("premiumBannerDisplayNumberOfShows", qnt);
                            }
                            $scope.main.premiumBanner.numberOfShows = qnt;
                            if ((!time || time < now) && (!qnt || qnt <= 3)) {
                                $scope.main.premiumBanner.show();
                            }
                        });
                    });
                }
                initGingerWidget();
            });
            storageFactory.get("miniWriterCache").then(function(cache) {
                if (cache) {
                    try {
                        gingerModule.get("widget.cache").restore(JSON.parse(cache));
                    } catch (e) {
                        console.error("miniWriterCache not parsable");
                    }
                }
                var miniWriterContent = window.localStorage.getItem("miniWriter");
                if (miniWriterContent && miniWriterContent.length > 0) {
                    $scope.main.ui.writerHasValue = true;
                    var element = document.getElementById("mini-writer");
                    element.innerHTML = miniWriterContent;
                    setTimeout(function() {
                        if (gingerInput) gingerInput.events.listen.trigger("inputchange");
                    }, 100);
                }
                storageFactory.get("miniWriterFromSelection").then(function(selectionValue) {
                    if (selectionValue && selectionValue.text && selectionValue.text.length > 0) {
                        detectLang(selectionValue.text, function(result) {
                            var detectedLangsArray = result.detectedLanguages;
                            if (detectedLangsArray[0] && detectedLangsArray[0].language === "en") {
                                selectionContent = selectionValue;
                                if (miniWriterContent) {
                                    $scope.main.ui.showSelectionPopup = true;
                                } else {
                                    $scope.main.acceptReplaceContentWithSelection();
                                }
                            }
                        });
                    } else {
                        angular.element("#mini-writer").focus();
                    }
                });
            });
            faviconFactory.retrieveCurrentFaviconUrl().then(function(url) {
                $scope.main.faviconUrl = url;
            });
            storageFactory.get("dialect").then(function(result) {
                $scope.main.settings.dialect = result;
            });
            storageFactory.listen.$on("change", function(e, changes) {
                if ("dialect" in changes) {
                    gingerModule.get("widget.config").set("dialect", changes["dialect"].newValue);
                }
            });
            $scope.main.dialectChanged = function(dialect) {
                $scope.main.settings.dialect = dialect;
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.selectDialect,
                    category: gaFields.GACategory.Settings,
                    trigger: gaFields.GATrigger.toggleSetting,
                    interface: gaFields.GAInterface.miniWriter,
                    eventValue: dialect
                });
                storageFactory.set("dialect", $scope.main.settings.dialect);
                $scope.main.ui.dialectListOpen = false;
            };
            $scope.main.reportPremiumClicked = function() {
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.premiumClick,
                    category: gaFields.GACategory.Premium,
                    trigger: gaFields.GATrigger.topButton,
                    interface: gaFields.GAInterface.miniWriter
                });
            };
            storageFactory.get("enableDefinitionsAndSynonyms").then(function(result) {
                $scope.main.settings.enableDefinitionsAndSynonyms = result;
                $scope.$watch("main.settings.enableDefinitionsAndSynonyms", function(newval, oldval) {
                    if (newval == oldval) return;
                    var action = "Disable";
                    if (newval) {
                        action = "Enable";
                    }
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.doubleClickForWord,
                        category: gaFields.GACategory.Settings,
                        trigger: gaFields.GATrigger.toggleSetting,
                        interface: gaFields.GAInterface.miniWriter,
                        eventValue: action === "Disable" ? "Off" : "On"
                    });
                    storageFactory.set("enableDefinitionsAndSynonyms", $scope.main.settings.enableDefinitionsAndSynonyms);
                });
            });
            siteBlackListFactory.getCurrentHost().then(function(currentHost) {
                $scope.main.currentHost = currentHost;
            });
            siteBlackListFactory.isCurrentHostBlackListed().then(function(isBlackListed) {
                $timeout(function() {
                    if ($scope.main.isSiteSupported) {
                        $scope.main.isGingerEnabled = !isBlackListed;
                    }
                    $scope.$watch("main.isGingerEnabled", function(newval, oldval) {
                        if (newval == oldval) return;
                        try {
                            var action = "Disable";
                            if (newval) {
                                action = "Enable";
                            }
                            if (action === "Disable" && !isNotSupportedSite) {
                                reportingFactory.reporterGA4({
                                    event: gaFields.GAEvent.disableCorrections,
                                    category: gaFields.GACategory.Settings,
                                    trigger: gaFields.GATrigger.toggleSetting,
                                    interface: gaFields.GAInterface.miniWriter,
                                    eventValue: $scope.main.currentHost
                                });
                            }
                            gingerModule.get("gingerchromeext.browser").tabs.query({
                                active: true,
                                currentWindow: true
                            }, function(tabs) {
                                !newval ? siteBlackListFactory.add(tabs[0].url) : siteBlackListFactory.remove(tabs[0].url);
                            });
                        } catch (e) {
                            console.error("chrome.tabs.query is not supported", e);
                        }
                    });
                });
            });
            gingerModule.get("widget.api").listen.on("ajax.start", function() {
                if (ajaxGraceTimeout) ajaxGraceTimeout = clearTimeout(ajaxGraceTimeout);
                $gingerWidgetJquery(".popup-body-floatingG").addClass("loading");
            });
            gingerModule.get("widget.api").listen.on("ajax.end", function() {
                if (ajaxGraceTimeout) ajaxGraceTimeout = clearTimeout(ajaxGraceTimeout);
                ajaxGraceTimeout = setTimeout(function() {
                    $gingerWidgetJquery(".popup-body-floatingG").removeClass("loading");
                }, 2e3);
            });
        };
        init();
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.home").directive("ngError", function() {
    return {
        scope: {
            ngOnerror: "&"
        },
        link: function(scope, element, attributes) {
            element.bind("error", function() {
                scope.ngOnerror();
            });
        }
    };
    return fallbackSrc;
}).directive("mouseaway", function() {
    return {
        scope: {
            callback: "&mouseaway"
        },
        link: function(scope, element, attrs) {
            var boundElem = element[0];
            element.bind("mouseout", function(event) {
                var el = event.toElement;
                while (el) {
                    if (el === boundElem) {
                        return;
                    }
                    el = el.parentNode;
                }
                scope.$apply(function() {
                    scope.callback(scope, event);
                });
            });
        }
    };
});

(function(angular) {
    angular.module("gingerchromeext.popup.home").filter("capitalize", function() {
        return function(input) {
            return !!input ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : "";
        };
    });
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.login").controller("loginController", [ "sessionFactory", "configFactory", "$sce", "$scope", "$window", "reportingFactory", function(sessionFactory, configFactory, $sce, $scope, $window, reportingFactory) {
        $scope.login = {};
        var params = [ "clientType=extension", "widgetUid=" + configFactory.get("widgetUid"), "clientVersion=" + configFactory.get("clientVersion"), "affId=" + configFactory.get("affId"), "application=" + configFactory.get("platform"), "origin=" + configFactory.get("affId"), "platform=" + configFactory.get("source"), "targetUrl=" + encodeURIComponent("/login-welcome"), "trigger=ExtensionMenu", "utm_medium=ExtensionMenu", "utm_source=button", "utm_campaign=signup_login" ];
        $scope.config = configFactory.get();
        $scope.login.openAuthPage = function(type) {
            if (!type) type = "login";
            if (type === "login") {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: configFactory.get("urlBase") + "/login?" + params.join("&"),
                    active: true
                });
            } else {
                gingerModule.get("gingerchromeext.browser").tabs.create({
                    url: configFactory.get("urlBase") + "/login?view=signUp&" + params.join("&"),
                    active: true
                });
            }
        };
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.notsupported").controller("notsupportedController", [ "$scope", "$state", "$http", "configFactory", "faviconFactory", "siteBlackListFactory", "backgroundConnectorFactory", "sessionFactory", "$timeout", function($scope, $state, $http, configFactory, faviconFactory, siteBlackListFactory, backgroundConnectorFactory, sessionFactory, $timeout) {
        var timeout;
        $scope.config = configFactory.get();
        $scope.notsupported = {};
        $scope.notsupported.nonSupportedSites = configFactory.get("nonSupportedSites");
        $scope.notsupported.ui = {};
        $scope.notsupported.ui.logout = function() {
            var session = sessionFactory.get();
            if (session && session.token) $http({
                method: "POST",
                url: configFactory.get("urlBaseAuth") + "/signOut/" + encodeURIComponent(session.token)
            });
            sessionFactory.set(null);
        };
        $scope.notsupported.ui.openLink = function(url) {
            gingerModule.get("gingerchromeext.browser").tabs.create({
                url: url,
                active: true
            });
        };
        siteBlackListFactory.getCurrentHost().then(function(currentHost) {
            backgroundConnectorFactory.call({
                module: "gingerchromeext.background.nonSupportedSites",
                callFunction: "getNonSupportedItemByUrl",
                callArgs: [ currentHost ]
            }, function(nonSupportedItem) {
                if (!nonSupportedItem) return;
                $timeout(function() {
                    $scope.notsupported.currentHost = currentHost;
                    $scope.notsupported.currentHostName = nonSupportedItem.name;
                });
            });
        });
        sessionFactory.refresh().then(function(session) {
            if (!session.name && session.email) {
                session.name = session.email.split("@")[0];
            }
            $scope.session = session;
        });
        $scope.notsupported.ui.setUserListOpen = function(vis) {
            if (timeout) $timeout.cancel(timeout);
            if (vis === false) {
                timeout = $timeout(function() {
                    $scope.notsupported.ui.userListOpen = false;
                }, 600);
            } else {
                $scope.notsupported.ui.userListOpen = true;
            }
        };
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.rephrase").factory("rephraseService", [ "$rootScope", "$http", "$q", "$sce", "sessionFactory", "configFactory", "reportingFactory", function($rootScope, $http, $q, $sce, sessionFactory, configFactory, reportingFactory) {
        var eventScope = $rootScope.$new(true);
        var rephraseRepresentation = [];
        var gaFields = reportingFactory.get();
        var getRepresentation = function() {
            var repr = gingerModule.get("widget.phraseService").getSentences(gingerModule.get("widget.contentManager").getVal(document.querySelector("#rephraser")));
            repr = repr.filter(function(s) {
                return s != null && /\S/.test(s);
            });
            return repr;
        };
        var wrapRephraseSentences = function() {
            rephraseRepresentation = getRepresentation();
            for (var si = 0; si < rephraseRepresentation.length; si++) {
                var newTag = createSentenceTag(document.querySelector("#rephraser"), rephraseRepresentation[si]);
                rephraseRepresentation[si].master = newTag.innerHTML;
                rephraseRepresentation[si].activeRephrase = null;
                newTag.id = "gwsi-" + si;
                newTag.addEventListener("click", function() {
                    var sentenceIndex = parseInt(this.id.split("-")[1]);
                    setActiveSentence(sentenceIndex);
                    eventScope.$emit("sentence.clicked", sentenceIndex);
                });
            }
            setActiveSentence(0);
        };
        var activeSentenceIndex = 0;
        var setActiveSentence = function(index) {
            angular.element("#gwsi-" + activeSentenceIndex).removeClass("active");
            activeSentenceIndex = index;
            angular.element("#gwsi-" + activeSentenceIndex).addClass("active");
            if (angular.element("#gwsi-" + activeSentenceIndex).get(0)) {
                setTimeout(function() {
                    angular.element("#gwsi-" + activeSentenceIndex).get(0).scrollIntoView({
                        block: "center"
                    });
                }, 5);
            }
            return rephraseRepresentation[index];
        };
        var getActiveSentence = function() {
            return {
                sentence: rephraseRepresentation[activeSentenceIndex],
                index: activeSentenceIndex
            };
        };
        var stepRephraseActiveSentence = function(dir) {
            if (rephraseRepresentation.length) {
                if (dir === "forward" && activeSentenceIndex < rephraseRepresentation.length - 1) {
                    sendGAEvent();
                    return setActiveSentence(activeSentenceIndex + 1);
                } else if (dir === "backward" && activeSentenceIndex > 0) {
                    sendGAEvent();
                    return setActiveSentence(activeSentenceIndex - 1);
                } else {
                    return rephraseRepresentation[activeSentenceIndex];
                }
            }
        };
        var sendGAEvent = function() {
            reportingFactory.reporterGA4({
                event: gaFields.GAEvent.rephraseClick,
                category: gaFields.GACategory.Rephrase,
                trigger: gaFields.GATrigger.rephraseChevron,
                interface: gaFields.GAInterface.miniWriter,
                eventValue: window.location.hostname
            });
        };
        var createSentenceTag = function(element, sentence) {
            var preWhiteSpace = sentence.text.match(/^\s+/);
            var preWhiteSpaceLength = preWhiteSpace ? preWhiteSpace[0].length : 0;
            var postWhiteSpace = sentence.text.match(/\s+$/);
            var postWhiteSpaceLength = postWhiteSpace ? postWhiteSpace[0].length : 0;
            var from = sentence.startsAt + preWhiteSpaceLength;
            var to = sentence.endsAt - postWhiteSpaceLength;
            var nodeOffsets = gingerModule.get("widget.utils").getNodeOffsetOfIndex(element, from, to);
            if (!nodeOffsets.startNode || !nodeOffsets.endNode) {
                return;
            }
            var wrapNode = wrapSelection("gwrw", nodeOffsets.startNode, nodeOffsets.startNodeOffset, nodeOffsets.endNode, nodeOffsets.endNodeOffset);
            return wrapNode;
        };
        var wrapSelection = function(nodeName, startNode, startNodeOffset, endNode, endNodeOffset) {
            var range = document.createRange();
            try {
                range.setStart(startNode, startNodeOffset);
                range.setEnd(endNode, endNodeOffset);
            } catch (e) {
                console.error(e);
            }
            var wrapNode = document.createElement(nodeName);
            wrapNode.appendChild(range.extractContents());
            range.insertNode(wrapNode);
            return wrapNode;
        };
        var getRephraseFromServer = function(phrase) {
            var deferred = $q.defer();
            var rephrases = [];
            $http({
                url: configFactory.get("urlRephraseSecured"),
                params: {
                    apiKey: configFactory.get("apiKey"),
                    userIdentifier: sessionFactory.get().userId,
                    clientVersion: configFactory.get("clientVersion"),
                    authToken: sessionFactory.get().token,
                    lang: configFactory.get("dialect"),
                    platform: configFactory.get("platform"),
                    s: phrase,
                    size: 8
                },
                cache: true
            }).then(function success(response, status, headers, config, v) {
                var sentences = response.data.Sentences;
                for (var i = 0; i < sentences.length; i++) {
                    rephrases.push({
                        from: 0,
                        to: phrase.length,
                        text: sentences[i].Sentence,
                        rephrase: sentences[i].Sentence
                    });
                }
                deferred.resolve(rephrases);
            }, function error(data, status, headers, config) {
                deferred.resolve(rephrases);
            });
            return deferred.promise;
        };
        var rephrase = function(phrase, limited) {
            var deferred = $q.defer();
            if (limited) {
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.premiumDisplay,
                    category: gaFields.GACategory.Premium,
                    trigger: gaFields.GATrigger.limitReachedRephrase,
                    interface: gaFields.GAInterface.miniWriter
                });
                deferred.resolve([ {
                    from: 0,
                    to: 21,
                    text: "Premium limit achieved.",
                    rephrase: "Premium limit achieved.",
                    fragments: [ {
                        text: "Premium limit ",
                        $$hashKey: "object:51"
                    }, {
                        changed: true,
                        text: "achieved.",
                        $$hashKey: "object:52"
                    } ],
                    $$hashKey: "object:35"
                }, {
                    from: 0,
                    to: 21,
                    text: "Bonus limit achieved.",
                    rephrase: "Bonus limit achieved.",
                    fragments: [ {
                        changed: true,
                        text: "Bonus",
                        $$hashKey: "object:55"
                    }, {
                        text: " limit ",
                        $$hashKey: "object:56"
                    }, {
                        changed: true,
                        text: "achieved.",
                        $$hashKey: "object:57"
                    } ],
                    $$hashKey: "object:36"
                }, {
                    from: 0,
                    to: 21,
                    text: "Premium limit attained.",
                    rephrase: "Premium limit attained.",
                    fragments: [ {
                        text: "Premium limit ",
                        $$hashKey: "object:61"
                    }, {
                        changed: true,
                        text: "attained.",
                        $$hashKey: "object:62"
                    } ],
                    $$hashKey: "object:37"
                }, {
                    from: 0,
                    to: 21,
                    text: "Maximum premium reached.",
                    rephrase: "Maximum premium reached.",
                    fragments: [ {
                        changed: true,
                        text: "Maximum",
                        $$hashKey: "object:65"
                    }, {
                        text: " ",
                        $$hashKey: "object:66"
                    }, {
                        changed: true,
                        text: "premium",
                        $$hashKey: "object:67"
                    }, {
                        text: " reached",
                        $$hashKey: "object:68"
                    }, {
                        changed: true,
                        text: ".",
                        $$hashKey: "object:69"
                    } ],
                    $$hashKey: "object:38"
                }, {
                    from: 0,
                    to: 21,
                    text: "Payment limit reached.",
                    rephrase: "Payment limit reached.",
                    fragments: [ {
                        changed: true,
                        text: "Payment",
                        $$hashKey: "object:75"
                    }, {
                        text: " limit reached",
                        $$hashKey: "object:76"
                    }, {
                        changed: true,
                        text: ".",
                        $$hashKey: "object:77"
                    } ],
                    $$hashKey: "object:39"
                }, {
                    from: 0,
                    to: 21,
                    text: "Premium threshold reached.",
                    rephrase: "Premium threshold reached.",
                    fragments: [ {
                        text: "Premium ",
                        $$hashKey: "object:81"
                    }, {
                        changed: true,
                        text: "threshold",
                        $$hashKey: "object:82"
                    }, {
                        text: " reached",
                        $$hashKey: "object:83"
                    }, {
                        changed: true,
                        text: ".",
                        $$hashKey: "object:84"
                    } ],
                    $$hashKey: "object:40"
                }, {
                    from: 0,
                    to: 21,
                    text: "Bonus cap reached.",
                    rephrase: "Bonus cap reached.",
                    fragments: [ {
                        changed: true,
                        text: "Bonus",
                        $$hashKey: "object:89"
                    }, {
                        text: " ",
                        $$hashKey: "object:90"
                    }, {
                        changed: true,
                        text: "cap",
                        $$hashKey: "object:91"
                    }, {
                        text: " reached",
                        $$hashKey: "object:92"
                    }, {
                        changed: true,
                        text: ".",
                        $$hashKey: "object:93"
                    } ],
                    $$hashKey: "object:41"
                }, {
                    from: 0,
                    to: 21,
                    text: "Award limit met.",
                    rephrase: "Award limit met.",
                    fragments: [ {
                        changed: true,
                        text: "Award",
                        $$hashKey: "object:99"
                    }, {
                        text: " limit ",
                        $$hashKey: "object:100"
                    }, {
                        changed: true,
                        text: "met.",
                        $$hashKey: "object:101"
                    } ],
                    $$hashKey: "object:42"
                } ]);
                return deferred.promise;
            }
            var preWhiteSpaces = phrase.match(/^\s+/);
            if (preWhiteSpaces) phrase = phrase.slice(preWhiteSpaces[0].length);
            var postWhiteSpaces = phrase.match(/^\s+/);
            if (postWhiteSpaces) phrase = phrase.slice(0, postWhiteSpaces[0].length);
            var rephrases = [];
            getRephraseFromServer(phrase).then(function(rephrases) {
                for (var ri = 0; ri < rephrases.length; ri++) {
                    if (preWhiteSpaces) rephrases[ri].text = preWhiteSpaces[0] + rephrases[ri].text;
                    if (postWhiteSpaces) rephrases[ri].text = rephrases[ri].text + postWhiteSpaces[0];
                }
                rephraseRepresentation[activeSentenceIndex].rephrases = rephrases;
                rephrases.forEach(function(e) {
                    var diff = Diff.diffWords(phrase, e.rephrase);
                    var fragments = [];
                    diff.forEach(function(frag) {
                        if (frag.added) {
                            fragments.push({
                                changed: true,
                                text: frag.value
                            });
                        } else if (frag.removed) {} else {
                            fragments.push({
                                text: frag.value
                            });
                        }
                    });
                    e.fragments = fragments;
                });
                deferred.resolve(rephrases);
                eventScope.$emit("get.completed", rephrases);
                reportingFactory.reporterGA4({
                    event: gaFields.GAEvent.rephraseClick,
                    category: gaFields.GACategory.Rephrase,
                    trigger: gaFields.GATrigger.rephrase,
                    interface: gaFields.GAInterface.miniWriter
                });
            });
            eventScope.$emit("get.sent", {
                phrase: phrase
            });
            return deferred.promise;
        };
        var applyRephrase = function(ri) {
            rephraseRepresentation[activeSentenceIndex].activeRephrase = ri;
            angular.element("#gwsi-" + activeSentenceIndex).html(rephraseRepresentation[activeSentenceIndex].rephrases[ri].text);
            updateStats();
            var rephraseContent = angular.element("#rephraser").html().replace(/<\/?gwrw[^>]*>/g, "");
            window.localStorage.setItem("miniWriter", rephraseContent);
            return rephraseRepresentation[activeSentenceIndex];
        };
        var undo = function() {
            rephraseRepresentation[activeSentenceIndex].activeRephrase = null;
            angular.element("#gwsi-" + activeSentenceIndex).html(rephraseRepresentation[activeSentenceIndex].master);
            updateStats();
            reportingFactory.reporterGA4({
                event: gaFields.GAEvent.rephraseUndoSuggestion,
                category: gaFields.GACategory.rephrase,
                interface: gaFields.GAInterface.miniWriter,
                eventValue: window.location.hostname
            });
            return rephraseRepresentation[activeSentenceIndex];
        };
        var setContentFromWriter = function(gingerInput) {
            var elem = angular.element("#rephraser");
            elem.html(angular.element(gingerInput.element).html().replace(/<\/?gwmw[^>]*>/g, "").replace(/(&nbsp;)+$/, ""));
            wrapRephraseSentences();
        };
        var passContentToWriter = function(content, gingerInput) {
            angular.element(gingerInput.element).html(content);
            if (gingerInput) {
                gingerInput.focus();
            }
        };
        var statEngine = new gingerModule.get("widget.inputHandler.stats", true)();
        statEngine.listen.on("changed", function(e, data) {
            eventScope.$emit("stats.changed", data);
        });
        var updateStats = function() {
            statEngine.init(document.querySelector("#rephraser"));
            statEngine.update(rephraseRepresentation);
        };
        return {
            setContentFromWriter: setContentFromWriter,
            passContentToWriter: passContentToWriter,
            rephrase: rephrase,
            stepRephraseActiveSentence: stepRephraseActiveSentence,
            getActiveSentence: getActiveSentence,
            applyRephrase: applyRephrase,
            undo: undo,
            setActiveSentence: setActiveSentence,
            listen: eventScope
        };
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.report").factory("reportingFactory", [ "backgroundConnectorFactory", "configFactory", "$rootScope", "$q", function(backgroundConnectorFactory, configFactory, $rootScope, $q) {
        var reporterGA4 = backgroundConnectorFactory.proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporterGA4"
        });
        var gaFields = {};
        $rootScope.gaFields = gaFields;
        var retrieve = function() {
            var deferred = $q.defer();
            backgroundConnectorFactory.call({
                module: "gingerchromeext.background.gaEvents",
                callFunction: "getAll"
            }, function(result) {
                if (result) {
                    set(result);
                }
                deferred.resolve(gaFields);
            });
            return deferred.promise;
        };
        var set = function(property, value) {
            if (angular.isUndefined(value)) {
                gaFields = property;
            } else {
                gaFields[property] = value;
            }
            $rootScope.gaFields = gaFields;
            return gaFields;
        };
        var get = function(property) {
            return angular.isDefined(property) ? gaFields[property] : gaFields;
        };
        return {
            reporterGA4: reporterGA4,
            retrieve: retrieve,
            get: get
        };
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.auth").factory("sessionFactory", [ "backgroundConnectorFactory", "storageFactory", "reportingFactory", "$rootScope", "$timeout", "$window", "$q", function(backgroundConnectorFactory, storageFactory, reportingFactory, $rootScope, $timeout, $window, $q) {
        var eventScope = $rootScope.$new(true);
        var session;
        var get = function(property) {
            return !!property ? session[property] : session;
        };
        var set = backgroundConnectorFactory.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "set",
            promise: true
        });
        var isLoggedIn = backgroundConnectorFactory.proxy({
            module: "gingerchromeext.background.session",
            callFunction: "isLoggedIn",
            promise: true
        });
        var refresh = function() {
            var deferred = $q.defer();
            backgroundConnectorFactory.callPromise({
                module: "gingerchromeext.background.session",
                callFunction: "asyncGetSession"
            }).then(function(resultSession) {
                session = resultSession;
                deferred.resolve(session);
            });
            return deferred.promise;
        };
        var init = function() {
            backgroundConnectorFactory.callPromise({
                module: "gingerchromeext.background.session",
                callFunction: "asyncGetSession"
            }).then(function(resultSession) {
                session = resultSession;
            });
            storageFactory.listen.$on("change", function(e, changes) {
                if ("session" in changes) {
                    var newSession = changes.session.newValue;
                    if (newSession && newSession.token) {
                        session = newSession;
                        eventScope.$emit("login", newSession);
                    } else {
                        session = null;
                        eventScope.$emit("logout");
                    }
                    eventScope.$emit("change");
                }
            });
        };
        var logout = function() {};
        init();
        return {
            get: get,
            set: set,
            logout: logout,
            isLoggedIn: isLoggedIn,
            refresh: refresh,
            listen: eventScope
        };
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.siteBlackList").factory("siteBlackListFactory", [ "storageFactory", "$q", function(storageFactory, $q) {
        var blackList = [];
        var getDomainOfUrl = gingerModule.get("widget.utils").getDomainOfUrl;
        var getIndexOfHost = function(host) {
            if (!blackList) return -1;
            return blackList.indexOf(host);
        };
        var isBlackListed = function(host) {
            if (getIndexOfHost(host) === -1) {
                return false;
            } else {
                return true;
            }
        };
        var add = function(url) {
            var host = getDomainOfUrl(url);
            if (!isBlackListed(host)) {
                blackList.push(host);
                storageFactory.set("domainBlackList", blackList);
            }
        };
        var remove = function(url) {
            var host = getDomainOfUrl(url);
            host = host.split(":")[0];
            var i = getIndexOfHost(host);
            if (i !== -1) {
                blackList.splice(i, 1);
                storageFactory.set("domainBlackList", blackList);
            }
        };
        var init = function() {
            storageFactory.get("domainBlackList").then(function(result) {
                if (!result) {
                    result = [];
                }
                blackList = result;
            });
        };
        var getCurrentHost = function() {
            var deferred = $q.defer();
            try {
                gingerModule.get("gingerchromeext.browser").tabs.query({
                    active: true,
                    currentWindow: true
                }, function(tabs) {
                    deferred.resolve(getDomainOfUrl(tabs[0].url));
                });
            } catch (e) {
                deferred.resolve(getDomainOfUrl(location.href));
            }
            return deferred.promise;
        };
        var isCurrentHostBlackListed = function() {
            var deferred = $q.defer();
            getCurrentHost().then(function(host) {
                if (isBlackListed(host)) {
                    deferred.resolve(true);
                } else {
                    deferred.resolve(false);
                }
            });
            return deferred.promise;
        };
        init();
        return {
            add: add,
            remove: remove,
            getCurrentHost: getCurrentHost,
            isCurrentHostBlackListed: isCurrentHostBlackListed
        };
    } ]);
})(window.angular);

(function(angular) {
    angular.module("gingerchromeext.popup.storage").factory("storageFactory", [ "$q", "$rootScope", function($q, $rootScope) {
        var eventScope = $rootScope.$new(true);
        var set = function(key, value) {
            if (!key) return;
            var deferred = $q.defer();
            var valueToSet = {};
            valueToSet[key] = value;
            if (key === "miniWriterCache") {
                gingerModule.get("gingerchromeext.browser").storage.local.set(valueToSet, function() {
                    deferred.resolve();
                });
                return deferred.promise;
            }
            gingerModule.get("gingerchromeext.browser").storage.sync.set(valueToSet, function() {
                deferred.resolve();
            });
            return deferred.promise;
        };
        var get = function(key) {
            var deferred = $q.defer();
            if (key === "miniWriterCache") {
                gingerModule.get("gingerchromeext.browser").storage.local.get(key, function(result) {
                    deferred.resolve(result[key]);
                });
                return deferred.promise;
            }
            gingerModule.get("gingerchromeext.browser").storage.sync.get(key, function(result) {
                deferred.resolve(result[key]);
            });
            return deferred.promise;
        };
        var init = function() {
            gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(changes, namespace) {
                eventScope.$emit("change", changes);
            });
        };
        init();
        return {
            get: get,
            set: set,
            listen: eventScope
        };
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.switch").directive("gingerSwitch", function() {
    function link(scope, element, attrs) {
        scope.value = false;
        scope.disabled = false;
        attrs.$observe("disabled", function(value) {
            scope.disabled = value;
        });
        scope.toggle = function() {
            if (scope.disabled) return;
            scope.value = !scope.value;
        };
    }
    return {
        link: link,
        scope: {
            value: "=ngValue"
        },
        template: '<span ng-class="{active:value, disabled:disabled}" ng-click="toggle()" class="form-control-switch"><span class="form-control-switch-label">{{value?"ON":"OFF"}} </span> <span class="form-control-switch-knob"></span></span>'
    };
});

(function(angular) {
    angular.module("gingerchromeext.popup.synonympopup").factory("synonympopupFactory", [ "storageFactory", "sessionFactory", "configFactory", "backgroundConnectorFactory", "$http", "reportingFactory", function(storageFactory, sessionFactory, configFactory, backgroundConnectorFactory, $http, reportingFactory) {
        var html;
        var suggestion;
        var suggestionSearched = false;
        var selectionInfo;
        var eventScope = $gingerWidgetJquery({});
        var gaFields = reportingFactory.get();
        var session = sessionFactory.get();
        var data = {
            clientVersion: configFactory.get("clientVersion"),
            apiKey: configFactory.get("apiKey"),
            userIdentifier: !sessionFactory.get("isAnonym") ? sessionFactory.get("userId") : configFactory.get("anonUserId"),
            lang: configFactory.get("dialect")
        };
        var getSelectionCoordinates = function() {
            var sel = document.selection, range, rects, rect = null;
            try {
                if (window.getSelection) {
                    sel = window.getSelection();
                    if (sel.rangeCount) {
                        range = sel.getRangeAt(0).cloneRange();
                        if (range.getClientRects) {
                            rects = range.getClientRects();
                            if (rects.length > 0) {
                                rect = range.getClientRects()[0];
                            }
                        }
                        if (x == 0 && y == 0) {
                            var span = document.createElement("span");
                            if (span.getClientRects) {
                                span.appendChild(document.createTextNode("​"));
                                range.insertNode(span);
                                rect = $gingerWidgetJquery(span).offset();
                                var spanParent = span.parentNode;
                                spanParent.removeChild(span);
                                spanParent.normalize();
                            }
                        }
                    }
                }
            } catch (e) {}
            return rect;
        };
        var getSelectionNode = function() {
            var selectionContainer = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    selectionContainer = document.activeElement;
                } else {
                    selectionContainer = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return selectionContainer;
        };
        var getSelectionText = function() {
            var text = "";
            if (window.getSelection) {
                text = window.getSelection().toString();
            } else if (document.selection && document.selection.type !== "Control") {
                text = document.selection.createRange().text;
            }
            return text;
        };
        var getSynonyms = function(word, cb) {
            session = sessionFactory.get();
            var limit = 6;
            if (session.license > 1) {
                limit = 12;
            }
            $http({
                url: configFactory.get("urlSynonymsReverso") + word + "?rude=false&merge=true&limit=" + limit,
                headers: {
                    "X-Reverso-Origin": "ginger.ext.chrome"
                },
                cache: true
            }).then(function(resp) {
                var synonyms = {};
                if (suggestionSearched) {
                    suggestionSearched = false;
                    cb([]);
                    return;
                }
                if (resp.data && resp.data.results && resp.data.resultsCount > 0) {
                    for (var key in resp.data.results) {
                        var result = resp.data.results[key];
                        result.cluster.forEach(function(clusterItem) {
                            if (!synonyms[clusterItem.pos.desc[0]]) synonyms[clusterItem.pos.desc[0]] = [];
                            synonyms[clusterItem.pos.desc[0]].push(clusterItem.word);
                        });
                    }
                } else if (resp.data.resultsCount === 0 && resp.data.suggestions && resp.data.suggestions[0] && resp.data.suggestions[0].language === "en") {
                    suggestion = resp.data.suggestions[0].word;
                    getSynonyms(resp.data.suggestions[0].word, function(result) {
                        cb(result);
                        suggestionSearched = true;
                    });
                }
                synonyms = removeDuplicates(synonyms);
                synonyms = categoryLimiter(synonyms);
                var synonymsUncategorized = [];
                for (var property in synonyms) {
                    synonymsUncategorized = synonymsUncategorized.concat(synonyms[property]);
                }
                cb(synonymsUncategorized);
            }, function(err) {
                cb([]);
            });
        };
        var removeDuplicates = function(synonyms) {
            var allSynonyms = [];
            for (var property in synonyms) {
                var synonymsToModify = JSON.parse(JSON.stringify(synonyms));
                synonyms[property].forEach(function(synonym) {
                    if (!allSynonyms.includes(synonym.toLowerCase())) {
                        allSynonyms.push(synonym.toLowerCase());
                    } else {
                        synonymsToModify[property].splice(synonymsToModify[property].indexOf(synonym), 1);
                    }
                });
            }
            return synonymsToModify;
        };
        var categoryLimiter = function(synonyms) {
            var categoriesWithItems = 0;
            for (var property in synonyms) {
                if (synonyms[property].length > 0) categoriesWithItems++;
            }
            session = sessionFactory.get();
            var limit = 6;
            if (session.license > 1) {
                limit = 12;
            }
            for (var property in synonyms) {
                synonyms[property] = synonyms[property].slice(0, limit / categoriesWithItems);
            }
            return synonyms;
        };
        var serializeToQueryParams = function(params) {
            var queryString = "";
            for (var key in params) {
                if (queryString != "") {
                    queryString += "&";
                }
                queryString += key + "=" + encodeURIComponent(params[key]);
            }
            return queryString;
        };
        var scrollBindElements = [];
        var bindScroll = function(node) {
            if (node) {
                scrollBindElements.push(node);
                $gingerWidgetJquery(node).on("scroll.definitionScroll", function() {
                    hide();
                });
                if (node.parentNode) bindScroll(node.parentNode);
            }
        };
        var unBindScroll = function() {
            for (var i = 0; i < scrollBindElements.length; i++) {
                $gingerWidgetJquery(scrollBindElements[i]).off("scroll.definitionScroll");
            }
            scrollBindElements = [];
        };
        var build = function() {
            html = {};
            html.main = document.body.appendChild(document.createElement("iframe"));
            html.main.className = "ginger-extension-synonympopup";
            html.main.src = gingerModule.get("gingerchromeext.browser").runtime.getURL("ginger-popup/index.html");
        };
        var getTextAndReplace = function(config, e, event) {
            var orig = config.text;
            var isUpperCase = orig.trim()[0] === orig.trim()[0].toUpperCase();
            if (isUpperCase) {
                e = e.slice(0, 1).toUpperCase() + e.slice(1);
            }
            var selectedText = config.text;
            var preWS = selectedText.match(/^\s+/);
            preWS = preWS && preWS.length ? preWS[0] : "";
            var postWS = selectedText.match(/\s+$/g);
            var postWSisNL = selectedText.match(/[\n\r]+/g);
            var postWSisWSandNL = selectedText.match(/\s[\n\r]+/g);
            postWS = postWS && postWS.length && (!postWSisNL || postWSisWSandNL) ? postWS[0] : "";
            e = preWS + e + postWS;
            hide();
            $gingerWidgetJquery(config.node).trigger("focus");
            replaceSynonym(config, e);
            event.preventDefault();
            $gingerWidgetJquery(config.node).trigger("paste");
        };
        var replaceSynonym = function(config, replacementText) {
            var sel, range;
            var t = new window.InputEvent("beforeinput", {
                bubbles: !0,
                cancelable: !1,
                inputType: "insertText",
                data: replacementText
            });
            document.activeElement.dispatchEvent(t);
            document.execCommand("insertText", !1, replacementText);
        };
        var handleSpaces = function(range, textToReplace) {
            var rangeText = range.toString();
            if (rangeText.charAt(0) === " ") textToReplace = " " + textToReplace; else if (rangeText.charAt(0) === " ") textToReplace = " " + textToReplace;
            if (rangeText.charAt(rangeText.length - 1) === " ") textToReplace += " "; else if (rangeText.charAt(rangeText.length - 1) === " ") textToReplace += " ";
            return textToReplace;
        };
        var hide = function() {
            isShown = false;
            unBindScroll();
            if (html) $gingerWidgetJquery(html.main).remove();
            html = null;
        };
        var sendMessageToApp = function(msg) {
            var frame = html.main;
            if ("contentWindow" in frame && "postMessage" in frame.contentWindow) {
                frame.contentWindow.postMessage(msg, "*");
            }
        };
        var listenToMessages = function() {
            window.addEventListener("message", function(msg) {
                var message = "";
                if (!msg?.data) {
                    return;
                }
                try {
                    message = JSON.parse(msg.data);
                } catch (e) {
                    message = msg.data;
                }
                if (!message) return;
                if (msg?.data.toString().startsWith("AppIsLoaded:")) {
                    show(selectionInfo);
                }
                if (msg?.data.toString().startsWith("closeIFrame:")) {
                    hide();
                }
                if (msg?.data.toString().startsWith("displayDefinitions:")) {
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.definitionDisplay,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.tabDefinition,
                        interface: gaFields.GAInterface.miniWriter,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("definitionClick:")) {
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.definitionClick,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.more,
                        interface: gaFields.GAInterface.miniWriter,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("definitionSeeAlso:")) {
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.definitionSeeAlso,
                        category: gaFields.GACategory.Definition,
                        interface: gaFields.GAInterface.miniWriter,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("displayDefinitionOnWordClick:")) {
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.definitionDisplay,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.clickOnWord,
                        interface: gaFields.GAInterface.miniWriter,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("displaySmartSuggestion:")) {
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.smartSuggestionDisplay,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.definition,
                        interface: gaFields.GAInterface.miniWriter,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("clickSmartSuggestion:")) {
                    reportingFactory.reporterGA4({
                        event: gaFields.GAEvent.smartSuggestionClick,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.definition,
                        interface: gaFields.GAInterface.miniWriter,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("IFrameHeight:")) {
                    var height = msg?.data.substring("IFrameHeight:".length);
                    $gingerWidgetJquery(html.main).css("height", height);
                    setPositionPopup(selectionInfo.selectionCoordinates);
                }
                if (msg?.data.toString().startsWith("replaceSynonym:")) {
                    var e = msg?.data.substring("replaceSynonym:".length);
                    getTextAndReplace(selectionInfo, e);
                }
            });
        };
        var isShown = false;
        var show = function(config) {
            isShown = true;
            suggestion = null;
            const segment = gingerModule.get("widget.utils").getSelectionSurroundingText();
            selectionInfo = {
                ...config,
                ...data,
                segment: segment
            };
            if (!config.selectionCoordinates) return;
            if (!html) {
                build();
            }
            config = {
                ...config,
                tab: config.tab ? config.tab : "synonyms",
                session: session,
                definitionsEnabled: true,
                segment: segment
            };
            sendMessageToApp("selection_text:" + JSON.stringify(config));
            setPositionPopup(config.selectionCoordinates);
        };
        var setPositionPopup = function(selectionCoordinates) {
            if (!selectionCoordinates) return;
            var popupOffset = 0;
            var heightPopup = html && html.main ? $gingerWidgetJquery(html.main).outerHeight() : 130;
            var widthPopup = html && html.main ? $gingerWidgetJquery(html.main).outerWidth() : 322;
            var top = selectionCoordinates.bottom + popupOffset;
            var left = selectionCoordinates.left;
            var center = selectionCoordinates.width / 2 - widthPopup / 2;
            var innerWidth = window.innerWidth;
            if (center) {
                left = left + center >= 0 ? left + center : left;
            }
            if (left + widthPopup > innerWidth) {
                left = innerWidth - widthPopup - popupOffset;
            }
            if (top + heightPopup > window.innerHeight) {
                top = selectionCoordinates.top - heightPopup - popupOffset;
            }
            $gingerWidgetJquery(html.main).css("maxHeight", 260);
            $gingerWidgetJquery(html.main).css("left", left);
            $gingerWidgetJquery(html.main).css("top", top);
            $gingerWidgetJquery(html.main).css("z-index", 2147483646);
            $gingerWidgetJquery(html.main).css("padding", 0);
            $gingerWidgetJquery(html.main).fadeIn();
        };
        var init = function() {
            document.addEventListener("dblclick", function(event) {
                storageFactory.get("enableDefinitionsAndSynonyms").then(function(isEnabled) {
                    if (isEnabled) {
                        selectionInfo = {
                            text: getSelectionText(),
                            selectionCoordinates: getSelectionCoordinates(),
                            node: getSelectionNode()
                        };
                        var isNodeThatsValid = $gingerWidgetJquery(selectionInfo.node).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(selectionInfo.node).is("*[contenteditable='false']");
                        if (isNodeThatsValid && selectionInfo.text) {
                            const selectedMultiWordsLength = selectionInfo.text.split(/\s+/).length;
                            const pattern = /.*[0-9@].*/gi;
                            if (pattern.test(selectionInfo?.text) && selectedMultiWordsLength === 1) {
                                return;
                            }
                            show(selectionInfo);
                            reportingFactory.reporterGA4({
                                event: gaFields.GAEvent.synonymDisplay,
                                category: gaFields.GACategory.Synonyms,
                                interface: gaFields.GAInterface.miniWriter,
                                eventValue: window.location.hostname
                            });
                            backgroundConnectorFactory.callPromise({
                                module: "gingerchromeext.background.statisticService",
                                callFunction: "increase",
                                callArgs: [ gaFields.GAEventValue.doubleClickOnWord + "_synonyms" ]
                            });
                        }
                    }
                });
            });
            document.addEventListener("keydown", function(event) {
                if (isShown) hide();
            });
            document.addEventListener("click", function(event) {
                hide();
            });
            listenToMessages();
        };
        init();
        return {
            show: show,
            hide: hide,
            listen: eventScope
        };
    } ]);
})(window.angular);

angular.module("gingerchromeext.popup.templates", [ "modules/banners/partials/floatingG-active.partial.html", "modules/banners/partials/floatingG-signin.partial.html", "modules/banners/partials/limit-approaching.partial.html", "modules/banners/partials/limit-exceeded.partial.html", "partials/home.partial.html", "partials/login.partial.html", "partials/notsupported.partial.html" ]);

angular.module("modules/banners/partials/floatingG-active.partial.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("modules/banners/partials/floatingG-active.partial.html", '<div class="floatingG-banner__container">\n' + '    <h1 class="floatingG-banner__title">Ginger is now active.</h1>\n' + '    <p class="floatingG-banner__description">Start writing! Your mistakes will be highlighted.</p>\n' + '    <img src="../assets/edit_active_popup.png" alt="" class="floatingG-banner__img">\n' + "</div>");
} ]);

angular.module("modules/banners/partials/floatingG-signin.partial.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("modules/banners/partials/floatingG-signin.partial.html", '<div class="floatingG-banner__container">\n' + '  <h1 class="floatingG-banner__title">Looks like you got signed out!</h1>\n' + '  <p class="floatingG-banner__description">In order to continue receiving the best value from Ginger, please sign back in.</p>\n' + '  <p class="floatingG-banner__description">\n' + '    <a ng-click="banners.postMessage({intent:\'signIn\'})" class="floatingG-banner__btn">SIGN BACK\n' + "      IN</a><br>\n" + '    <a ng-click="banners.postMessage({intent:\'neverShowSignIn\'})" class="floatingG-banner__btn floatingG-banner__btn_cancel">Don\'t\n' + "      show this again</a>\n" + "  </p>\n" + "</div>");
} ]);

angular.module("modules/banners/partials/limit-approaching.partial.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("modules/banners/partials/limit-approaching.partial.html", '<div class="frame-banner__content frame-banner__content_approaching">\n' + '    <a class="frame-banner__close close-iframe-btn"></a>\n' + '    <div class="frame-banner__ginger-icon"></div>\n' + '    <div class="frame-banner__top frame-banner__top_approaching"></div>\n' + '    <a class="frame-banner__premium close-iframe-btn" target="_blank" href="{{ config.urlBase }}/online_store/ginger_upgrade?cp=new-hp-store-topnav">Upgrade now</a>\n' + '    <a class="frame-banner__login close-iframe-btn" target="_blank" href="{{ config.urlBase }}/login">Already a premium user?</a>\n' + "</div>");
} ]);

angular.module("modules/banners/partials/limit-exceeded.partial.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("modules/banners/partials/limit-exceeded.partial.html", '<div class="frame-banner__content">\n' + '    <div class="frame-banner__top"></div>\n' + '    <a class="frame-banner__close close-iframe-btn"></a>\n' + '    <a class="frame-banner__premium close-iframe-btn" target="_blank" href="{{ config.urlBase }}/online_store/ginger_upgrade?cp=new-hp-store-topnav">Upgrade now</a>\n' + "    <br>\n" + '    <a class="frame-banner__login close-iframe-btn" target="_blank" href="{{ config.urlBase }}/login">Already a premium user?</a>\n' + "    <br>\n" + '    <p class="frame-banner__description">\n' + "        Ginger will continue to work with limited functionality.<br>\n" + "        Next week you'll get it back for another 10 corrections.\n" + "    </p>\n" + "</div>");
} ]);

angular.module("partials/home.partial.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("partials/home.partial.html", '<div class="popup-home">\n' + "    <div ng-class=\"{'popup-campaign':main.hasActiveCampaign}\">\n" + '        <div class="popup-head">\n' + '            <div class="popup-head-logo"><img src="../assets/ginger-logo.svg" alt=""></div>\n' + "\n" + '            <a title="Go Premium" target="_blank" ng-if="session.license !== undefined && session.license!==2" href="{{config.urlBase}}/online_store/ginger_upgrade?cp=new-hp-store-topnav&autk={{session.token}}" class="popup-head-license popup-head-license-basic" ng-click="main.reportPremiumClicked()"></a>\n' + "\n" + '            <div class="popup-head-user dd" ng-class="{\'dd-open\':main.ui.userListOpen}" mouseaway="main.ui.setUserListOpen(false)">\n' + '                <a class="dd-trigger" ng-if="session && !session.isAnonym" ng-click="main.ui.setUserListOpen()">\n' + "                    <i ng-class=\"session.license === 2 ? 'gingericon-mini-writer-profile-premium' : 'gingericon-mini-writer-profile'\"></i>\n" + "                </a>\n" + '                <a class="dd-trigger" ng-if="!session || session.isAnonym" ng-click="main.ui.openAuthPage(); main.reporterGA4({\n' + "                        event: gaFields.GAEvent.loginClick,\n" + "                        category: gaFields.GACategory.Login,\n" + "                        trigger: gaFields.GATrigger.headerIcon,\n" + "                        interface: gaFields.GAInterface.miniWriter,\n" + '                    })">\n' + '                    <i class="gingericon-mini-writer-profile"></i>\n' + "                </a>\n" + '                <div class="dd-content" ng-mouseover="main.ui.setUserListOpen(true)">\n' + '                    <div class="popup-head-user-body" ng-if="session.email">\n' + '                        <div class="popup-head-user-body-email" ng-class="{\'premium\': session.license===2}">{{session.email}}</div>\n' + '                        <span class="popup-head-user-body-premium" title="Go Premium" ng-if="session.license===2"></span>\n' + "\n" + "                    </div>\n" + '                    <div class="popup-head-user-foot">\n' + '                        <a ng-click="main.ui.logout()" class="btn">Log out</a>\n' + "                    </div>\n" + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + '        <div class="popup-body">\n' + '            <div class="popup-body-settings" ng-class="{\'light\' : main.ui.rephraseOpen}">\n' + '                <div class="popup-body-row" ng-if="main.currentHost.indexOf(\'0000000000\')===-1">\n' + "                    <div\n" + '                            class="popup-body-col enable-corrections"\n' + "                            ng-class=\"{'lighter' : !session || session.isAnonym}\"\n" + '                            ng-mouseenter="(!session || session.isAnonym) ? main.ui.signInTooltip(true) : main.ui.signInTooltip(false)"\n' + '                            ng-mouseleave="main.ui.signInTooltip(false)"\n' + "                    >\n" + '                        <div class="popup-body-row-input">\n' + '                            <span ginger-switch ng-value="main.isGingerEnabled" ng-disabled="!main.isSiteSupported || !session || session.isAnonym"></span>\n' + "                        </div>\n" + '                        <div class="popup-body-signin__tooltip" ng-if="main.showSignInToolbarForEnable">\n' + "                            Register for free to enable/disable Ginger on specific websites\n" + "                        </div>\n" + '                        <div class="popup-body-row-label">\n' + '                        <span ng-if="main.isSiteSupported">\n' + '                            Enable corrections on <img class="popup-body-favicon" ng-if="main.faviconUrl" ng-src="{{main.faviconUrl}}"> <b>{{main.currentHost}}</b>\n' + "                        </span>\n" + '                            <span class="popup-body-not-supported" ng-if="!main.isSiteSupported">\n' + "                                <span><b>{{main.currentHostName}}</b> not yet supported</span>\n" + "\n" + '                                <a class="popup-body-download-app" target="_blank"\n' + '                                   ng-mouseenter="main.ui.openCloseTooltip(true)"\n' + '                                   ng-mouseleave="main.ui.openCloseTooltip(false)"\n' + "                                   href=\"{{config.urlBase}}/download?platform={{isMac ? 'Macintosh' : 'Windows'}}&utm_campaign=extension&utm_medium=&utm_source=link_miniwriter\"\n" + "                                >\n" + "                                    Download Ginger for {{isMac ? 'Mac' : 'Windows'}}\n" + '                                    <span class="popup-body-download-app-icon">\n' + '                                        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n' + '                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M9.16673 9.65483L9.16673 3.33333C9.16673 2.8731 9.53983 2.5 10.0001 2.5C10.4603 2.5 10.8334 2.8731 10.8334 3.33333V9.65483L11.9108 8.57741C12.2362 8.25197 12.7639 8.25197 13.0893 8.57741C13.4148 8.90285 13.4148 9.43048 13.0893 9.75592L10.6777 12.1675C10.3035 12.5418 9.69667 12.5418 9.32242 12.1675L6.91081 9.75592C6.58537 9.43048 6.58537 8.90285 6.91081 8.57741C7.23625 8.25198 7.76389 8.25198 8.08932 8.57741L9.16673 9.65483ZM4.36885 12.5249C4.81534 12.6365 5.08681 13.089 4.97519 13.5354L4.65958 14.7979C4.52809 15.3238 4.92589 15.8333 5.46803 15.8333H14.5321C15.0742 15.8333 15.472 15.3238 15.3406 14.7979L15.0249 13.5354C14.9133 13.089 15.1848 12.6365 15.6313 12.5249C16.0778 12.4133 16.5302 12.6847 16.6419 13.1312L16.9575 14.3937C17.3519 15.9715 16.1585 17.5 14.5321 17.5H5.46803C3.8416 17.5 2.64821 15.9715 3.04267 14.3937L3.35828 13.1312C3.46991 12.6847 3.92235 12.4133 4.36885 12.5249Z" fill="#1DA0B2"/>\n' + "                                        </svg>\n" + "                                    </span>\n" + "                                </a>\n" + "                            </span>\n" + "                        </div>\n" + "                    </div>\n" + '                    <div class="popup-body-download-toolbar" ng-if="main.showDownloadToolbar">\n' + "                        After installing the app, all you have to do is to select any text and click <b>{{isMac ? 'Cmd' : 'Ctrl'}}+C+C</b> to check it.\n" + "                    </div>\n" + '                    <div class="popup-body-col dialect">\n' + '                        <div class="popup-body-row-label">\n' + "                            Dialect\n" + "                        </div>\n" + '                        <div class="dd dialect" ng-class="{\'dd-open\':main.ui.dialectListOpen}" mouseaway="main.ui.setDialectListOpen(false)">\n' + '                            <a class="dd-trigger" ng-click="main.ui.setDialectListOpen()">\n' + "                                <span ng-if=\"main.settings.dialect !== 'indifferent'\">English</span> {{main.settings.dialect}}\n" + "                            </a>\n" + '                            <div class="dd-content" ng-mouseover="main.ui.setDialectListOpen(true)">\n' + '                                <a class="btn" ng-click="main.dialectChanged(\'UK\')">\n' + "                                    English UK\n" + "                                </a>\n" + '                                <a class="btn" ng-click="main.dialectChanged(\'US\')">\n' + "                                    English US\n" + "                                </a>\n" + '                                <a class="btn" ng-click="main.dialectChanged(\'indifferent\')">\n' + "                                    Indifferent\n" + "                                </a>\n" + "                            </div>\n" + "                        </div>\n" + "                    </div>\n" + "                </div>\n" + "\n" + '                <div class="popup-body-row double-click"\n' + "                     ng-class=\"{'lighter' : !session || session.isAnonym}\"\n" + '                     ng-mouseenter="(!session || session.isAnonym) ? main.ui.signInTooltipForDblClick(true) : main.ui.signInTooltipForDblClick(false)"\n' + '                     ng-mouseleave="main.ui.signInTooltipForDblClick(false)"\n' + "                >\n" + '                    <div class="popup-body-row-input">\n' + '                        <span ginger-switch ng-disabled="!session || session.isAnonym" ng-value="main.settings.enableDefinitionsAndSynonyms"></span>\n' + "                    </div>\n" + '                    <div class="popup-body-row-label">\n' + "                        Double-click for synonyms and definitions (all sites)\n" + "                    </div>\n" + '                    <div class="popup-body-signin__tooltip popup-body-signin__tooltip_dbl-click" ng-if="main.showSignInToolbarForDblClick">\n' + "                        Register for free to enable/disable synonyms and definitions\n" + "                    </div>\n" + "                </div>\n" + "            </div>\n" + "\n" + "\n" + "            \x3c!--DomProg Premium banner--\x3e\n" + '            <div ng-if="main.premiumBanner.isShow"\n' + '                 class="popup-body-row popup-body__premium-banner">\n' + "\n" + '                <span class="popup-body__premium-banner__close" ng-click="main.premiumBanner.hide()">✕</span>\n' + "\n" + '                <span class="popup-body__premium-banner__icon">\n' + '                    <svg width="22" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n' + '                    <path d="M0.886355 15.3004L0.88635 15.3004L0.885134 15.3025C0.647489 15.7235 0.5 16.1878 0.5 16.6799C0.5 17.4454 0.77155 18.1549 1.28171 18.675C1.79417 19.1974 2.51921 19.5 3.37008 19.5H18.6299C19.4808 19.5 20.2058 19.1974 20.7183 18.675C21.2285 18.1549 21.5 17.4454 21.5 16.6799C21.5 16.2063 21.3817 15.729 21.1215 15.2876L13.4795 1.93229C13.4794 1.93201 13.4792 1.93174 13.4791 1.93146C12.9461 0.993153 11.9666 0.5 11.0049 0.5C10.0345 0.5 9.05429 0.992268 8.52085 1.93161C8.52072 1.93184 8.5206 1.93207 8.52047 1.93229L0.886355 15.3004ZM10.718 11.8493L10.7179 11.8458L10.582 6.67658C10.582 6.6761 10.582 6.67563 10.582 6.67515C10.58 6.55751 10.6207 6.47894 10.6753 6.42717C10.7324 6.37288 10.8347 6.32092 10.9951 6.32092C11.2866 6.32092 11.421 6.49754 11.418 6.68474C11.418 6.68519 11.418 6.68564 11.418 6.68608L11.2821 11.8458H11.2821L11.282 11.8495C11.2788 12.0193 11.2331 12.0777 11.2173 12.0936C11.2032 12.1077 11.1538 12.1482 11.0049 12.1482C10.8459 12.1482 10.7952 12.1052 10.7818 12.0916C10.7658 12.0753 10.7212 12.0168 10.718 11.8493ZM11.0049 15.3336C10.6736 15.3336 10.4267 15.0679 10.4267 14.8162C10.4267 14.5492 10.67 14.2892 11.0049 14.2892C11.3556 14.2892 11.5928 14.5454 11.5928 14.8162C11.5928 15.0717 11.352 15.3336 11.0049 15.3336Z" fill="#E63939" stroke="white"/>\n' + "                    </svg>\n" + "                </span>\n" + "\n" + '                <div class="popup-body__premium-banner__text" ng-switch="session.falsePremium">\n' + '                    <span ng-switch-when="1">\n' + "                        We haven't received your payment in the past 90 days. Please purchase a new subscription of Ginger <strong>within 14 days</strong> to keep your premium benefits.\n" + "                    </span>\n" + "\n" + '                    <span ng-switch-when="2">\n' + "                        <strong>Your Ginger Premium subscription has expired.</strong> Please purchase a new subscription <strong>within 14 days</strong> to keep your premium benefits.\n" + "                    </span>\n" + "\n" + "                    <span ng-switch-default>\n" + "                        <strong>Your Ginger Premium subscription will be expiring soon.</strong> We have completely redesigned Ginger Writer and are certain you will enjoy the premium benefits we offer now, more than ever. We would like to thank you for being a loyal customer by offering you a special discount of 60% off our Premium plans. Please purchase a new subscription of Ginger <strong>within 14 days</strong> to keep your premium benefits.\n" + "                    </span>\n" + "\n" + "                </div>\n" + "\n" + '                <div class="popup-body__premium-banner__button"\n' + '                     ng-switch="session.falsePremium">\n' + "\n" + "\n" + '                    <a target="_blank"\n' + '                       ng-switch-when="3"\n' + '                       href="{{config.urlBase}}/online_store/ginger_upgrade?cp=new-hp-store-topnav"\n' + '                       ng-click="main.reportPremiumClicked()"\n' + "                    >Purchase 60% off Premium</a>\n" + "\n" + '                    <a target="_blank"\n' + '                       ng-switch-when="2"\n' + '                       href="{{config.urlBase}}/online_store/ginger_upgrade?cp=new-hp-store-topnav"\n' + '                       ng-click="main.reportPremiumClicked()"\n' + "                    >Purchase new subscription</a>\n" + "\n" + '                    <a target="_blank"\n' + "                       ng-switch-default\n" + '                       href="{{config.urlBase}}/online_store/ginger_upgrade?cp=new-hp-store-topnav"\n' + '                       ng-click="main.reportPremiumClicked()"\n' + "                    >Purchase new subscription</a>\n" + "                </div>\n" + "\n" + '                <div class="popup-body__premium-banner__bottom-text">\n' + "                    If you have any questions or believe you received this message in error, please\n" + '                    <a target="_blank"\n' + '                       href="{{config.urlBase}}/contactus"\n' + "                    >contact us</a>.\n" + "                </div>\n" + "            </div>\n" + "\n" + "\n" + '            <div class="popup-body-row" ng-class="{\'rephrase\' : main.ui.rephraseOpen}">\n' + "                <div class=\"popup-body-editor-wrapper\" ng-class=\"{'rephrase-open': main.ui.rephraseOpen, 'small': !main.ui.rephraseOpen && (!session || session.isAnonym || main.premiumBanner.isShow)}\">\n" + '                    <div class="popup-body-editor-clear" ng-if="!main.ui.rephraseOpen && main.ui.showCopyButton" ng-click="main.ui.clearText()">\n' + "                        &#10005;\n" + "                    </div>\n" + "\n" + '                    <div class="popup-body-editor-buttons">\n' + '                        <a ng-click="main.ui.copyText()" ng-if="main.ui.showCopyButton" class="popup-body-editor-button copy">\n' + '                            <span class="copy" ng-if="!main.ui.showCopySuccess"><i class="gingericon-duplicate"></i> Copy text</span>\n' + '                            <span class="copied" ng-if="main.ui.showCopySuccess"><i class="gingericon-check"></i> Copied</span>\n' + "                        </a>\n" + "                    </div>\n" + '                    <div ng-if="!main.ui.rephraseOpen" class="popup-body-floatingG" rel="noopener">\n' + "                        <span></span>\n" + "                    </div>\n" + "\n" + '                    <div ng-show="!main.ui.rephraseOpen"\n' + '                         ginger-widget-mode="contenteditable"\n' + '                         class="popup-body-editor"\n' + '                         id="mini-writer"\n' + '                         contenteditable="true"\n' + '                         spellcheck="false"\n' + '                         placeholder="Type, paste or select text from any website"></div>\n' + '                    <div ng-show="main.ui.rephraseOpen"\n' + '                         class="popup-body-editor rephrase"\n' + '                         contenteditable="false"\n' + '                         id="rephraser"\n' + '                         spellcheck="false"\n' + '                         placeholder="No sentences to rephrase..."></div>\n' + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + '        <div class="popup-rephrase" ng-if="main.ui.rephraseOpen">\n' + '            <div class="popup-rephrase-header">\n' + "                <h3>Rephrase</h3>\n" + '                <div class="popup-rephrase-header-controls">\n' + '                    <a ng-class="{\'disabled\': main.ui.previousDisabled}" ng-click="main.rephrase.step(\'backward\')"><i class="gingericon-caret-left"></i>&nbsp; Previous</a><a ng-class="{\'disabled\': main.ui.nextDisabled}" ng-click="main.rephrase.step(\'forward\')">Next &nbsp;<i class="gingericon-caret-right"></i></a><a ng-click="main.ui.closeRephrase()">Done</a>\n' + "                </div>\n" + "            </div>\n" + "            <div class=\"popup-rephrase-body\" ng-class=\"{'loading': main.rephrase.loading, 'limited' : main.rephrase.limited}\">\n" + '                <div class="popup-rephrase-body-limit" ng-if="main.rephrase.limited">\n' + '                    <div class="popup-rephrase-body-limit-left">\n' + '                        <div class="popup-rephrase-body-limit-title">\n' + "                            Unlimited Rephrasing\n" + "                        </div>\n" + "                        <p>\n" + "                            Inspiring alternatives to boost your<br>\n" + "                            creativity, clarity and style.\n" + "                        </p>\n" + "                    </div>\n" + '                    <a ng-click="main.reporterGA4({event: gaFields.GAEvent.premiumClick, category: gaFields.GACategory.Premium, trigger: gaFields.GATrigger.limitReachedRephrase, interface: gaFields.GAInterface.miniWriter})"\n' + '                       href="{{config.urlBase}}/online_store/ginger_upgrade?cp=new-hp-store-topnav&autk={{main.session.token}}"\n' + '                       target="_blank"\n' + '                       class="popup-rephrase-body-limit-button">\n' + "                        Go Premium\n" + "                    </a>\n" + "                </div>\n" + '                <ul ng-if="main.rephrase.result.length">\n' + '                    <li class="popup-rephrase-body-short-sentence" ng-if="main.ui.rephraseShortSentence">\n' + "                        <b>The rephraser is best tuned for sentences between 4 and 30 words.</b>\n" + "                    </li>\n" + '                    <li ng-repeat="result in main.rephrase.result" ng-click="main.rephrase.use($index)" ng-class="{\'active\':($index===main.rephrase.selectedIndex)}">\n' + '                        <a class="popup-rephrase-body-element">\n' + '                            <div class="popup-rephrase-body-element-fragments">\n' + '                                <span ng-repeat="fragment in result.fragments" ng-class="{\'popup-rephrase-body-element-changed\':fragment.changed}">{{fragment.text}}</span>\n' + "                            </div>\n" + '                            <div class="popup-rephrase-body-element-master">\n' + "                                {{main.rephrase.masterPhrase}}\n" + "                            </div>\n" + "                        </a>\n" + "                    </li>\n" + "                </ul>\n" + '                <div class="popup-rephrase-body-empty" ng-if="!main.rephrase.result.length && !main.rephrase.loading">\n' + "                    No alternatives found (text too short, too long or too complex)\n" + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + '        <div class="popup-foot" ng-if="!main.ui.rephraseOpen">\n' + '            <div class="popup-foot-row mute">\n' + '                    <div class="popup-body-counter" ng-if="!main.ui.rephraseOpen" ng-class="{\'popup-body-counter-limited\': main.charcount>main.charLimit}" id="popup-body-counter">\n' + "                        <span>{{main.charcount || 0}}</span>/{{main.charLimit}} Characters\n" + '                        <span class="popup-body-words">{{main.wordsCount}} Words</span></br>\n' + '                        <span class="popup-body-counter-warning">Your text was partially checked.</span>\n' + '                        <div ng-if="session.license !== undefined && session.license!==2" class="popup-body-counter-premium">\n' + "                            \x3c!-- GACall --\x3e\n" + '                            <a ng-click="main.reporterGA4({event: gaFields.GAEvent.premiumClick, category: gaFields.GACategory.Premium, trigger: gaFields.GATrigger.limitReachedText, interface: gaFields.GAInterface.miniWriter})"\n' + '                               target="_blank" href="{{config.urlBase}}/online_store/ginger_upgrade?cp=new-hp-store-topnav&autk={{session.token}}">Go Premium</a> to correct longer texts.\n' + "                        </div>\n" + "                    </div>\n" + '                <div class="popup-foot-buttons">\n' + '                    <a ng-if="main.ui.showCopyButton"  ng-mousedown="main.ui.openRephrase($event)" class="popup-body-editor-button rephrase">\n' + '                        <span><img src="../assets/rephrase-new-white.svg" alt=""> Rephrase</span>\n' + "                    </a>\n" + '                    <a class="popup-foot-button" ng-if="session && !session.isAnonym" title="Open writer" target="_blank" ng-click="main.ui.openBigWriter()" rel="noopener"><i class="gingericon-expand"></i></a>\n' + "                </div>\n" + '                \x3c!--<a class="popup-foot-app" target="_blank" href="https://www.gingersoftware.com/myginger/apps"> <i class="gingericon-apps"></i> Ginger Apps</a>--\x3e\n' + "            </div>\n" + "\n" + '            <div ng-if="!session || session.isAnonym" class="popup-foot-row popup-foot-loggedout">\n' + '                <div class="popup-foot-loggedout-left">\n' + "                    Sign up <em>for free</em> to<br>\n" + "                    unlock key features\n" + "                </div>\n" + '                <div class="popup-foot-loggedout-right">\n' + "                    <ul>\n" + "                        <li>\n" + "                            Correct text as you type on any website\n" + "                        </li>\n" + "                        <li>\n" + "                            Enable/Disable Ginger on preferred websites\n" + "                        </li>\n" + "                    </ul>\n" + '                    <div class="popup-foot-loggedout-right-actions">\n' + '                        <a ng-click="main.ui.openAuthPage(\'signUp\')" class="btn">Sign up</a><span class="popup-foot-loggedout-right-actions-login">\n' + "                        Already have an account?\n" + '                        <a ng-click="main.ui.openAuthPage(); main.reporterGA4({\n' + "                        event: gaFields.GAEvent.loginClick,\n" + "                        category: gaFields.GACategory.Login,\n" + "                        trigger: gaFields.GATrigger.banner,\n" + "                        interface: gaFields.GAInterface.miniWriter,\n" + '                    })">Log in</a></span>\n' + "                    </div>\n" + "                </div>\n" + "            </div>\n" + "        </div>\n" + "\n" + '        <div class="selection-popup" ng-if="main.ui.showSelectionPopup">\n' + '        \x3c!--<div class="selection-popup">--\x3e\n' + '            <div class="selection-popup-overlay" ng-click="main.rejectReplaceContentWithSelection()"></div>\n' + '            <div class="selection-popup-body">\n' + "                <b>Do you want to check the selected text for mistakes?</b>\n" + "                <span>If you do so, you'll lose your current text.</span>\n" + '                <button type="button" class="btn decline" ng-click="main.rejectReplaceContentWithSelection()">\n' + "                    No\n" + "                </button>\n" + '                <button type="button" class="btn" ng-click="main.acceptReplaceContentWithSelection()">\n' + "                    Yes\n" + "                </button>\n" + "            </div>\n" + "        </div>\n" + "    </div>\n" + "</div>\n" + "");
} ]);

angular.module("partials/login.partial.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("partials/login.partial.html", '\x3c!--<iframe src="{{login.authFrameUrl}}" class="popup-authframe" frameborder="0"></iframe>--\x3e\n' + '<div class="popup-login">\n' + '    <div class="popup-head">\n' + '        <div class="popup-head-logo"><img src="../assets/ginger-logo.svg" alt=""></div>\n' + "    </div>\n" + '    <div class="popup-login-body">\n' + "        <h2>Sign up now to unlock key features</h2>\n" + '        <div class="popup-login-body-features">\n' + "            <ul>\n" + '                <li><img src="../assets/ginger-login-poup-1.png" alt="Ginger Correct"> Correct your text as you type on any website</li>\n' + '                <li><img src="../assets/ginger-login-poup-2.png" alt="Ginger Enable/Disable"> Enable/Disable Ginger on preferred websites</li>\n' + '                <li><img src="../assets/ginger-login-poup-3.png" alt="Ginger Personal dictionary"> Store your personal dictionary</li>\n' + "            </ul>\n" + "        </div>\n" + '        <a href="javascript:" ng-click="login.openAuthPage()" class="popup-login-body-btn">Login</a>\n' + '        <div class="popup-login-body-link">Don’t have an account? <a href="javascript:" ng-click="login.openAuthPage(\'signup\')">Sign Up It’s free</a></div>\n' + "    </div>\n" + "</div>\n" + "");
} ]);

angular.module("partials/notsupported.partial.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("partials/notsupported.partial.html", '<div class="popup-not-supported">\n' + '    <div class="popup-head">\n' + '        <div class="popup-head-logo"><img src="../assets/popup-logo.png" alt=""> for <span>{{::config.platform}}</span></div>\n' + "        <div class=\"popup-head-license\" ng-class=\"{'popup-head-license-basic':(session.license==1),'popup-head-license-premium':(session.license==2)}\"></div>\n" + '        <div class="popup-head-user dd" ng-class="{\'dd-open\':notsupported.ui.userListOpen}" mouseaway="notsupported.ui.setUserListOpen(false)">\n' + '            <a href="javascript:" class="dd-trigger" ng-click="notsupported.ui.setUserListOpen()"><span>{{::session.name}}</span><i class="gingericon-dropdown-arrow"></i></a>\n' + '            <div class="dd-content" ng-mouseover="notsupported.ui.setUserListOpen(true)">\n' + '                <div class="popup-head-user-body">\n' + '                    <div class="popup-head-user-body-email">{{::session.email}}</div>\n' + "                </div>\n" + '                <div class="popup-head-user-foot">\n' + '                    <a ng-click="notsupported.ui.logout()" class="btn">Log out</a>\n' + "                </div>\n" + "            </div>\n" + "        </div>\n" + "    </div>\n" + '    <div class="popup-body popup-body-nonsupported">\n' + '        <div class="popup-container">\n' + '        <div class="popup-body-nonsupported-title">\n' + '            <img class="popup-body-favicon" ng-if="notsupported.faviconUrl" ng-src="{{notsupported.faviconUrl}}"> {{notsupported.currentHostName}} Not Supported\n' + "        </div>\n" + "        <p>\n" + '            We hope to support {{notsupported.currentHostName}} in the future. But until then, you can use our <br><a href="{{config.urlBase}}/ginger-writer" target="_blank" rel="noopener">Ginger Writer</a>.\n' + "        </p>\n" + "        </div>\n" + "    </div>\n" + "\n" + '    <div class="popup-foot">\n' + "\n" + '        <div class="popup-container">\n' + '        <div class="popup-foot-row mute" >\n' + '            <a class="popup-foot-app" target="_blank" href="{{config.urlBase}}/ginger-writer" rel="noopener"> <i class="gingericon-writer"></i> Ginger Writer</a>\n' + '            <a class="popup-foot-app" target="_blank" href="{{config.urlBase}}/myginger/apps"> <i class="gingericon-apps"></i> Ginger Apps</a>\n' + "        </div>\n" + "        </div>\n" + "    </div>\n" + "</div>\n" + "");
} ]);
//# sourceMappingURL=popup.min.js.map