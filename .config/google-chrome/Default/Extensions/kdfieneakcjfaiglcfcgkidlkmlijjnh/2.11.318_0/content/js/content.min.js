/*
Code architecture and implementation by kristof.mihaly@nomo.hu
For Ginger Software Ltd.
Ginger Grammar Checker Chrome Extension
*/
var $gingerWidgetJquery = $.noConflict(true);

if (!gingerModule) {
    var gingerModule = function(moduleName, module) {
        var modules = {};
        var initModule = function(moduleName) {
            var module = modules[moduleName];
            module.module = module.classCache();
            module.isInited = true;
        };
        var load = function(moduleName, module, deps) {
            if (modules[moduleName]) {
                if (console && console.log) console.log("Module already loaded: " + moduleName, "...overwriting module");
            }
            modules[moduleName] = {
                classCache: module,
                isInited: false,
                deps: deps
            };
            return modules[moduleName];
        };
        var hasAllDependencies = function(deps) {
            if (deps && deps.length) {
                var dependenciesLoaded = true;
                for (var di = 0; di < deps.length; di++) {
                    if (!hasAllDependencies(deps[di])) {
                        dependenciesLoaded = false;
                        break;
                    }
                }
                return dependenciesLoaded;
            } else {
                return true;
            }
        };
        var get = function(moduleName, returnClass) {
            if (typeof modules[moduleName] === "undefined") {
                throw "Module '" + moduleName + "' is not loaded. Check dependency in the end of your module definition.";
            }
            if (!hasAllDependencies(moduleName.deps)) {
                throw "Module '" + moduleName + "' doesn't have all dependencies loaded.";
            }
            if (!modules[moduleName].isInited) {
                initModule(moduleName);
            }
            if (returnClass) return modules[moduleName].classCache; else return modules[moduleName].module;
        };
        var debug = function(moduleName) {
            if (!modules[moduleName]) {
                console.log(moduleName, "not added to project or has not been loaded");
                return false;
            } else if (!modules[moduleName].isInited) {
                console.log("module ", moduleName, "not loaded, because");
                var deps = modules[moduleName].deps;
                if (deps && deps.length) {
                    var hasEveryThingLoaded = true;
                    for (var i = 0; i < deps.length; i++) {
                        var dep = deps[i];
                        hasEveryThingLoaded = hasEveryThingLoaded && debug(dep);
                    }
                    return hasEveryThingLoaded;
                } else {
                    return true;
                }
            } else {
                return true;
            }
        };
        return {
            load: load,
            get: get,
            debug: debug
        };
    }();
}

(function() {
    var module = gingerModule.load("widget.ajaxQueue", function() {
        var ajaxQueue = $gingerWidgetJquery({});
        var flush = function() {
            ajaxQueue.clearQueue();
        };
        $gingerWidgetJquery.ajaxQueue = function(ajaxOpts) {
            var jqXHR, dfd = $gingerWidgetJquery.Deferred(), promise = dfd.promise();
            var queue = ajaxQueue.queue(doRequest);
            promise.abort = function(statusText) {
                if (jqXHR && jqXHR.abort) {
                    return jqXHR.abort(statusText);
                }
                var queue = ajaxQueue.queue(), index = $gingerWidgetJquery.inArray(doRequest, queue);
                if (index > -1) {
                    queue.splice(index, 1);
                }
                dfd.rejectWith(ajaxOpts.context || ajaxOpts, [ promise, statusText, "" ]);
                return promise;
            };
            function doRequest(next) {
                jqXHR = $gingerWidgetJquery.ajax(ajaxOpts).done(dfd.resolve).fail(dfd.reject);
            }
            return promise;
        };
        return {
            flush: flush
        };
    });
})();

(function() {
    var module = gingerModule.load("widget.api", function() {
        var eventScope = $gingerWidgetJquery({});
        var config = {};
        var cache = gingerModule.get("widget.cache");
        var lastSentenceRequest = {};
        var loaderTimeout = null;
        var loaderTimeoutGrace = 600;
        var queueLine = [];
        var queueExec = function() {
            if (queueLine.length) queueLine[0]();
        };
        var queue = function(xhrConfig) {
            var deferred = $gingerWidgetJquery.Deferred();
            if (xhrConfig) {
                queueLine.push(function() {
                    var me = this;
                    $gingerWidgetJquery.ajax(xhrConfig).then(function(result) {
                        queueLine.splice(0, 1);
                        queueExec();
                        deferred.resolve(result);
                    }, function(result) {
                        queueLine.splice(0, 1);
                        queueExec();
                        deferred.reject(result);
                    });
                });
            }
            if (queueLine.length === 1) {
                queueExec();
            }
            return deferred.promise();
        };
        var detectLang = function(word, next) {
            var getCache = cache.get("api.detectLang", word);
            if (getCache) {
                next(getCache);
            } else {
                var payload = {
                    inputText: word
                };
                var detectReq = queue({
                    url: `${gingerModule.get("widget.config").get("urlDetectLang")}?text=${word}`,
                    method: "GET",
                    responseType: "json",
                    accept: "*/*",
                    headers: {
                        "X-Reverso-Origin": gingerModule.get("widget.config").get("extOrigin")
                    }
                }).then(function resolve(res) {
                    cache.set("api.detectLang", word, res);
                    next(res);
                }, function reject() {});
            }
        };
        var checkWordSpell = function(word, next) {
            var getCache = cache.get("api.wordSpell", word);
            if (getCache) {
                next(getCache);
            } else {
                ajaxStatus(true);
                var payload = {
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    lang: gingerModule.get("widget.config").get("dialect"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: encodeURIComponent(word),
                    isFirstInPhrase: "false"
                };
                if (!gingerModule.get("widget.session").get("isAnonym")) {
                    payload.userIdentifier = gingerModule.get("widget.session").get("userId");
                }
                queue({
                    url: gingerModule.get("widget.config").get("urlIsSpelledCorrectly"),
                    data: payload,
                    datatype: "jsonp",
                    jsonpCallback: "gingerModuleApi.checkWordSpell"
                }).then(function(response) {
                    ajaxStatus(false);
                    if (response.ExceptionType) {
                        return;
                    }
                    cache.set("api.wordSpell", word, response);
                    next(response);
                }, function() {
                    ajaxStatus(false);
                });
            }
        };
        var checkSentence = function(sentence, next) {
            var cleanSentence = sentence.text;
            var getCache = cache.get("api.sentence", cleanSentence);
            if (getCache) {
                if (getCache.response !== null) {
                    next(JSON.parse(JSON.stringify(getCache.response)));
                } else {
                    getCache.cb.push(next);
                }
            } else {
                cache.set("api.sentence", cleanSentence, {
                    response: null,
                    cb: [ next ]
                });
                if (sentence.id != null && lastSentenceRequest.sentenceId === sentence.id && lastSentenceRequest.abort) {
                    ajaxStatus(false);
                    lastSentenceRequest.abort();
                }
                var isAnonymUser = gingerModule.get("widget.session").get("isAnonym");
                var payload = {
                    securedPage: "false",
                    lang: gingerModule.get("widget.config").get("dialect"),
                    apiKey: gingerModule.get("widget.config").get("apiKey"),
                    clientVersion: gingerModule.get("widget.config").get("version"),
                    text: sentence.text,
                    isOnTheFly: "false"
                };
                var url = gingerModule.get("widget.config").get("urlDocument");
                var urlWithParams = `${url}?lang=${payload.lang}&apiKey=${payload.apiKey}`;
                if (!isAnonymUser) {
                    payload.userIdentifier = gingerModule.get("widget.session").get("userId");
                    urlWithParams += `&userIdentifier=${payload.userIdentifier}`;
                }
                ajaxStatus(true);
                lastSentenceRequest = queue({
                    url: urlWithParams,
                    data: sentence.text,
                    contentType: "text/plain",
                    datatype: "json",
                    method: "POST"
                }).then(function(res) {
                    var response = res.GingerTheDocumentResult;
                    ajaxStatus(false);
                    eventScope.trigger("grammarcheck.sent");
                    if (response.ExceptionType) {
                        cache.remove("api.sentence", cleanSentence);
                        return;
                    }
                    var check = cache.get("api.sentence", cleanSentence);
                    if (check && check.cb) {
                        for (var i = 0; i < check.cb.length; i++) {
                            var cbResp = gingerModule.get("widget.utils").clone(response);
                            if (check.cb[i]) check.cb[i](cbResp);
                        }
                    }
                    cache.set("api.sentence", cleanSentence, {
                        response: response
                    });
                }, function(e) {
                    ajaxStatus(false);
                    cache.remove("api.sentence", cleanSentence);
                });
                lastSentenceRequest.sentenceId = sentence.id;
            }
        };
        var pendingRequests = 0;
        var ajaxStatus = function(ajaxOpened) {
            if (loaderTimeout) loaderTimeout = clearTimeout(loaderTimeout);
            if (ajaxOpened) {
                pendingRequests++;
                if (pendingRequests == 1) eventScope.trigger("ajax.start");
            } else {
                pendingRequests--;
                if (pendingRequests == 0) eventScope.trigger("ajax.end");
            }
        };
        var dumpCorrectionCache = function() {
            var cleanedCache = {};
            var dump = cache.dump();
            var cleanPool = function(pool) {
                if (!dump[pool]) return {};
                var cleaned = {};
                for (var key in dump[pool]) {
                    var cacheItem = dump[pool][key];
                    if (cacheItem.response) cleaned[key] = cacheItem;
                }
                return cleaned;
            };
            cleanedCache["api.wordSpell"] = cleanPool("api.wordSpell");
            cleanedCache["api.sentence"] = cleanPool("api.sentence");
            return cleanedCache;
        };
        var restoreCorrectionCache = function(cacheToRestore) {
            for (var pool in cacheToRestore) {
                for (var key in cacheToRestore[pool]) {
                    cache.set(pool, key, cacheToRestore[pool][key]);
                }
            }
        };
        var init = function() {};
        init();
        return {
            checkWordSpell: checkWordSpell,
            checkSentence: checkSentence,
            dumpCorrectionCache: dumpCorrectionCache,
            restoreCorrectionCache: restoreCorrectionCache,
            detectLang: detectLang,
            listen: eventScope
        };
    }, [ "widget.utils", "widget.cache", "widget.ajaxQueue", "widget.session" ]);
})();

(function() {
    var module = gingerModule.load("widget.backgroundConnector", function() {
        var call = function(config, cb) {
            try {
                gingerModule.get("gingerchromeext.browser").runtime.sendMessage(config, function(result, a, b) {
                    if (cb) cb(result);
                });
            } catch (e) {
                console.log(e);
            }
        };
        var callPromise = function(config) {
            var deferred = $gingerWidgetJquery.Deferred();
            config.promise = true;
            call(config, function(callBackResult) {
                if (callBackResult.rejected) {
                    deferred.reject(callBackResult.result);
                } else {
                    deferred.resolve(callBackResult.result);
                }
            });
            return deferred.promise();
        };
        var proxy = function(config) {
            var proxyFunction = function(arg, cb) {
                if (config.promise) {
                    config.callArgs = [];
                    for (var ai = 0; ai < arguments.length; ai++) {
                        config.callArgs.push(arguments[ai]);
                    }
                    return callPromise(config);
                } else {
                    config.callArgs = [ arg ];
                    return call(config, cb);
                }
            };
            return proxyFunction;
        };
        return {
            call: call,
            callPromise: callPromise,
            proxy: proxy
        };
    }, []);
})();

(function() {
    var module = gingerModule.load("widget.cache", function() {
        var cache = {};
        var set = function(pool, key, value) {
            if (!pool) pool = "default";
            if (!cache[pool]) cache[pool] = {};
            cache[pool][key] = value;
            return value;
        };
        var get = function(pool, key) {
            if (cache[pool] && cache[pool][key]) return cache[pool][key]; else return null;
        };
        var dump = function() {
            return cache;
        };
        var restore = function(restoreCache) {
            cache = restoreCache;
        };
        var remove = function(pool, key) {
            return delete cache[pool][key];
        };
        var flush = function() {
            cache = {};
        };
        return {
            set: set,
            get: get,
            remove: remove,
            flush: flush,
            dump: dump,
            restore: restore
        };
    });
})();

(function() {
    var module = gingerModule.load("widget.caret", function() {
        var get = function(node, pos) {
            node = $gingerWidgetJquery(node).get(0);
            var target = node;
            var isContentEditable = target && (target.getAttribute("contenteditable") === "" || target.getAttribute("contenteditable") === true || target.getAttribute("contenteditable") == "true");
            if (arguments.length === 1) {
                if (target) {
                    if (window.getSelection) {
                        if (isContentEditable) {
                            var range1 = window.getSelection().getRangeAt(0), range2 = range1.cloneRange();
                            range2.selectNodeContents(target);
                            range2.setEnd(range1.endContainer, range1.endOffset);
                            return range2.toString().length;
                        }
                        return target.selectionStart;
                    }
                    if (target.selectionStart) return target.selectionStart;
                }
                return;
            }
            if (target) {
                if (pos == -1) pos = node[isContentEditable ? "text" : "val"]().length;
                if (window.getSelection) {
                    if (isContentEditable) {
                        target.focus();
                        window.getSelection().collapse(target.firstChild, pos);
                    } else target.setSelectionRange(pos, pos);
                }
                if (!isContentEditable) target.focus();
            }
        };
        return {
            get: get
        };
    }, []);
})();

(function() {
    var module = gingerModule.load("widget.config", function() {
        var eventScope = $gingerWidgetJquery("<eventScope>");
        var config = {
            userId: null,
            apiKey: null,
            version: "0.0.210",
            widgetUid: null,
            charLimit: null,
            source: null,
            dialect: "US",
            platform: "chrome",
            loggedOutApprovalsLeft: 10,
            loggedInApprovalsLeft: "{}",
            licenseStatus: {
                free: 0,
                premium: 2
            }
        };
        gingerModule.get("widget.backgroundConnector").call({
            module: "gingerchromeext.background.config",
            callFunction: "get"
        }, function(result) {
            if (result) {
                merge(result);
            }
        });
        var get = function(property) {
            return property ? config[property] : config;
        };
        var set = function(property, value) {
            config[property] = value;
            var eventData = {
                changed: {}
            };
            eventData.changed[property] = value;
            eventScope.trigger("change", eventData);
            eventScope.trigger("change/" + property, value);
            return config;
        };
        var merge = function(mergeConfig) {
            config = gingerModule.get("widget.utils").merge(config, mergeConfig);
        };
        return {
            listen: eventScope,
            get: get,
            set: set,
            merge: merge
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.contentManager", function() {
        var emailServicesHostnames = {
            icloud: /icloud.com/,
            zoho: /mail.zoho.com|mail.zoho.eu/,
            yahoo: /mail.yahoo.com/,
            protonmail: /mail.protonmail.com|old.protonmail.com/,
            outlook: /outlook.live.com|outlook.office365.com|outlook.office.com/,
            gmail: /gmail.com|mail.google.com/,
            aol: /mail.aol.com/,
            gmx: /1und1.de|gmx.net|gmx.com|web.de/,
            localhost: /localhost/
        };
        var MATCH_BLOCK_TAG_NAME = "br|p|div|h\\d|table|ol|ul|li|tbody|de|dt|td|th|tr|caption|textarea|button|select|pre|address|body";
        var SKIP_TAGS = "code|noscript|object|style|template|script|var|img|blockquote|svg|canvas";
        var MATCH_THROUGH_CLOSE = "[^>]*";
        var MATCH_OPTIONAL_SLASH = "/?";
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        function enclose(pattern, save) {
            return (save ? "(" : "(?:") + pattern + ")";
        }
        var patterns = {
            compactBlockTags: {
                pattern: new RegExp("<" + enclose(MATCH_OPTIONAL_SLASH, true) + enclose(MATCH_BLOCK_TAG_NAME) + MATCH_THROUGH_CLOSE + ">", "gi"),
                replace: "<+>"
            },
            aggregateConsecutiveOpeningBlockTags: {
                pattern: new RegExp("(?:<" + enclose(MATCH_BLOCK_TAG_NAME) + MATCH_THROUGH_CLOSE + ">)+", "gi"),
                replace: "<ginger-block-elem>"
            },
            aggregateConsecutiveClosingBlockTags: {
                pattern: new RegExp("(?:</" + enclose(MATCH_BLOCK_TAG_NAME) + MATCH_THROUGH_CLOSE + ">)+", "gi"),
                replace: "</ginger-block-elem>"
            },
            aggregateConsecutiveOpenClosingBlockTags: {
                pattern: new RegExp("(?:</ginger-block-elem><ginger-block-elem>)", "gi"),
                replace: "<ginger-block-break/>"
            },
            representBlockElemDifferencesWithNewLineRepresentation: {
                pattern: new RegExp("(?:<(ginger-block-elem|/ginger-block-elem|ginger-block-break/)>)", "gi"),
                replace: String.fromCharCode(31)
            },
            removeTrailingAndStartingNewLines: {
                pattern: new RegExp("(^|$)"),
                replace: ""
            },
            ignoreTags: {
                pattern: /<(\/?)(code|noscript|object|style|template|script|var|img|blockquote|svg|canvas)([^>]*)>/gi,
                replace: "<$1!>"
            },
            removeNewLines: {
                pattern: /\n/gi,
                replace: " "
            }
        };
        var convertHTMLtoPlainText = function(html) {
            html = html.replace(/<style([\s\S]*?)<\/style>/gi, "");
            html = html.replace(/<script([\s\S]*?)<\/script>/gi, "");
            html = html.replace(/<\/div>/gi, "\n");
            html = html.replace(/<\/li>/gi, "\n");
            html = html.replace(/<li>/gi, "  *  ");
            html = html.replace(/<\/ul>/gi, "\n");
            html = html.replace(/<\/p>/gi, "\n");
            html = html.replace(/<br\s*[\/]?>/gi, "\n");
            html = html.replace(/<[^>]+>/gi, "");
            html = $gingerWidgetJquery("<textarea />").html(html).text();
            return html;
        };
        var convertReactHTMLtoText = function(html) {
            html = html.replace(new RegExp("<brs*/?>", "g"), "\n");
            var block = document.createElement("div");
            block.innerHTML = html;
            var blocks = block.querySelectorAll('[data-block="true"]');
            if (blocks.length > 0) {
                html = "";
                blocks.forEach(function(b, i, a) {
                    html = html + b.innerText.replace(/\s+$/, "") + (i < a.length - 1 ? "\n" : "");
                });
            } else {
                html = html.replace(/<[^>]+>/gi, "");
                html = $gingerWidgetJquery("<textarea />").html(html).text();
            }
            return html;
        };
        var dispatchPostRewriteEvents = function(events, area) {
            if (!events) events = [];
            if (/textarea/i.test(area.nodeName)) {
                events.push("change");
            }
            for (var ei = 0; ei < events.length; ei++) {
                var prEvent = document.createEvent("CustomEvent");
                prEvent.initCustomEvent(events[ei], true, true, null);
                area.dispatchEvent(prEvent);
            }
        };
        var setVal = function(element, value, from, to, fromRephrase, cords) {
            var areaConfig = gingerModule.get("widget.siteSettings").get(window.location.href, element);
            if (isGoogleDocs()) {
                return gingerModule.get(areaConfig.rewriter).rewrite(value, cords, fromRephrase);
            }
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(element);
            var isReactArea = isRTE && $gingerWidgetJquery(element).find("[data-block='true']").length > 0 || isRTE && $gingerWidgetJquery(element).closest("[data-reactroot]").length;
            var forceMode = element.getAttribute("ginger-widget-mode");
            if (forceMode && forceMode === "contenteditable") {
                isReactArea = false;
            }
            var isReactUsingApp = areaConfig.isReactUsingApp ?? false;
            if (/<[^>]+>|&\w+;/.test(value)) {
                if (isReactArea && isRTE || isReactUsingApp) {
                    value = convertReactHTMLtoText(value);
                } else if (!isRTE || isReactArea) {
                    value = convertHTMLtoPlainText(value);
                } else {
                    if (gingerModule.get("widget.utils").isNotion()) {
                        $gingerWidgetJquery(element).val(value);
                        return $gingerWidgetJquery.Deferred().resolve();
                    }
                    element.innerHTML = value;
                    return $gingerWidgetJquery.Deferred().resolve();
                }
            }
            if (typeof from === "undefined" && typeof to === "undefined") {
                if (isRTE && !isReactArea) {} else if (!isRTE && !isReactArea) {
                    $gingerWidgetJquery(element).val(value);
                    dispatchPostRewriteEvents(areaConfig.postRewriteEvents, element);
                    return $gingerWidgetJquery.Deferred().resolve();
                }
            }
            var val = getVal(element);
            if (!from) from = 0;
            if (!to) to = val.replace(/\s+$/gm, "").length;
            return gingerModule.get(areaConfig.rewriter).rewrite(element, value, from, to, fromRephrase, isReactUsingApp);
        };
        var getValForPlainReact = function(element) {
            var elementClone = $gingerWidgetJquery("<div></div>").html(element.innerHTML).get(0);
            $gingerWidgetJquery(elementClone).find("[data-block='true']").prepend(String.fromCharCode(31));
            value = $gingerWidgetJquery(elementClone).text().replace(/^\x1F/, "");
            return value;
        };
        var changeTagToIgnored = function(tag) {
            var newinner = tag.innerHTML.replace(/(<[^\/][^>]*>|[\.\!\?])/g, "$1" + String.fromCharCode(28));
            tag.outerHTML = "<gingerignorepart>" + newinner + "</gingerignorepart>";
        };
        var ignoreQuotedParts = function(content, mailService) {
            if (!mailService) {
                return content;
            }
            var contentDom = document.createElement("div");
            contentDom.innerHTML = content;
            var quotes = [];
            switch (mailService) {
              case "localhost":
                quotes = contentDom.querySelectorAll(".quoted-part-of-email");
                break;

              case "gmx":
                quotes = contentDom.querySelectorAll('[name="quote"]');
                break;

              case "aol":
                var aolQuotes = contentDom.querySelectorAll("div");
                if (aolQuotes.length) {
                    quotes = Array.from(aolQuotes).filter(function(e) {
                        return e.previousElementSibling && e.previousElementSibling.tagName === "BR" && e.textContent && e.textContent.startsWith("-----");
                    });
                }
                break;

              case "gmail":
                quotes = contentDom.querySelectorAll('.gmail_quote, .gmail_signature, [data-smartmail="gmail_signature"]');
                break;

              case "outlook":
                quotes = $gingerWidgetJquery(contentDom.querySelectorAll('[id="divRplyFwdMsg"]')).nextAll().toArray();
                var quoteHead = contentDom.querySelector('[id="divRplyFwdMsg"]');
                if (quoteHead) {
                    quotes.push(quoteHead);
                }
                break;

              case "protonmail":
                quotes = contentDom.querySelectorAll(".protonmail_signature_block, blockquote.protonmail_quote");
                break;

              case "yahoo":
                quotes = contentDom.querySelectorAll('[class*="yahoo_quoted"], [class*="signature"]');
                break;

              case "zoho":
                quotes = contentDom.querySelectorAll('[id*="Zm-_Id_-Sgn"], [class*="zmail_extra"]');
                break;

              case "icloud":
                quotes = contentDom.querySelectorAll('blockquote[type="cite"]');
                break;
            }
            quotes.forEach(function(q) {
                changeTagToIgnored(q);
            });
            return contentDom.innerHTML.replace(/gingerignorepart/g, "!");
        };
        var getEmailService = function() {
            var loc = location.hostname;
            if (self != top && (/localhost/.test(loc) || !loc) && window.parent.location) loc = window.parent.location.hostname;
            var matchingService = null;
            Object.keys(emailServicesHostnames).forEach(function(serviceName) {
                if (emailServicesHostnames[serviceName].test(loc)) {
                    matchingService = serviceName;
                }
            });
            return matchingService;
        };
        var valCache = {};
        var getValForRTE = function(element) {
            var contents = element.innerHTML;
            if (!contents) return "";
            if (valCache.raw === element.outerHTML) {
                return valCache.value;
            }
            if (element === document.body) {
                contents = contents.replace(/<div class="ginger-extension-writer".*$/i, "").replace(/<div class="ginger-module-correctionBubble".*$/i, "");
            }
            contents = ignoreQuotedParts(contents, getEmailService());
            contents = doReplace(contents, patterns.aggregateConsecutiveOpeningBlockTags);
            contents = doReplace(contents, patterns.aggregateConsecutiveClosingBlockTags);
            contents = doReplace(contents, patterns.compactBlockTags);
            contents = doReplace(contents, patterns.aggregateConsecutiveOpenClosingBlockTags);
            contents = doReplace(contents, patterns.ignoreTags);
            contents = doReplace(contents, patterns.representBlockElemDifferencesWithNewLineRepresentation);
            contents = contents.replace(/<!>.*?<\/!>/g, "");
            if ($gingerWidgetJquery(element).css("whiteSpace") !== "pre-wrap") {
                contents = doReplace(contents, patterns.removeNewLines);
            }
            contents = doReplace(contents, patterns.removeTrailingAndStartingNewLines);
            var contentRender = document.createElement("div");
            contentRender.innerHTML = contents;
            $gingerWidgetJquery(contentRender).find(".XjviVd").remove();
            contents = contentRender.textContent;
            valCache.raw = element.outerHTML;
            valCache.value = contents;
            return valCache.value;
        };
        var doReplace = function(text, replacement) {
            return text.replace(replacement.pattern, replacement.replace);
        };
        var getVal = function(element) {
            var value;
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(element);
            var isReactArea = isRTE && $gingerWidgetJquery(element).find("[data-block='true']").length > 0 || isRTE && $gingerWidgetJquery(element).closest("[data-reactroot]").length;
            var forceMode = element.getAttribute("ginger-widget-mode");
            if (forceMode && forceMode === "contenteditable") {
                isReactArea = false;
            }
            var isWhatsAppWebArea = isRTE && /pluggable-input-body/.test(element.className);
            if (isWhatsAppWebArea) {
                value = getValForPlainReact(element);
            } else if (isRTE) {
                value = getValForRTE(element);
            } else {
                value = $gingerWidgetJquery(element).val();
            }
            value = value.replace("^\n+", "");
            return value;
        };
        return {
            setVal: setVal,
            getVal: getVal
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.correctionBubble", function() {
        var eventScope = $gingerWidgetJquery({});
        var element;
        var bubble;
        var bubbleContainer;
        var bubbleLOContainer;
        var bubbleBody;
        var bubbleLimited;
        var bubbleLogin;
        var sentence;
        var bubbleHeight = 28;
        var bubbleMargin = 0;
        var mouseHoverTimeout = null;
        var mouseHoverTimeoutInterval = 600;
        var bubbleCb = null;
        var bubbleCbData = {};
        var currentMistakeCorrection = null;
        var currentSentence = null;
        var extID = gingerModule.get("gingerchromeext.browser").runtime.id;
        var writerTarget = new RegExp(`${extID}/writer`);
        var popupTarget = new RegExp(`${extID}/popup`);
        var limitedModeDisplayTimeout;
        var loginDisplayTimeout;
        var loginDisplaySent = false;
        var gaFields = {};
        gingerModule.get("widget.backgroundConnector").call({
            module: "gingerchromeext.background.gaEvents",
            callFunction: "getAll"
        }, function(result) {
            gaFields = result;
        });
        var show = function(correction, sentence, cb, target) {
            if (!bubble || bubble.parent().length === 0) createBubble();
            if ($gingerWidgetJquery(bubble).is(":hover") && $gingerWidgetJquery(bubble).is(":visible")) return;
            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                setLimitedVisibility(true, target);
            } else {
                setLimitedVisibility(false);
            }
            clearMouseHoverTimeout();
            if (mouseHoverTimeout) mouseHoverTimeout = clearTimeout(mouseHoverTimeout);
            if (gingerModule.get("widget.session").isLoggedIn()) {
                setLoginVisibility(false);
            } else {
                gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft().then(function(res) {
                    if (res) {
                        setLoginVisibility(false);
                    } else {
                        setLoginVisibility(true, target);
                    }
                });
            }
            var mistakeElement = $gingerWidgetJquery(".gwmw-" + correction.id).eq(0);
            if (!mistakeElement) mistakeElement = $gingerWidgetJquery("#gwmw-" + correction.id);
            if (currentMistakeCorrection && currentMistakeCorrection.id === correction.id) {
                return;
            }
            currentMistakeCorrection = correction;
            currentSentence = sentence;
            bubbleCb = cb;
            $gingerWidgetJquery(bubbleBody).empty();
            var fragmentdebug = [];
            var mistakeUXFragmentFrom = correction.UXFrgFrom;
            var mistakeUXFragmentTo = correction.UXFrgTo;
            var lastFragmentEndedAt = mistakeUXFragmentFrom;
            var fragments = gingerModule.get("widget.phraseService").getSentenceFragments(sentence, mistakeUXFragmentFrom, mistakeUXFragmentTo);
            var shownCorrections = 0;
            bubbleCbData = {
                sentenceId: sentence.id,
                correctionId: correction.id,
                sentence: sentence,
                correction: correction,
                shownCorrections: shownCorrections
            };
            for (var i = 0; i < fragments.length; i++) {
                var fragmentElement;
                if (fragments[i].correction) {
                    shownCorrections += 1;
                    bubbleCbData.shownCorrections = shownCorrections;
                    var hasSuggestions = fragments[i].correction.Suggestions.length != 0;
                    fragmentElement = document.createElement("gwbm");
                    fragmentElement.id = "gwbm-" + fragments[i].correction.id;
                    fragmentElement.style.setProperty("color", "#1B94A6", "important");
                    fragmentElement.className = "ginger-module-correctionBubbleService-mistake-type-" + fragments[i].correction.CorrectionType;
                    if (hasSuggestions) {
                        fragmentElement.appendChild(document.createTextNode(fragments[i].correction.Suggestions[0].Text));
                    } else {
                        fragmentElement.appendChild(document.createTextNode(fragments[i].text));
                        fragmentElement.className += " ginger-module-correctionBubbleService-mistake-nosuggestion";
                    }
                    (function(correction, fragmentElement) {
                        var optionsBubbleForMistake = document.createElement("gwbmo");
                        if (placeBubbleUnderneath) {
                            optionsBubbleForMistake.className = "ginger-module-correctionBubbleService-mistake-bubble-under";
                        }
                        var approveOptionBubbleForMistake = document.createElement("ga");
                        var ignoreOptionBubbleForMistake = document.createElement("ga");
                        approveOptionBubbleForMistake.className = "ginger-module-correctionBubbleService-mistake-bubble-approve";
                        ignoreOptionBubbleForMistake.className = "ginger-module-correctionBubbleService-mistake-bubble-ignore";
                        approveOptionBubbleForMistake.title = "Approve the Suggestion";
                        ignoreOptionBubbleForMistake.title = "Ignore the Suggestion";
                        approveOptionBubbleForMistake.onmousedown = function(e) {
                            eventScope.trigger("approved.mistake", bubbleCbData);
                            if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                                eventScope.trigger("limited.approve");
                            } else {
                                if (!gingerModule.get("widget.session").isLoggedIn()) {
                                    gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft().then(function(res) {
                                        if (!res) {
                                            eventScope.trigger("unauthenticated.approve");
                                            return;
                                        }
                                    });
                                }
                                returnResult("approve", {
                                    correctionId: correction.id
                                }, true);
                                $gingerWidgetJquery("#gwbm-" + correction.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + correction.id).text()));
                                clearMouseHoverTimeout();
                            }
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        ignoreOptionBubbleForMistake.onmousedown = function(e) {
                            eventScope.trigger("ignored.mistake", bubbleCbData);
                            returnResult("ignore", {
                                correctionId: correction.id
                            }, true);
                            $gingerWidgetJquery("#gwbm-" + correction.id).replaceWith(document.createTextNode($gingerWidgetJquery("#gwbm-" + correction.id).text()));
                            clearMouseHoverTimeout();
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        };
                        if (hasSuggestions) {
                            optionsBubbleForMistake.appendChild(approveOptionBubbleForMistake);
                        }
                        optionsBubbleForMistake.appendChild(ignoreOptionBubbleForMistake);
                        fragmentElement.appendChild(optionsBubbleForMistake);
                    })(fragments[i].correction, fragmentElement);
                } else {
                    fragmentElement = document.createTextNode(fragments[i].text);
                }
                $gingerWidgetJquery(bubbleBody).get(0).appendChild(fragmentElement);
            }
            bubble.css("z-index", gingerModule.get("widget.utils").findHighestZIndex(mistakeElement) + 10);
            var buttonReph = document.querySelector("#ginger-button-for-rephrase");
            if (buttonReph) {
                buttonReph.style.visibility = "hidden";
            }
            bubble.show();
            var mistakeOffset = $gingerWidgetJquery(mistakeElement).offset();
            var bodyOffset = $gingerWidgetJquery(window.document.body).offset();
            if (bodyOffset.left) {
                mistakeOffset.left -= bodyOffset.left;
            }
            var mistakeHeight = $gingerWidgetJquery(mistakeElement).height();
            var mistakeWidth = $gingerWidgetJquery(mistakeElement).width();
            bubble.css("padding", bubbleMargin);
            var placeBubbleUnderneath;
            var mistakeOptionHeight = 22;
            var bubbleTopPosition = mistakeOffset.top - bubbleHeight;
            if (bubbleTopPosition - mistakeOptionHeight < 0) {
                placeBubbleUnderneath = true;
                bubbleTopPosition = mistakeOffset.top + bubbleHeight;
            } else if (bubbleTopPosition - mistakeOptionHeight <= $gingerWidgetJquery("html,body").scrollTop()) {
                placeBubbleUnderneath = true;
                bubbleTopPosition = mistakeOffset.top + bubbleHeight;
            }
            bubble.css("top", bubbleTopPosition);
            var currentPos = bubble.offset();
            var currentWidth = bubble.width();
            eventScope.trigger("show", {
                correction: currentMistakeCorrection,
                sentence: currentSentence,
                target: target,
                shownCorrections: shownCorrections
            });
            var bubbleWidth = $gingerWidgetJquery(bubbleLOContainer).is(":visible") ? $gingerWidgetJquery(bubbleLOContainer).outerWidth() : $gingerWidgetJquery(bubbleContainer).outerWidth();
            if (currentPos.top === bubbleTopPosition && currentPos.left <= mistakeOffset.left && currentPos.left + currentWidth >= mistakeOffset.left + mistakeWidth) {} else {
                bubble.css("left", mistakeOffset.left);
            }
            if (mistakeOffset.left + bubbleWidth > $gingerWidgetJquery(window).width()) {
                bubble.css("left", $gingerWidgetJquery(window).width() - bubbleWidth - 10);
            }
            return;
        };
        var hide = function(sentenceToShow, mistakeElement) {
            if (bubble) {
                if ($gingerWidgetJquery(bubble).is(":visible")) {
                    eventScope.trigger("hide", {
                        correction: currentMistakeCorrection,
                        sentence: currentSentence
                    });
                }
                var buttonReph = document.querySelector("#ginger-button-for-rephrase");
                if (buttonReph) {
                    buttonReph.style.visibility = "visible";
                }
                bubble.hide();
            }
            currentMistakeCorrection = null;
            currentSentence = null;
        };
        var clearMouseHoverTimeout = function() {
            if (mouseHoverTimeout) mouseHoverTimeout = clearTimeout(mouseHoverTimeout);
        };
        var gracefulHide = function(sentenceToShow, mistakeElement) {
            loginDisplaySent = false;
            loginDisplayTimeout = clearTimeout(loginDisplayTimeout);
            clearMouseHoverTimeout();
            mouseHoverTimeout = setTimeout(function() {
                handleHoverOut();
            }, mouseHoverTimeoutInterval);
        };
        var getClickEventTarget = function(target) {
            return writerTarget.test(target) ? gaFields.GAInterface.writer : popupTarget.test(target) ? gaFields.GAInterface.miniWriter : gaFields.GAInterface.widget;
        };
        var createBubble = function() {
            var appendToElement = document.body.hasAttribute("contenteditable") ? document.body.parentNode : document.body;
            bubble = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble' style='color: #000000 !important;'></gdiv>").appendTo(appendToElement);
            bubbleLOContainer = $gingerWidgetJquery("<gdiv style='background-color: #ffffff !important;' class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedout'><gdiv class='ginger-module-correctionBubble-login'>Log in</gdiv><gdiv style='background-color: #ffffff !important;' class='ginger-module-correctionBubble-body'>for free to continue using Ginger.</gdiv></gdiv>").appendTo(bubble);
            bubbleContainer = $gingerWidgetJquery("<gdiv style='background-color: #ffffff !important;' class='ginger-module-correctionBubble-container ginger-module-correctionBubble-container-loggedin'></gdiv>").appendTo(bubble);
            bubbleLimited = $gingerWidgetJquery("<gdiv class='ginger-module-correctionBubble-limited'>Limited mode</gdiv>").appendTo(bubbleContainer);
            bubbleLimited.on("click", function(e) {
                gingerModule.get("widget.report").reporterGA4({
                    event: gaFields.GAEvent.limitedModeClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.limitReachedCorrections,
                    interface: getClickEventTarget(e.currentTarget.baseURI)
                });
                gingerModule.get("widget.licenseLimits").approvalsUsed(0);
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            bubbleLOContainer.on("click", function(e) {
                gingerModule.get("widget.report").reporterGA4({
                    event: gaFields.GAEvent.loginClick,
                    category: gaFields.GACategory.Login,
                    trigger: gaFields.GATrigger.limitReachedCorrections,
                    interface: getClickEventTarget(e.currentTarget.baseURI)
                });
                eventScope.trigger("unauthenticated.approve.all");
                e.stopPropagation();
                e.preventDefault();
                return false;
            });
            if (gingerModule.get("widget.utils").isGoogleDocs()) {
                bubble.css("font-size", "15px");
            }
            bubbleBody = $gingerWidgetJquery("<gdiv style='background-color: #ffffff !important;' class='ginger-module-correctionBubble-body'></gdiv>").appendTo(bubbleContainer);
            var bubbleClose = $gingerWidgetJquery("<ga href='javascript:' class='ginger-module-correctionBubble-close' title='Ignore mistake'>&times;</ga>").appendTo(bubbleContainer);
            bubbleClose.on("mousedown", function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    eventScope.trigger("limited.approve");
                } else {
                    eventScope.trigger("ignore.all", bubbleCbData);
                    returnResult("ignoreAll");
                }
                return false;
            });
            bubbleBody.on("mousedown", function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                e.stopPropagation();
                if (gingerModule.get("widget.licenseLimits").isCapacityLimited()) {
                    eventScope.trigger("limited.approve.all");
                } else {
                    if (!gingerModule.get("widget.session").isLoggedIn()) {
                        gingerModule.get("widget.licenseLimits").hasLoggedOutApprovalsLeft().then(function(res) {
                            if (!res) {
                                eventScope.trigger("unauthenticatedWithinLimit.approve.all");
                                return;
                            }
                        });
                    }
                    eventScope.trigger("approve.all", bubbleCbData);
                    returnResult("approveAll");
                    hide();
                }
                return false;
            });
            if (bubble.closest("[contenteditable]").length) {
                bubble.attr("contenteditable", false);
            }
            var buttonReph = document.querySelector("#ginger-button-for-rephrase");
            if (buttonReph) {
                buttonReph.style.visibility = "visible";
            }
            bubble.hide();
            $gingerWidgetJquery(bubble).on("mouseleave", function hoverOut(e) {
                gracefulHide();
            });
            $gingerWidgetJquery(bubble).on("mouseenter", function hoverIn(e) {
                setTimeout(clearMouseHoverTimeout, 60);
            });
            setLimitedVisibility(false);
        };
        var returnResult = function(result, data, keepOpen) {
            if (bubbleCb) {
                bubbleCb(result, data ? data : bubbleCbData);
            }
            if (!keepOpen) hide();
        };
        var handleHoverOut = function() {
            bubbleCb = null;
            hide();
        };
        var setLoginVisibility = function(visible, target = "widget") {
            var loggedinContainer = $gingerWidgetJquery(bubbleContainer);
            var loggedoutContainer = $gingerWidgetJquery(bubbleLOContainer);
            if (visible) {
                if (!loginDisplaySent) {
                    loginDisplayTimeout = setTimeout(function() {
                        gingerModule.get("widget.report").reporterGA4({
                            event: gaFields.GAEvent.loginDisplay,
                            category: gaFields.GACategory.Login,
                            trigger: gaFields.GATrigger.limitReachedCorrections,
                            interface: target
                        });
                        loginDisplaySent = true;
                    }, 100);
                }
                loggedinContainer.hide();
                loggedoutContainer.show();
            } else {
                loggedinContainer.show();
                loggedoutContainer.hide();
            }
        };
        var setLimitedVisibility = function(visible, target = "widget") {
            if (visible) {
                if (limitedModeDisplayTimeout) {
                    limitedModeDisplayTimeout = clearTimeout(limitedModeDisplayTimeout);
                }
                limitedModeDisplayTimeout = setTimeout(function() {
                    gingerModule.get("widget.report").reporterGA4({
                        event: gaFields.GAEvent.limitedModeDisplay,
                        category: gaFields.GACategory.Correct,
                        trigger: gaFields.GATrigger.limitReachedCorrections,
                        interface: target
                    });
                }, 1e3);
                $gingerWidgetJquery(bubble).addClass("ginger-module-correctionBubble-limitedmode");
            } else {
                $gingerWidgetJquery(bubble).removeClass("ginger-module-correctionBubble-limitedmode");
            }
        };
        var init = function() {};
        return {
            show: show,
            hide: hide,
            gracefulHide: gracefulHide,
            listen: eventScope,
            setLimitedVisibility: setLimitedVisibility,
            init: init
        };
    }, [ "widget.utils", "widget.inputFinder", "widget.licenseLimits", "widget.session", "widget.report" ]);
})();

(function() {
    var module = gingerModule.load("widget.correctionService", function(config) {
        var ignoredCorrections = [];
        var correctSpellingOfSentence = function(sentence, next) {
            var completedCorrections = sentence.words.length;
            var corrections = [];
            if (sentence.words.length === 0) {
                next(sentence);
            }
            for (var i = 0; i < sentence.words.length; i++) {
                if (ignoredCorrections.indexOf(sentence.words[i]) === -1) (function(wordindex) {
                    var word = sentence.words[wordindex];
                    var trimmed = gingerModule.get("widget.utils").trimAndMatch(word.text);
                    gingerModule.get("widget.api").checkWordSpell(trimmed.text, function(correction) {
                        word.correction = correction.IsSpelledCorrectlyResult;
                        if (!word.correction.IsCorrect) {
                            var from = word.startsAt + trimmed.pre.length - sentence.startsAt;
                            var to = from + trimmed.text.length;
                            to = to - 1;
                            if (word.correction.IsCorrect !== true) {
                                var correctionMatch = sentence.correction && sentence.correction.Corrections ? findCorrectionByFromTo(sentence.correction.Corrections, from, to) : null;
                                var correctionObject = {
                                    From: from,
                                    To: to,
                                    UXFrgFrom: from,
                                    UXFrgTo: to,
                                    Type: 1,
                                    Suggestions: [],
                                    Mistakes: [ {
                                        From: from,
                                        To: to,
                                        CanAddToDict: true
                                    } ],
                                    id: correctionMatch ? correctionMatch.id : gingerModule.get("widget.utils").generateUID()
                                };
                                corrections.push(correctionObject);
                            }
                        }
                        completedCorrections--;
                        if (completedCorrections == 0) {
                            if (!sentence.correction) {
                                sentence.correction = {
                                    checkType: "shallow"
                                };
                            }
                            sentence.correction.Corrections = corrections;
                            next(sentence);
                        }
                    });
                })(i);
            }
        };
        var correctGrammarOfSentence = function(sentence, next) {
            sentence = JSON.parse(JSON.stringify(sentence));
            if (sentence.words.length) {
                var lastWordIndex = sentence.words.length - 1;
                var lastWord = sentence.words[lastWordIndex].text;
                var lastWordCutRegex = /[\s\n]+$/g;
                var lastWordCutMatch = lastWord.match(lastWordCutRegex);
                if (lastWordCutMatch) {
                    sentence.text = sentence.text.replace(lastWordCutRegex, "");
                    sentence.words[lastWordIndex].text = lastWord.replace(lastWordCutRegex, "");
                }
            }
            gingerModule.get("widget.api").checkSentence(sentence, function(correction) {
                try {
                    sentence.correction = correction;
                    if (lastWordCutMatch) {
                        sentence.words[lastWordIndex].text += lastWordCutMatch;
                        sentence.text += lastWordCutMatch;
                    }
                    for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                        var correction = sentence.correction.Corrections[i];
                        if (!correction.id) {
                            correction.id = gingerModule.get("widget.utils").generateUID();
                        }
                    }
                    next(sentence);
                } catch (e) {
                    if (console && console.error) console.error(e);
                    throw new Error(e);
                    next(sentence);
                }
            });
        };
        var ignoreMistake = function(mistake, sentence, next) {
            mistake.ignored = true;
            if (mistake.CorrectionType === 1) {
                var originalSentence = sentence.text;
                var ignoredWord = originalSentence.substring(mistake.From, mistake.To + 1);
                ignoredCorrections.push(ignoredWord);
            }
            return mistake;
        };
        var removeIgnoredMistakesFromSentenceIfNeeded = function(sentence) {
            if (!sentence.correction.Corrections || !sentence.correction.Corrections.lenreturngth) {
                sentence;
            }
            var hasRemovedNewCorrections = false;
            var correctionsExcludingIngoredOnes = [];
            for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                var correction = sentence.correction.Corrections[i];
                if (!correction.id) {
                    correction.id = gingerModule.get("widget.utils").generateUID();
                }
                var mistakeWord = sentence.text.substring(correction.From, correction.To + 1);
                if (correction.CorrectionType === 1 && ignoredCorrections.indexOf(mistakeWord) !== -1) {
                    correction.ignored = true;
                    hasRemovedNewCorrections = true;
                }
            }
            return sentence;
        };
        var correct = function(representation, stepCallBack, completedCallBack) {
            if (!representation) return;
            var awaitingCorrections = representation.length;
            for (var i = 0; i < representation.length; i++) {
                (function(sentenceIndex) {
                    if (representation[sentenceIndex].ignored || representation[sentenceIndex].charLimited) {
                        awaitingCorrections--;
                    } else if (representation[sentenceIndex].text.length < 4 || representation[sentenceIndex].text.match(/^[\s\u200b]*$/)) {
                        awaitingCorrections--;
                    } else {
                        var isActiveSentence = !!representation[sentenceIndex].activeSentence;
                        if (isActiveSentence) {
                            var isNonEnglish = false;
                            try {
                                if (!representation[sentenceIndex].correction.Sentences[0].IsEnglish) {
                                    isNonEnglish = true;
                                }
                            } catch (e) {}
                            if (isNonEnglish) {
                                awaitingCorrections--;
                                if (stepCallBack) stepCallBack(representation);
                                if (awaitingCorrections === 0 && completedCallBack) {
                                    completedCallBack(representation);
                                }
                            } else {
                                correctSpellingOfSentence(representation[sentenceIndex], function(correctedSentence) {
                                    correctedSentence.correction.checkType = "shallow";
                                    var removedIgnored = removeIgnoredMistakesFromSentenceIfNeeded(correctedSentence);
                                    representation[sentenceIndex] = mergeGrammarCheckResultsWithSentence(representation[sentenceIndex], removedIgnored);
                                    awaitingCorrections--;
                                    if (stepCallBack) stepCallBack(representation);
                                    if (awaitingCorrections === 0 && completedCallBack) {
                                        completedCallBack(representation);
                                    }
                                });
                            }
                        } else {
                            if (!representation[sentenceIndex].correction || representation[sentenceIndex].correction.checkType !== "deep") {
                                correctGrammarOfSentence(representation[sentenceIndex], function(correctedSentence) {
                                    correctedSentence.correction.checkType = "deep";
                                    var removedIgnored = removeIgnoredMistakesFromSentenceIfNeeded(correctedSentence);
                                    representation[sentenceIndex] = mergeGrammarCheckResultsWithSentence(representation[sentenceIndex], removedIgnored);
                                    awaitingCorrections--;
                                    if (stepCallBack) stepCallBack(representation);
                                    if (awaitingCorrections === 0 && completedCallBack) {
                                        completedCallBack(representation);
                                    }
                                });
                            } else {
                                var removedIgnored = removeIgnoredMistakesFromSentenceIfNeeded(representation[sentenceIndex]);
                                awaitingCorrections--;
                                if (removedIgnored) {
                                    representation[sentenceIndex] = removedIgnored;
                                    if (stepCallBack) stepCallBack(representation);
                                }
                            }
                        }
                    }
                    if (awaitingCorrections === 0 && completedCallBack) {
                        if (stepCallBack) stepCallBack(representation);
                        completedCallBack(representation);
                    }
                })(i);
            }
        };
        var getIgnoredWords = function() {
            return ignoredCorrections;
        };
        var setIgnoredWords = function(ignoredWords) {
            ignoredCorrections = ignoredWords;
        };
        var findCorrectionByFromTo = function(corrections, from, to) {
            for (var i = 0; i < corrections.length; i++) {
                var correction = corrections[i];
                if (correction.From === from && correction.To === to) {
                    return correction;
                }
            }
            return null;
        };
        var mergeGrammarCheckResultsWithSentence = function(sShallow, sDeep) {
            try {
                for (var i = 0; i < sShallow.correction.Corrections.length; i++) {
                    var correction = sShallow.correction.Corrections[i];
                    var correctionMatch = findCorrectionByFromTo(sDeep.correction.Corrections, correction.From, correction.To);
                    if (correctionMatch && correctionMatch.CorrectionType === correction.CorrectionType) {
                        correctionMatch.id = correction.id;
                    }
                }
            } catch (e) {
                if (false && console && console.warn) {
                    console.warn("grammar check result merge catch", e);
                }
            }
            return sDeep;
        };
        var mergeSentenceCorrections = function(sNew, sOld) {
            if (!sOld.correction || !sOld.correction.Corrections.length) {
                return sNew;
            }
            var changes = gingerModule.get("widget.utils").diffString(sOld.text, sNew.text);
            if (changes.preCommon == 0 && changes.postCommon == 0) {
                return sNew;
            }
            for (var h = 0; h < sOld.correction.Corrections.length; h++) {
                var correction = sOld.correction.Corrections[h];
                if (changes.to <= correction.From) {
                    correction.UXFrgFrom += changes.diff;
                    correction.UXFrgTo += changes.diff;
                    correction.From += changes.diff;
                    correction.To += changes.diff;
                } else if (changes.from >= correction.To + 1) {} else {
                    sOld.correction.Corrections.splice(h, 1);
                    h--;
                }
            }
            sNew.correction = sOld.correction;
            return sNew;
        };
        var mergeRepresentationCorrections = function(newRepr, oldRepr) {
            var preCommonSentences = 0;
            var postCommonSentences = 0;
            if (!oldRepr.length || !newRepr.length) {
                return newRepr;
            }
            var oldTrimmed;
            var newTrimmed;
            for (var i = 0; i < newRepr.length && i < oldRepr.length; i++) {
                if (oldRepr[i].text === newRepr[i].text) {
                    preCommonSentences = i + 1;
                    newRepr[i].correction = oldRepr[i].correction;
                    newRepr[i].id = oldRepr[i].id;
                    if (oldRepr[i].ignored) newRepr[i].ignored = oldRepr[i].ignored;
                    if (newRepr[i].ignored) delete newRepr[i].correction;
                    oldRepr[i] = newRepr[i];
                } else {
                    oldTrimmed = gingerModule.get("widget.utils").trimAndMatch(oldRepr[i].text);
                    newTrimmed = gingerModule.get("widget.utils").trimAndMatch(newRepr[i].text);
                    if (oldTrimmed.pre + oldTrimmed.text === newTrimmed.pre + newTrimmed.text) {
                        preCommonSentences = i + 1;
                        newRepr[i].correction = oldRepr[i].correction;
                        newRepr[i].id = oldRepr[i].id;
                        if (oldRepr[i].ignored) newRepr[i].ignored = oldRepr[i].ignored;
                        if (newRepr[i].charLimited) delete newRepr[i].correction;
                        oldRepr[i] = newRepr[i];
                    } else {
                        break;
                    }
                }
            }
            if (newRepr.length <= preCommonSentences) {
                return newRepr;
            }
            for (var i = 0; i < newRepr.length && i < oldRepr.length; i++) {
                if (oldRepr.length - i - 1 <= preCommonSentences - 1) break;
                if (newRepr.length - i - 1 <= preCommonSentences - 1) break;
                if (oldRepr[oldRepr.length - i - 1].text === newRepr[newRepr.length - i - 1].text) {
                    postCommonSentences = i + 1;
                    newRepr[newRepr.length - i - 1].correction = oldRepr[oldRepr.length - i - 1].correction;
                    newRepr[newRepr.length - i - 1].id = oldRepr[oldRepr.length - i - 1].id;
                    if (oldRepr[oldRepr.length - i - 1].ignored) newRepr[newRepr.length - i - 1].ignored = oldRepr[oldRepr.length - i - 1].ignored;
                    if (newRepr[newRepr.length - i - 1].charLimited) delete newRepr[newRepr.length - i - 1].correction;
                } else {
                    oldTrimmed = gingerModule.get("widget.utils").trimAndMatch(oldRepr[oldRepr.length - i - 1].text);
                    newTrimmed = gingerModule.get("widget.utils").trimAndMatch(newRepr[newRepr.length - i - 1].text);
                    if (oldTrimmed.pre + oldTrimmed.text === newTrimmed.pre + newTrimmed.text) {
                        postCommonSentences = i + 1;
                        newRepr[newRepr.length - i - 1].correction = oldRepr[oldRepr.length - i - 1].correction;
                        newRepr[newRepr.length - i - 1].id = oldRepr[oldRepr.length - i - 1].id;
                        if (oldRepr[newRepr.length - i - 1].ignored) newRepr[newRepr.length - i - 1].ignored = oldRepr[oldRepr.length - i - 1].ignored;
                        if (newRepr[newRepr.length - i - 1].charLimited) delete newRepr[newRepr.length - i - 1].correction;
                    } else {
                        break;
                    }
                }
            }
            for (var i = postCommonSentences; i < newRepr.length - preCommonSentences && i < oldRepr.length - preCommonSentences; i++) {
                if (oldRepr.length - i - 1 < preCommonSentences) {
                    newRepr[newRepr.length - i - 1].id = gingerModule.get("widget.utils").generateUID();
                } else if (newRepr.length - i - 1 < preCommonSentences) {} else {
                    if (newRepr[newRepr.length - i - 1].charLimited) {} else if (oldRepr[oldRepr.length - i - 1].correction && oldRepr[oldRepr.length - i - 1].correction.Sentences && !oldRepr[oldRepr.length - i - 1].correction.Sentences[0].IsEnglish) {
                        newRepr[newRepr.length - i - 1].correction = oldRepr[oldRepr.length - i - 1].correction;
                        if (oldRepr[oldRepr.length - i - 1].correction) newRepr[newRepr.length - i - 1].correction.checkType = "shallow";
                    } else if (oldRepr[oldRepr.length - i - 1].correction && oldRepr[oldRepr.length - i - 1].correction.Corrections.length) {
                        newRepr[newRepr.length - i - 1] = mergeSentenceCorrections(newRepr[newRepr.length - i - 1], oldRepr[oldRepr.length - i - 1]);
                        if (newRepr[newRepr.length - i - 1].correction) newRepr[newRepr.length - i - 1].correction.checkType = "shallow";
                    } else {}
                }
            }
            return newRepr;
        };
        var flush = function() {
            ignoredCorrections = [];
        };
        return {
            correct: correct,
            flush: flush,
            correctSpellingOfSentence: correctSpellingOfSentence,
            mergeSentenceCorrections: mergeSentenceCorrections,
            mergeCorrections: mergeRepresentationCorrections,
            ignoreMistake: ignoreMistake,
            getIgnoredWords: getIgnoredWords,
            setIgnoredWords: setIgnoredWords
        };
    }, [ "widget.phraseService", "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.ghostModifiers", function() {
        var isUnderDomain = function(domain) {
            if (!window.location) return null;
            var url = window.location.hostname.split(":")[0];
            return url.indexOf(domain) != -1;
        };
        var modifiers = {};
        modifiers.faceBook = {
            domain: "facebook.com",
            modifier: function(element, ghost) {
                var isCenterColorInputTheme = $gingerWidgetJquery(element).closest("._2ihx._i-o").length;
                if (isCenterColorInputTheme) {
                    $gingerWidgetJquery(element).css("textAlign", "center");
                }
            }
        };
        modifiers.unitTest = {
            domain: "localhost",
            modifier: function(element, ghost) {
                return;
            }
        };
        var process = function(element, ghost) {
            for (var key in modifiers) {
                if (isUnderDomain(modifiers[key].domain)) {
                    modifiers[key].modifier(element, ghost);
                }
            }
        };
        return {
            process: process
        };
    });
})();

(function() {
    var module = gingerModule.load("widget.googledocs", function() {
        var selectedTextArray = [];
        var globalSelection = [];
        var rects = [];
        function parseText() {
            if (document?.documentElement?.getAttribute("ginger-ext-for") === "gdocs-disabled") {
                return;
            }
            var area = document.querySelector(".ginger-container-body");
            if (area) {
                area.innerHTML = "";
            }
            var wholePage = document.querySelectorAll("div.kix-page-paginated");
            var newShadowEl = area ? area : document.createElement("div");
            wholePage.forEach((block, index) => {
                var parRoot = block.querySelector("div.kix-canvas-tile-content:not(.kix-canvas-tile-selection)");
                var newDivElement = document.createElement("div");
                for (var attrRoot of parRoot.attributes) {
                    if (attrRoot.name !== "class") {
                        newDivElement.setAttribute(attrRoot.nodeName, attrRoot.nodeValue);
                    }
                }
                newDivElement.contentEditable = "true";
                newDivElement.className = "ginger-container";
                newDivElement.style.position = "absolute";
                newDivElement.style.zIndex = "25";
                newDivElement.contentEditable = "true";
                newDivElement.style.color = "transparent";
                newDivElement.style.top = block.style.top;
                newDivElement.style.left = block.style.left;
                newShadowEl.appendChild(newDivElement);
                parRoot.childNodes[0].childNodes.forEach(e => {
                    if (e.getAttribute("role") === "paragraph") {
                        var newPElement = document.createElement("p");
                        newDivElement.appendChild(newPElement);
                    }
                    e.childNodes.forEach((v, ind) => {
                        var newSpanElement = document.createElement("span");
                        var res = collectTextData(v);
                        if (!res) {
                            return;
                        }
                        var dataCss = parseFontCss(res["data-font-css"]);
                        var params = {
                            width: `${+res.width * +res.matrixScaleX + .5}` + "px",
                            height: `${+res.height * +res.matrixScaleY}` + "px",
                            left: `${+res.x * +res.matrixScaleX + +res.matrixX}` + "px",
                            top: `${+res.y * +res.matrixScaleY + +res.matrixY}` + "px",
                            "font-family": dataCss.fontFamily,
                            "font-size": `${dataCss.fontSize * +res.matrixScaleY}` + "px",
                            "font-weight": dataCss.fontWeight,
                            ...dataCss.fontStyle && {
                                "font-style": dataCss.fontStyle
                            }
                        };
                        for (var attrEl in params) {
                            newSpanElement.style[`${attrEl}`] = params[`${attrEl}`];
                        }
                        newSpanElement.innerText = res["aria-label"].replaceAll(" ", " ") + " ";
                        newSpanElement.style.position = "absolute";
                        newPElement.appendChild(newSpanElement);
                    });
                });
            });
            var parentZone = document.querySelector(".kix-rotatingtilemanager");
            var subParentZone = document.querySelector(".kix-rotatingtilemanager-content");
            newShadowEl.style.top = 0 + "px";
            newShadowEl.style.left = subParentZone.style.left;
            newShadowEl.style.width = parentZone.style.width;
            newShadowEl.style.height = parentZone.style.height;
            newShadowEl.style.position = "relative";
            newShadowEl.setAttribute("contenteditable", "true");
            newShadowEl.className = "ginger-container-body";
            if (!area) {
                document.querySelector(".kix-rotatingtilemanager").appendChild(newShadowEl);
            }
        }
        function parseFontCss(fontCss) {
            const parts = fontCss.split(" ");
            let fontStyle = "";
            if (isNaN(parseFloat(parts[0]))) {
                fontStyle = parts[0];
                parts.shift();
            }
            const fontWeight = parts[0];
            const fontSize = parseFloat(parts[1]);
            const fontFamily = parts.slice(2).join(" ").replace(/"/g, "");
            return {
                fontStyle: fontStyle,
                fontWeight: fontWeight,
                fontSize: fontSize,
                fontFamily: fontFamily
            };
        }
        function collectTextData(el) {
            var attrCollection = {};
            for (const attr of el.attributes) {
                if (!el.attributes) {
                    return {};
                }
                if (attr.name === "transform") {
                    var matrixPattern = /^\w*\((-?((\d+)|(\d*\.\d+)),\s*)*(-?(\d+)|(\d*\.\d+))\)/i;
                    if (matrixPattern.test(attr.value)) {
                        var matrixValue;
                        var matrixCopy = attr.value.replace(/^\w*\(/, "").replace(")", "");
                        matrixValue = matrixCopy.split(/\s*,\s*/);
                        attrCollection = {
                            ...attrCollection,
                            matrixX: matrixValue[matrixValue.length - 2],
                            matrixY: matrixValue[matrixValue.length - 1],
                            matrixScaleX: matrixValue[0],
                            matrixScaleY: matrixValue[3]
                        };
                    }
                } else {
                    var attrKey = attr.name;
                    var attrValue = attr.value;
                    attrCollection = {
                        ...attrCollection,
                        [`${attrKey}`]: attrValue
                    };
                }
            }
            return attrCollection;
        }
        function isPointInAnyRect(x, y, rects) {
            for (const rect of rects) {
                if (x >= Math.floor(rect.left) && x <= Math.floor(rect.right) && y >= Math.floor(rect.top) && y <= Math.floor(rect.bottom)) {
                    return true;
                }
            }
            return false;
        }
        function init() {
            var rectElements = document.querySelectorAll("g rect");
            var lastRectOffset = 0;
            var lastRectLength = 0;
            var fullText = Array.from(rectElements).map(function(rect, index) {
                let str = rect.getAttribute("aria-label");
                const textNode = document.createTextNode(str);
                lastRectOffset = lastRectOffset + lastRectLength;
                lastRectLength = str.length + 2;
                rects[index] = {
                    rect: rect,
                    startOffset: lastRectOffset - 1 >= 0 ? lastRectOffset - 1 : 0,
                    endOffset: lastRectOffset + str.length + 1
                };
                return str;
            }).join(" ");
            var docsEditor = document.querySelector("div.kix-appview-editor");
            document.addEventListener("mouseup", function(event) {
                if (!docsEditor.contains(event.target)) {
                    return;
                }
                if (event.target?.id === "ginger__floatingG-bar-tool-rephrase__btn") {
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
                window.getSelection().removeAllRanges();
                selectedTextArray = [];
                globalSelection = [];
                var selectionRoot = document.querySelectorAll("div.kix-canvas-tile-selection rect:not(clipPath rect)");
                var lengthData = 0;
                selectionRoot.forEach((c, i) => {
                    var sell = c.getBoundingClientRect();
                    if (!sell) {
                        return;
                    }
                    var textNode;
                    var rangeStart;
                    var start;
                    var l = Math.ceil(sell.left);
                    var t = Math.ceil(sell.top);
                    var r = Math.ceil(sell.right);
                    var b = Math.floor(sell.bottom);
                    if (document.caretRangeFromPoint) {
                        rangeStart = document.caretRangeFromPoint(l, t);
                        textNode = rangeStart.startContainer;
                        if (rangeStart.startContainer.className === "kix-cursor-caret") {
                            rangeStart = document.caretRangeFromPoint(l + 2, t);
                            textNode = rangeStart.startContainer;
                        }
                    }
                    var rangec = document.createRange();
                    start = 0;
                    var end = textNode?.nodeValue?.length;
                    while (end - start > 1) {
                        var mid = Math.floor((start + end) / 2);
                        rangec.setStart(textNode, mid);
                        rangec.setEnd(textNode, end);
                        var rectsSel = rangec.getClientRects();
                        if (isPointInAnyRect(r, t, rectsSel)) {
                            start = mid;
                        } else {
                            if (r > rangec.getClientRects()[0].right) {
                                start = end;
                            } else {
                                end = mid;
                            }
                        }
                    }
                    var selecting = window.getSelection();
                    var rg = document.createRange();
                    selecting.removeAllRanges();
                    rg.setStart(textNode, rangeStart.startOffset);
                    rg.setEnd(textNode, start);
                    selecting.addRange(rg);
                    lengthData = lengthData + rangeStart.startContainer.length;
                    selectedTextArray.push({
                        node: rangeStart.startContainer,
                        start: rangeStart.startOffset,
                        end: start,
                        lineLength: lengthData,
                        parentNode: rangeStart.startContainer.parentElement.parentNode,
                        rects: sell
                    });
                });
                if (!selectedTextArray.length) {
                    return;
                }
                var gSelection = window.getSelection();
                gSelection.removeAllRanges();
                var startPositionOfSelect = selectedTextArray[0].start;
                var endPositionOfSelect = selectedTextArray[selectedTextArray.length - 1].end;
                var startNode = selectedTextArray[0].node;
                var endNode = selectedTextArray[selectedTextArray.length - 1].node;
                gSelection.setBaseAndExtent(startNode, startPositionOfSelect, endNode, endPositionOfSelect);
                if (gSelection.toString() === "") {
                    return;
                }
                globalSelection = {
                    node: document.querySelector(".ginger-container-body"),
                    range: gSelection.getRangeAt(0).cloneRange(),
                    selectionCoordinates: selectedTextArray[selectedTextArray.length - 1].rects,
                    fullCoordinates: selectedTextArray,
                    text: getsSelectedText()
                };
            });
        }
        var getRects = function() {
            return rects;
        };
        function getsSelectedText() {
            const e = document.querySelector(".docs-texteventtarget-iframe").contentWindow;
            if (!e) return "";
            const t = new e.CustomEvent("copy", {
                bubbles: !0
            }), n = e.document.querySelector("[contenteditable=true]");
            return n ? (n.dispatchEvent(t), n.innerText) : "";
        }
        function getSelection() {
            return {
                ...globalSelection
            };
        }
        return {
            init: init,
            getRects: getRects,
            parseText: parseText,
            getSelection: getSelection
        };
    }, [ "widget.phraseService", "widget.caret" ]);
})();

(function() {
    var module = gingerModule.load("widget.highlighters.floating", function() {
        var gingerInput;
        var element;
        var mistakeWrapTag = "gwmw";
        var isVisible = true;
        var hasSiblingCSSRuleApplied;
        var bgCache;
        var positionCache;
        var mistakeTags = [];
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        var removeMistakeTag = function(mistakeTag) {
            if (!mistakeTag) return;
            $gingerWidgetJquery(mistakeTag).html($gingerWidgetJquery(mistakeTag).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            mistakeTag = $gingerWidgetJquery(mistakeTag);
            var parent = mistakeTag.parent();
            if (mistakeTag.contents().length) {
                mistakeTag.contents().insertBefore(mistakeTag);
                mistakeTag.remove();
            } else {
                mistakeTag.remove();
            }
            parent.find("b:empty,i:empty").remove();
        };
        var getMistakeText = function(sentence, correction) {
            var from = correction.From + sentence.startsAt;
            var to = correction.To + 1 + sentence.startsAt;
            if (!gingerModule.get("widget.utils").isRichTextElement(element)) {
                return [ {
                    node: element.childNodes[0],
                    from: from,
                    to: to
                } ];
            }
            return gingerModule.get("widget.utils").getNodeFragmentsOfIndex(element, from, to);
        };
        var getMistakeTextFragment = function(sentence, correction) {
            var from = correction.UXFrgFrom + sentence.startsAt;
            var to = correction.UXFrgTo + 1 + sentence.startsAt;
            if (!gingerModule.get("widget.utils").isRichTextElement(element)) {
                return [ {
                    node: element.childNodes[0],
                    from: from,
                    to: to
                } ];
            }
            return gingerModule.get("widget.utils").getNodeFragmentsOfIndex(element, from, to);
        };
        var highlightOffset = 2;
        var getRelativeTextBoundingBoxes = function(textRanges) {
            var bb = gingerModule.get("widget.measure").getPaddingBox(gingerInput.element, positionCache);
            var sr = gingerModule.get("widget.measure").getScaleRatio(gingerInput.element);
            var ghostH = bb.height / sr;
            var scroll = gingerModule.get("widget.measure").getElementScroll(element);
            var n = false;
            if (!Array.isArray(textRanges)) {
                textRanges = [ textRanges ];
            }
            var boxes = [];
            var docScroll = gingerModule.get("widget.measure").getDocumentScroll();
            var documentGap = {
                top: 0,
                left: 0
            };
            if (document && document.body && document.body.contains(element)) {
                documentGap = gingerModule.get("widget.measure").getDocumentGap(positionCache);
            }
            var paddingBox = gingerModule.get("widget.measure").getPaddingBox(element, positionCache);
            var c = docScroll.left - documentGap.left - paddingBox.left + scroll.left;
            var h = docScroll.top - documentGap.top - paddingBox.top + scroll.top;
            for (var tri = 0; tri < textRanges.length; tri++) try {
                var range = textRanges[tri];
                var docRange = document.createRange();
                docRange.setStart(range.node, range.from);
                docRange.setEnd(range.node, range.to);
                var rangeRects = Array.from(docRange.getClientRects());
                for (var rri = 0; rri < rangeRects.length; rri++) {
                    var rangeRect = rangeRects[rri];
                    if (rangeRect.width < .1) continue;
                    var lastBox = boxes[boxes.length - 1];
                    var top = rangeRect.top + h;
                    var left = rangeRect.left + c;
                    var bottom = rangeRect.bottom + h + highlightOffset;
                    var right = rangeRect.right + c;
                    var width = rangeRect.width;
                    var height = ghostH < rangeRect.height + highlightOffset ? rangeRect.height : rangeRect.height + highlightOffset;
                    if (lastBox && lastBox.right === left && lastBox.top === top && lastBox.bottom === bottom && lastBox.height === height) {
                        lastBox.right = right;
                        lastBox.width = lastBox.width + width;
                    } else {
                        boxes.push({
                            top: top,
                            left: left,
                            bottom: bottom,
                            right: right,
                            width: width,
                            height: height
                        });
                    }
                    var newest = boxes[boxes.length - 1];
                    var last = boxes[boxes.length - 2];
                    if (last && newest) if (newest.top === last.top && newest.left === last.left && newest.width === last.width && newest.height === last.height) {
                        boxes.pop();
                    }
                }
            } catch (t) {
                console.error("Ginger range selection failed.", t);
            }
            return boxes;
        };
        var getScrollDimensions = function(e) {
            return {
                width: Math.min(e.scrollWidth, 32767),
                height: Math.min(e.scrollHeight, 32767)
            };
        };
        var refreshTo;
        var gracefulRefresh = function(r) {
            if (refreshTo) {
                refreshTo = clearTimeout(refreshTo);
            }
            refreshTo = setTimeout(function() {
                refresh(r);
            }, 10);
        };
        var cachedRepresentation;
        var refresh = function(representation, force) {
            if (!representation) return;
            cachedRepresentation = representation;
            if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            var elementScroll = gingerModule.get("widget.measure").getElementScroll(element);
            var scaleRatio = gingerModule.get("widget.measure").getScaleRatio(element);
            var correctionIds = [];
            for (var ri = 0; ri < representation.length; ri++) {
                var sentence = representation[ri];
                if (sentence.correction) {
                    for (var ci = 0; ci < sentence.correction.Corrections.length; ci++) {
                        var correction = sentence.correction.Corrections[ci];
                        if (correction.ignored) continue;
                        correctionIds.push(correction.id);
                        var mistakeFragments = getMistakeText(sentence, correction);
                        var longMistakeFragment = getMistakeTextFragment(sentence, correction);
                        var relBoundingBoxes = getRelativeTextBoundingBoxes(mistakeFragments);
                        var relBoundingBoxesForFragment = getRelativeTextBoundingBoxes(longMistakeFragment);
                        var mistakeHighlights = $gingerWidgetJquery(ghost).find(".gwmw-" + correction.id);
                        if (mistakeHighlights.length > relBoundingBoxes.length) {
                            for (var mhi = Math.max(0, relBoundingBoxes.length - 1); mhi < mistakeHighlights.length; mhi++) {
                                mistakeHighlights[mhi].remove();
                            }
                        }
                        for (var rbbi = 0; rbbi < relBoundingBoxes.length; rbbi++) {
                            var mistakeHighlight = mistakeHighlights.filter(".gwmwi-" + rbbi);
                            if (correction.Suggestions.length !== 0 || !correction.Confidence) {
                                mistakeHighlight.removeClass("no-suggestion");
                            } else {
                                mistakeHighlight.addClass("no-suggestion");
                            }
                            if (!mistakeHighlight.length) {
                                mistakeHighlight = $gingerWidgetJquery(document.createElement(mistakeWrapTag));
                                mistakeHighlight.css("position", "absolute");
                                mistakeHighlight.addClass("ginger-module-highlighter-mistake-type-" + correction.CorrectionType);
                                mistakeHighlight.addClass("gwmw-" + correction.id);
                                mistakeHighlight.addClass("gwmwi-" + rbbi);
                                mistakeHighlight.data("cid", correction.id);
                                mistakeHighlight.addClass("ginger-module-highlighter-mistake-anim");
                                $gingerWidgetJquery(ghost).append(mistakeHighlight);
                            }
                            mistakeHighlight.css("top", relBoundingBoxes[rbbi].top);
                            mistakeHighlight.css("width", relBoundingBoxes[rbbi].width);
                            mistakeHighlight.css("height", relBoundingBoxes[rbbi].height);
                            mistakeHighlight.css("left", relBoundingBoxes[rbbi].left);
                            var mistakeCords = {
                                singleStart: relBoundingBoxes[0].left,
                                singleFirstTop: relBoundingBoxes[0].top,
                                singleLastTop: relBoundingBoxes[relBoundingBoxes.length - 1].top,
                                singleFirstHeight: relBoundingBoxes[0].height,
                                singleLastHeight: relBoundingBoxes[relBoundingBoxes.length - 1].height,
                                singleEnd: relBoundingBoxes[relBoundingBoxes.length - 1].left + relBoundingBoxes[relBoundingBoxes.length - 1].width,
                                fragmentStart: relBoundingBoxesForFragment[0].left,
                                fragmentFirstTop: relBoundingBoxesForFragment[0].top,
                                fragmentLastTop: relBoundingBoxesForFragment[relBoundingBoxesForFragment.length - 1].top,
                                fragmentFirstHeight: relBoundingBoxesForFragment[0].height,
                                fragmentLastHeight: relBoundingBoxesForFragment[relBoundingBoxesForFragment.length - 1].height,
                                fragmentEnd: relBoundingBoxesForFragment[relBoundingBoxesForFragment.length - 1].left + relBoundingBoxesForFragment[relBoundingBoxesForFragment.length - 1].width
                            };
                            mistakeHighlight.data("cords", mistakeCords);
                        }
                    }
                }
            }
            $gingerWidgetJquery(ghost).find("gwmw").each(function(i, e) {
                var cid = $gingerWidgetJquery(e).data("cid");
                if (correctionIds.indexOf(cid) === -1) {
                    $gingerWidgetJquery(e).remove();
                }
            });
            updateScrolling();
        };
        var getMistakeElements = function() {
            return $gingerWidgetJquery(ghost).find(mistakeWrapTag);
        };
        var setVisibility = function(shouldBeVisible) {
            if (!shouldBeVisible) {
                $gingerWidgetJquery(ghostWrapper).hide();
            } else {
                $gingerWidgetJquery(ghostWrapper).show();
            }
            isVisible = shouldBeVisible;
            gingerInput.events.listen.trigger("mutation");
        };
        var destroy = function() {
            $gingerWidgetJquery(ghostWrapper).remove();
            if (checkPositionInterval) {
                clearInterval(checkPositionInterval);
            }
        };
        var checkIfSiblingCSSRuleIsApplied = function(el) {
            var sheets = document.styleSheets, ret = [];
            if (!sheets) return;
            el.matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector || el.oMatchesSelector;
            try {
                for (var i in sheets) {
                    var rules = sheets[i].rules || sheets[i].cssRules;
                    for (var r in rules) {
                        if (el.matches(rules[r].selectorText)) {
                            ret.push(rules[r].cssText);
                            if (/[+]/.test(rules[r].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var ghostWrapper = $gingerWidgetJquery("<gdiv class='ginger-module-highlighter ginger-module-highlighter-float'></gdiv>");
        var ghost = $gingerWidgetJquery("<gdiv class='ginger-module-highlighter-float-content'></gdiv>");
        var buildGhost = function(afterFocus) {
            if (isQualtrics() || gingerModule.get("widget.utils").isNotion() || isSpreadsheet()) {
                return buildGhostForQualtrics(afterFocus);
            }
            if (isGoogleDocs()) {
                if ($gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float")) {
                    $gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float").remove();
                }
            }
            var inputPosition = $gingerWidgetJquery(element).css("position");
            if (hasSiblingCSSRuleApplied) {
                ghostWrapper.insertAfter($gingerWidgetJquery(element));
            } else if (inputPosition == "static" || inputPosition == "relative" || inputPosition == "absolute") {
                ghostWrapper.insertBefore($gingerWidgetJquery(element));
            } else {
                ghostWrapper.insertAfter($gingerWidgetJquery(element));
            }
            ghostWrapper.append(ghost);
            bgCache = $gingerWidgetJquery(element).css("background");
            positionCache = $gingerWidgetJquery(element).css("position");
            $gingerWidgetJquery(element).css("background", "transparent");
            $gingerWidgetJquery(ghostWrapper).css("background", bgCache);
            if (isFBChat(element)) {
                $gingerWidgetJquery(element).css("overflowY", "auto");
            }
            if (isOutlook() || gingerModule.get("widget.utils").isCKEditor(element)) {
                $gingerWidgetJquery(ghostWrapper).css({
                    backgroundColor: "transparent",
                    zIndex: "2",
                    pointerEvents: "none"
                });
            }
            if (isGoogleDocs()) {
                $gingerWidgetJquery(ghostWrapper).css({
                    zIndex: "25"
                });
            }
        };
        var buildGhostForQualtrics = function(afterFocus) {
            if ($gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float")) {
                $gingerWidgetJquery(".ginger-module-highlighter.ginger-module-highlighter-float").remove();
            }
            ghostWrapper.appendTo($gingerWidgetJquery(document.querySelector("body")));
            ghostWrapper.append(ghost);
            if (!afterFocus) {
                bgCache = $gingerWidgetJquery(element).css("background");
                positionCache = $gingerWidgetJquery(element).css("position");
                $gingerWidgetJquery(ghostWrapper).css("background", "transparent");
                $gingerWidgetJquery(ghostWrapper).data("overridedZIndex", gingerModule.get("widget.measure").findHighestZIndex() + 25);
            }
            if (isOutlook() || gingerModule.get("widget.utils").isCKEditor(element)) {
                $gingerWidgetJquery(ghostWrapper).css({
                    backgroundColor: "transparent",
                    zIndex: "2",
                    pointerEvents: "none"
                });
            }
        };
        var updateScrolling = function() {
            var t = getScrollPosition(element);
            ghostWrapper.get(0).scrollTop = t.top;
            ghostWrapper.get(0).scrollLeft = t.left;
        };
        var getScrollPosition = function(t) {
            var isCompatMode = t === window.document.body && "BackCompat" === window.document.compatMode;
            var top = isCompatMode ? 0 : t.scrollTop;
            var left = isCompatMode ? 0 : t.scrollLeft;
            return {
                top: top,
                left: left
            };
        };
        var renderGhost = function() {
            if (!$gingerWidgetJquery(element).is(":visible")) {
                return;
            }
            var zIndex = parseInt($gingerWidgetJquery(element).css("z-index"));
            if (!zIndex) zIndex = 1;
            if (zIndex < 2) zIndex = 2;
            var originalPosition = $gingerWidgetJquery(element).data("gingerPositionCache");
            if (!originalPosition) {
                originalPosition = $gingerWidgetJquery(element).css("position");
                $gingerWidgetJquery(element).data("gingerPositionCache", originalPosition);
            }
            var originalZindex = $gingerWidgetJquery(element).data("gingerZindexCache");
            if (!originalZindex) {
                originalZindex = $gingerWidgetJquery(element).css("z-index");
                $gingerWidgetJquery(element).data("gingerZindexCache", originalZindex);
            }
            var inputPosition = originalPosition;
            if (inputPosition == "fixed") {
                $gingerWidgetJquery(ghostWrapper).css("position", "fixed");
                $gingerWidgetJquery(ghostWrapper).css("z-index", zIndex - 1);
                $gingerWidgetJquery(element).css("z-index", zIndex);
            } else if (inputPosition == "relative") {
                $gingerWidgetJquery(ghostWrapper).css("position", "absolute");
                if (hasSiblingCSSRuleApplied) {
                    $gingerWidgetJquery(ghostWrapper).css("z-index", zIndex - 1);
                    $gingerWidgetJquery(element).css("z-index", zIndex);
                }
            } else if (inputPosition == "absolute") {
                $gingerWidgetJquery(ghostWrapper).css("position", "absolute");
                $gingerWidgetJquery(ghostWrapper).css("z-index", zIndex - 1);
                $gingerWidgetJquery(element).css("z-index", zIndex);
            } else {
                $gingerWidgetJquery(element).css("position", "relative");
                $gingerWidgetJquery(ghostWrapper).css("position", "absolute");
                if (hasSiblingCSSRuleApplied) {
                    $gingerWidgetJquery(ghostWrapper).css("z-index", zIndex - 1);
                    $gingerWidgetJquery(element).css("z-index", zIndex);
                }
            }
            if ($gingerWidgetJquery(ghostWrapper).data("overridedZIndex")) {
                ghostWrapper.css("pointer-events", "none");
                $gingerWidgetJquery(ghostWrapper).css("z-index", $gingerWidgetJquery(ghostWrapper).data("overridedZIndex"));
            }
            var bb = gingerModule.get("widget.measure").getPaddingBox(gingerInput.element, positionCache);
            var gwpb = gingerModule.get("widget.measure").getPaddingBox(ghostWrapper.get(0), positionCache);
            var sr = gingerModule.get("widget.measure").getScaleRatio(gingerInput.element);
            var styles = getComputedStyle(ghostWrapper.get(0));
            var topDifference = bb.top - gwpb.top;
            if (Math.abs(topDifference) > .1) {
                ghostWrapper.css("marginTop", parseFloat(styles["margin-top"]) + topDifference);
                if (isInstagram()) {
                    ghostWrapper.css("marginTop", "0");
                }
            }
            var leftDifference = bb.left - gwpb.left;
            if (Math.abs(leftDifference) > .1) {
                ghostWrapper.css("marginLeft", parseFloat(styles["margin-left"]) + leftDifference);
            }
            ghostWrapper.css("height", bb.height / sr);
            ghostWrapper.css("width", bb.width / sr);
            ghost.css("height", bb.height + element.scrollHeight);
            if (isGoogleDocs()) {
                ghost.css("height", bb.height);
            }
        };
        var ghost;
        var intId = undefined;
        var checkPositionInterval = undefined;
        var init = function(initGingerInput) {
            gingerInput = initGingerInput;
            element = gingerInput.element;
            hasSiblingCSSRuleApplied = checkIfSiblingCSSRuleIsApplied(element);
            buildGhost();
            renderGhost();
            $gingerWidgetJquery(element).on("scroll", function() {
                updateScrolling();
            });
            if (isQualtrics() || gingerModule.get("widget.utils").isNotion() || isSpreadsheet()) {
                gingerInput.events.listen.on("focus", function() {
                    buildGhost(true);
                    renderGhost();
                });
            }
            gingerInput.events.listen.on("mutation", function(e) {
                if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                renderGhost();
                refresh(cachedRepresentation, true);
            });
        };
        var mutationObserver = function(element) {
            if (!element || !element.parentNode) {
                return;
            }
            var observer = new MutationObserver(function(mutationRecords) {});
            observer.observe(element.parentNode, {
                childList: true
            });
        };
        var isQualtrics = function() {
            var splitHost = window.location.hostname.split(".");
            return splitHost && splitHost.length && splitHost[splitHost.length - 2] === "qualtrics";
        };
        function isSpreadsheet() {
            return /docs.google.com\/spreadsheets/.test(location.href);
        }
        var isFBChat = function(element) {
            if (/facebook.com/.test(location.hostname)) {
                var chatTabs = document.querySelectorAll('[data-pagelet="ChatTab"]');
                if (chatTabs && chatTabs.length) {
                    for (var i = 0; i < chatTabs.length; i++) {
                        if (chatTabs[i].contains(element)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var isInstagram = function() {
            if (/instagram.com/.test(location.hostname)) {
                return true;
            }
            return false;
        };
        var isOutlook = function() {
            return /outlook.live.com|outlook.office365.com|outlook.office.com/.test(location.hostname);
        };
        var checkPosition = function(element) {
            if (!element) {
                return;
            }
            var position = element.getBoundingClientRect();
            checkPositionInterval = setInterval(function() {
                var newPosition = element.getBoundingClientRect();
                if (newPosition.x !== position.x || newPosition.y !== position.y) {
                    renderGhost();
                    position = newPosition;
                }
            }, 5);
        };
        return {
            refresh: gracefulRefresh,
            init: init,
            setVisibility: setVisibility,
            getMistakeElements: getMistakeElements,
            destroy: destroy
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var module = gingerModule.load("widget.highlighters.ghost", function() {
        var gingerInput;
        var element;
        var ghost;
        var sentenceWrapTag = "gwsw";
        var mistakeWrapTag = "gwmw";
        var isVisible = true;
        var hasSiblingCSSRuleApplied = false;
        var representationCache = [];
        var checkIfSiblingCSSRuleIsApplied = function(el) {
            var sheets = document.styleSheets, ret = [];
            if (!sheets) return;
            el.matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector || el.oMatchesSelector;
            try {
                for (var i in sheets) {
                    var rules = sheets[i].rules || sheets[i].cssRules;
                    for (var r in rules) {
                        if (el.matches(rules[r].selectorText)) {
                            ret.push(rules[r].cssText);
                            if (/[+]/.test(rules[r].selectorText)) {
                                return true;
                            }
                        }
                    }
                }
            } catch (e) {}
            return false;
        };
        var positionGhostBehindElement = function() {
            if (!$gingerWidgetJquery(element).is(":visible")) {
                return;
            }
            var elementPosition = $gingerWidgetJquery(element).position();
            var paddingBox = gingerModule.get("widget.measure").getPaddingBox(element);
            var dpr = window.devicePixelRatio || 1;
            if ($gingerWidgetJquery(ghost).css("box-sizing") === "border-box") {
                $gingerWidgetJquery(ghost).css("height", paddingBox.height + paddingBox.border.top + paddingBox.border.bottom);
                $gingerWidgetJquery(ghost).css("width", paddingBox.width + paddingBox.border.left + paddingBox.border.right);
            } else {
                var s = window.getComputedStyle(element);
                $gingerWidgetJquery(ghost).css("height", paddingBox.height - parseInt(s["padding-top"]) - parseInt(s["padding-bottom"]));
                $gingerWidgetJquery(ghost).css("width", paddingBox.width - parseInt(s["padding-right"]) - parseInt(s["padding-left"]));
            }
            var zIndex = parseInt($gingerWidgetJquery(element).css("z-index"));
            if (!zIndex) zIndex = 1;
            if (zIndex < 2) zIndex = 2;
            var originalPosition = $gingerWidgetJquery(element).data("gingerPositionCache");
            if (!originalPosition) {
                originalPosition = $gingerWidgetJquery(element).css("position");
                $gingerWidgetJquery(element).data("gingerPositionCache", originalPosition);
            }
            var originalZindex = $gingerWidgetJquery(element).data("gingerZindexCache");
            if (!originalZindex) {
                originalZindex = $gingerWidgetJquery(element).css("z-index");
                $gingerWidgetJquery(element).data("gingerZindexCache", originalZindex);
            }
            var inputPosition = originalPosition;
            if (inputPosition == "fixed") {
                $gingerWidgetJquery(ghost).css("position", "fixed");
                $gingerWidgetJquery(ghost).css("z-index", zIndex - 1);
                $gingerWidgetJquery(element).css("z-index", zIndex);
                $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                $gingerWidgetJquery(ghost).css("left", elementPosition.left);
            } else if (inputPosition == "relative") {
                $gingerWidgetJquery(ghost).css("position", "absolute");
                $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                $gingerWidgetJquery(ghost).css("left", elementPosition.left);
                if (hasSiblingCSSRuleApplied) {
                    $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                    $gingerWidgetJquery(ghost).css("left", elementPosition.left);
                    $gingerWidgetJquery(ghost).css("z-index", zIndex - 1);
                    $gingerWidgetJquery(element).css("z-index", zIndex);
                }
            } else if (inputPosition == "absolute") {
                $gingerWidgetJquery(ghost).css("position", "absolute");
                $gingerWidgetJquery(ghost).css("z-index", zIndex - 1);
                $gingerWidgetJquery(element).css("z-index", zIndex);
                $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                $gingerWidgetJquery(ghost).css("left", elementPosition.left);
            } else {
                $gingerWidgetJquery(element).css("position", "relative");
                $gingerWidgetJquery(ghost).css("position", "absolute");
                $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                $gingerWidgetJquery(ghost).css("left", elementPosition.left);
                if (hasSiblingCSSRuleApplied) {
                    $gingerWidgetJquery(ghost).css("top", elementPosition.top);
                    $gingerWidgetJquery(ghost).css("left", elementPosition.left);
                    $gingerWidgetJquery(ghost).css("z-index", zIndex - 1);
                    $gingerWidgetJquery(element).css("z-index", zIndex);
                }
            }
        };
        var getSafeHtml = function(unsafe) {
            return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        };
        var createSentenceByRepresentation = function(sentence, existingMistakes) {
            var newSentenceInGhost = $gingerWidgetJquery("<" + sentenceWrapTag + " />").get(0);
            newSentenceInGhost.id = "gws-" + sentence.id;
            var preLineBreaks = sentence.preLineBreakCount ? new Array(sentence.preLineBreakCount + 1).join("\n") : "";
            var postLineBreaks = sentence.postLineBreakCount ? new Array(sentence.postLineBreakCount + 1).join("\n") : "";
            if (!sentence.correction || !sentence.correction.Corrections.length) {
                newSentenceInGhost.innerHTML = preLineBreaks + getSafeHtml(sentence.text) + postLineBreaks;
                return newSentenceInGhost;
            }
            newSentenceInGhost.innerHTML += preLineBreaks;
            var fragments = gingerModule.get("widget.phraseService").getSentenceFragments(sentence);
            var correctedText = "";
            for (var i = 0; i < fragments.length; i++) {
                var fragmentElement;
                if (fragments[i].correction && !fragments[i].correction.ignored) {
                    var animateMistake = false;
                    if (existingMistakes.indexOf(fragments[i].correction.id) === -1 && !$gingerWidgetJquery(ghost).find("#" + mistakeWrapTag + "-" + fragments[i].correction.id).length) {
                        animateMistake = true;
                    }
                    fragmentElement = document.createElement(mistakeWrapTag);
                    fragmentElement.className = "ginger-module-highlighter-mistake-type-" + fragments[i].correction.CorrectionType;
                    fragmentElement.className += " gwmw-" + fragments[i].correction.id;
                    $gingerWidgetJquery(fragmentElement).data("cid", fragments[i].correction.id);
                    $gingerWidgetJquery(fragmentElement).attr("id", "gwmw-" + fragments[i].correction.id);
                    if (animateMistake) {
                        fragmentElement.className += " ginger-module-highlighter-mistake-anim";
                    }
                    if (fragments[i].correction.Suggestions.length !== 0 || !fragments[i].correction.Confidence) {
                        $gingerWidgetJquery(fragmentElement).removeClass("no-suggestion");
                    } else {
                        fragmentElement.className += " no-suggestion";
                    }
                    fragmentElement.appendChild(document.createTextNode(fragments[i].text));
                } else {
                    fragmentElement = document.createTextNode(fragments[i].text);
                }
                newSentenceInGhost.appendChild(fragmentElement);
            }
            newSentenceInGhost.innerHTML += postLineBreaks;
            return newSentenceInGhost;
        };
        function getScrollbarWidth() {
            var outer = document.createElement("div");
            outer.style.visibility = "hidden";
            outer.style.overflow = "scroll";
            outer.style.msOverflowStyle = "scrollbar";
            document.body.appendChild(outer);
            var inner = document.createElement("div");
            outer.appendChild(inner);
            var scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
            outer.parentNode.removeChild(outer);
            return scrollbarWidth;
        }
        var cloneStyle = function() {
            if (!gingerInput.isEnabled()) return;
            var bg = $gingerWidgetJquery(element).css("background");
            var bgImage = $gingerWidgetJquery(element).css("background-image");
            var bgColor = $gingerWidgetJquery(element).css("background-color");
            var isTransparentBackground = bgImage == "none" && bgColor == "rgba(0, 0, 0, 0)" ? true : false;
            if (!isTransparentBackground) {
                $gingerWidgetJquery(element).get(0).style.setProperty("background", "none", "important");
                $gingerWidgetJquery(element).data("gingerBackgroundCache", bg);
            }
            var cloneStyleFrom = element;
            if (element.childNodes.length && /mentions-texteditor__content/.test(element.childNodes[0].className)) {
                cloneStyleFrom = element.childNodes[0];
            }
            var styles = [ "color", "borderRadius", "border", "borderColor", "boxSizing", "paddingTop", "paddingLeft", "paddingRight", "paddingBottom", "marginTop", "marginLeft", "marginRight", "marginBottom", "fontFamily", "direction", "fontSize", "textAlign", "letterSpacing", "fontWeight", "whiteSpace", "overflowWrap" ];
            for (var i = 0; i < styles.length; i++) {
                $gingerWidgetJquery(ghost).css(styles[i], $gingerWidgetJquery(element).css(styles[i]));
            }
            var lh = $gingerWidgetJquery(cloneStyleFrom).css("lineHeight");
            $gingerWidgetJquery(ghost).css("lineHeight", lh);
            $gingerWidgetJquery(cloneStyleFrom).css("lineHeight", lh);
            var backgroundCache = $gingerWidgetJquery(cloneStyleFrom).data("gingerBackgroundCache");
            if (backgroundCache) {
                $gingerWidgetJquery(ghost).css("background", backgroundCache);
            }
            $gingerWidgetJquery(ghost).css({
                color: "rgba(0,0,0,0)"
            });
            $gingerWidgetJquery(ghost).css({
                display: "block"
            });
            if (gingerModule.get("widget.utils").isRichTextElement(cloneStyleFrom)) {
                $gingerWidgetJquery(ghost).css("white-space", "pre-wrap");
            } else {
                $gingerWidgetJquery(ghost).css("white-space", $gingerWidgetJquery(cloneStyleFrom).css("white-space"));
            }
            gingerModule.get("widget.ghostModifiers").process(cloneStyleFrom, ghost);
        };
        var refresh = function(representation) {
            if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            if (!isVisible) return;
            var repr = gingerModule.get("widget.utils").clone(representation);
            try {
                if (repr[repr.length - 1].text.match(/\n$/)) {
                    repr[repr.length - 1].text += "\n";
                }
            } catch (e) {}
            cloneStyle();
            positionGhostBehindElement();
            var existingMistakes = $gingerWidgetJquery(ghost).find(mistakeWrapTag).map(function() {
                return this.id.substring((mistakeWrapTag + "-").length);
            }).get();
            var sentencesInGhost = $gingerWidgetJquery(ghost).find(sentenceWrapTag);
            for (var i = 0; i < repr.length || i < sentencesInGhost.length; i++) {
                var sentenceNeedsUpdate = !representationCache[i] || JSON.stringify(repr[i]) !== JSON.stringify(representationCache[i]);
                if (!repr[i]) {
                    $gingerWidgetJquery(sentencesInGhost[i]).remove();
                } else if (!sentencesInGhost[i]) {
                    $gingerWidgetJquery(ghost).append(createSentenceByRepresentation(repr[i], existingMistakes));
                } else if (sentenceNeedsUpdate) {
                    $gingerWidgetJquery(sentencesInGhost[i]).replaceWith(createSentenceByRepresentation(repr[i], existingMistakes));
                } else {}
            }
            representationCache = repr;
            scrollUpdate();
        };
        var scrollUpdate = function() {
            var scroll = gingerModule.get("widget.measure").getElementScroll(element);
            ghost.scrollTop(scroll.top);
            ghost.scrollLeft(scroll.left);
        };
        var createGhost = function() {
            var inputPosition = $gingerWidgetJquery(element).css("position");
            if (hasSiblingCSSRuleApplied) {
                ghost = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(element));
            } else if (inputPosition == "static" || inputPosition == "relative") {
                ghost = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertBefore($gingerWidgetJquery(element));
            } else {
                ghost = $gingerWidgetJquery("<div class='ginger-module-highlighter ginger-module-highlighter-ghost'></div>").insertAfter($gingerWidgetJquery(element));
            }
        };
        var getMistakeElements = function() {
            return $gingerWidgetJquery(ghost).find(mistakeWrapTag);
        };
        var setVisibility = function(shouldBeVisible) {
            if (shouldBeVisible) {
                $gingerWidgetJquery(ghost).show();
            } else {
                $gingerWidgetJquery(ghost).hide();
                var backgroundCache = $gingerWidgetJquery(element).data("gingerBackgroundCache");
                if (backgroundCache) {
                    $gingerWidgetJquery(element).css("background", backgroundCache);
                }
            }
            isVisible = !!shouldBeVisible;
        };
        var destroy = function() {
            var backgroundCache = $gingerWidgetJquery(element).data("gingerBackgroundCache");
            if (backgroundCache) {
                $gingerWidgetJquery(element).css("background", backgroundCache);
            }
            $gingerWidgetJquery(element).css("position", $gingerWidgetJquery(element).data("gingerPositionCache") || "");
            $gingerWidgetJquery(element).css("z-index", $gingerWidgetJquery(element).data("gingerZindexCache") || "");
            gingerInput.events.listen.off("mutation.ghostUpdate");
            $gingerWidgetJquery(element).off("blur", positionGhostBehindElement);
            $gingerWidgetJquery(element).off("scroll", scrollUpdate);
            $gingerWidgetJquery(ghost).remove();
        };
        var init = function(inputHandler) {
            gingerInput = inputHandler;
            element = gingerInput.element;
            hasSiblingCSSRuleApplied = checkIfSiblingCSSRuleIsApplied(element);
            $gingerWidgetJquery(element).blur(positionGhostBehindElement);
            $gingerWidgetJquery(element).scroll(scrollUpdate);
            element.addEventListener("scroll", scrollUpdate);
            gingerInput.events.listen.on("mutation.ghostUpdate", function() {
                if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
                var dpr = window.devicePixelRatio || 1;
                if (dpr < 1) {
                    destroy();
                } else {
                    ghost.show();
                }
                cloneStyle();
                positionGhostBehindElement();
            });
            createGhost();
            positionGhostBehindElement();
        };
        return {
            refresh: refresh,
            refreshPosition: positionGhostBehindElement,
            init: init,
            setVisibility: setVisibility,
            scrollUpdate: scrollUpdate,
            getMistakeElements: getMistakeElements,
            destroy: destroy
        };
    }, [ "widget.utils", "widget.phraseService", "widget.ghostModifiers", "widget.measure" ]);
})();

(function() {
    var module = gingerModule.load("widget.highlighters.inline", function() {
        var gingerInput;
        var element;
        var mistakeWrapTag = "gwmw";
        var isVisible = true;
        var antiCollisionOff = false;
        var handleHighlighterExceptions = function() {
            var isSalesForceOldEmailTemplateEditor = /emailauthorframe\.jsp\?email_type=html/.test(window.location.href);
            if (isSalesForceOldEmailTemplateEditor) {
                mistakeWrapTag = "span";
            }
        };
        var isThereBlockElemDifference = function(startNode, endNode) {
            var blockSelectors = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (startNode === endNode) return false;
            var commonAncestor = $gingerWidgetJquery(startNode).parents().has(endNode).first();
            var hasStartNodeABlockParent = $gingerWidgetJquery(startNode).parentsUntil(commonAncestor, blockSelectors).length;
            var hasEndNodeABlockParent = $gingerWidgetJquery(endNode).parentsUntil(commonAncestor, blockSelectors).length;
            return hasStartNodeABlockParent || hasEndNodeABlockParent ? true : false;
        };
        var createMistakeTag = function(element, sentence, correction) {
            var from = correction.From + sentence.startsAt;
            var to = correction.To + 1 + sentence.startsAt;
            var nodeOffsets = gingerModule.get("widget.utils").getNodeOffsetOfIndex(element, from, to);
            if (!nodeOffsets.startNode || !nodeOffsets.endNode) {
                return;
            }
            var wrapNode = wrapSelection(mistakeWrapTag, nodeOffsets.startNode, nodeOffsets.startNodeOffset, nodeOffsets.endNode, nodeOffsets.endNodeOffset);
            $gingerWidgetJquery(element).find("b:empty,i:empty").remove();
            element.normalize();
            return wrapNode;
        };
        var saveSelection = function() {
            return gingerModule.get("widget.selectionManager").saveSelection(element);
        };
        var restoreSelection = function() {
            return gingerModule.get("widget.selectionManager").restoreSelection(element);
        };
        var wrapSelection = function(nodeName, startNode, startNodeOffset, endNode, endNodeOffset) {
            var range = document.createRange();
            try {
                range.setStart(startNode, startNodeOffset);
                range.setEnd(endNode, endNodeOffset);
            } catch (e) {
                console.error(e);
            }
            var wrapNode = document.createElement(nodeName);
            wrapNode.appendChild(range.extractContents());
            range.insertNode(wrapNode);
            return wrapNode;
        };
        var removeMistakeTag = function(mistakeTag) {
            if (!mistakeTag) return;
            $gingerWidgetJquery(mistakeTag).html($gingerWidgetJquery(mistakeTag).html().replace(/<[\/]?gwmw[^>]*>/gi, ""));
            mistakeTag = $gingerWidgetJquery(mistakeTag);
            var parent = mistakeTag.parent();
            if (mistakeTag.contents().length) {
                mistakeTag.contents().insertBefore(mistakeTag);
                mistakeTag.remove();
            } else {
                mistakeTag.remove();
            }
            parent.find("b:empty,i:empty").remove();
        };
        var removeChromeRenderedSpanFontStylings = function() {
            var styledSpanTags = $gingerWidgetJquery(element).find("span[style]");
            styledSpanTags.each(function(i, e) {
                var color = $gingerWidgetJquery(e).css("background-color");
                if (color) {
                    color = color.toLowerCase().replace(/ /g, "");
                    if (color === "rgba(255,115,115,0.3)" || color === "rgba(87,131,204,0.3)") {
                        $gingerWidgetJquery(e).css("background-color", "");
                    }
                }
            });
        };
        var removeGmailAutoCompleteSpan = function() {
            $gingerWidgetJquery(element).find(".XjviVd").slice(1).remove();
        };
        var getSentenceBySentenceId = function(id, repr) {
            for (var i = 0; i < repr.length; i++) {
                if (repr[i].id === id) return repr[i];
            }
            return null;
        };
        var checkMistakeTagSanity = function(correction, sentence) {
            var mistakeTag = document.getElementById("gwmw-" + correction.id);
            if (!sentence || !correction || mistakeTag.innerText !== sentence.text.substring(correction.From, correction.To + 1) || mistakeTag.querySelectorAll(mistakeWrapTag).length) {
                return false;
            }
            return true;
        };
        var doesApplyForSpecialHighlightExclusion = function(element, repr, sentence, correction) {
            if (window.location.hostname.indexOf("lightning.force.com") != -1) {
                if (sentence.id === repr[repr.length - 1].id && correction.id === sentence.correction.Corrections[sentence.correction.Corrections.length - 1].id) {
                    var lastWordOfLastSentence = sentence.words[sentence.words.length - 1];
                    if (lastWordOfLastSentence.startsAt - sentence.startsAt === correction.From && lastWordOfLastSentence.endsAt - sentence.startsAt === correction.To + 1) {
                        if (!$gingerWidgetJquery("gwcphb").next().length) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        var setAntiCollision = function(off) {
            antiCollisionOff = off;
        };
        var acrto = null;
        var antiCollisionRefresh = function(repr) {
            if (antiCollisionOff) {
                refresh(repr);
                return;
            }
            if (acrto) {
                clearTimeout(acrto);
                acrto = setTimeout(function() {
                    refresh(repr);
                }, 20);
            } else {
                refresh(repr);
                acrto = setTimeout(function() {});
            }
        };
        var refresh = function(representation) {
            if (!antiCollisionOff && element !== document.activeElement) return;
            if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) return;
            handleHighlighterExceptions();
            removeChromeRenderedSpanFontStylings();
            if (!isVisible) return;
            var repr = gingerModule.get("widget.utils").cloneRepresentation(representation);
            if (element.innerHTML == "") {
                $gingerWidgetJquery(element).html($gingerWidgetJquery(element).text());
            }
            var correctionIds = getCorrectionIdsOfRepr(repr);
            var selectionSaved = false;
            var mistakeTags = element.querySelectorAll(mistakeWrapTag);
            for (var mi = 0; mi < mistakeTags.length; mi++) {
                var mistakeTag = mistakeTags[mi];
                var mistakeTagCorrectionId = mistakeTag.id.replace("gwmw-", "");
                if (!mistakeTag.id || correctionIds.indexOf(mistakeTagCorrectionId) === -1) {
                    if (!selectionSaved) {
                        selectionSaved = true;
                        saveSelection();
                    }
                    removeMistakeTag(mistakeTag);
                }
            }
            for (var sid = 0; sid < repr.length; sid++) {
                var sentence = repr[sid];
                if (sentence.correction && sentence.correction.Corrections.length) {
                    for (var cid = 0; cid < sentence.correction.Corrections.length; cid++) {
                        var correction = sentence.correction.Corrections[cid];
                        var isCorrectionIgnored = correction && correction.ignored;
                        var mistakeNode = element.querySelector("#gwmw-" + correction.id);
                        var specialHighlightExclusion = doesApplyForSpecialHighlightExclusion(element, representation, sentence, correction);
                        if (!mistakeNode && !isCorrectionIgnored && !specialHighlightExclusion) {
                            if (!selectionSaved) {
                                selectionSaved = true;
                                saveSelection();
                            }
                            var newMistakeNode = createMistakeTag(element, sentence, correction);
                            if (newMistakeNode) {
                                newMistakeNode.className = "ginger-module-highlighter-mistake-anim ginger-module-highlighter-mistake-type-" + correction.CorrectionType;
                                newMistakeNode.id = "gwmw-" + correction.id;
                                newMistakeNode.addEventListener("animationend", function(node) {
                                    return function(e) {
                                        $gingerWidgetJquery(node).removeClass("ginger-module-highlighter-mistake-anim");
                                    };
                                }(newMistakeNode), {
                                    once: true
                                }, true);
                            }
                        } else if (specialHighlightExclusion) {} else if (correction.ignored) {
                            if (!selectionSaved) {
                                selectionSaved = true;
                                saveSelection();
                            }
                            removeMistakeTag(mistakeNode);
                        } else if (sentence.activeSentence && !checkMistakeTagSanity(correction, sentence)) {
                            if (!selectionSaved) {
                                selectionSaved = true;
                                saveSelection();
                            }
                            removeMistakeTag(mistakeNode);
                            var newMistakeNode = createMistakeTag(element, sentence, correction);
                            if (newMistakeNode) {
                                newMistakeNode.className = "ginger-module-highlighter-mistake-type-" + correction.CorrectionType;
                                newMistakeNode.id = "gwmw-" + correction.id;
                            }
                        }
                    }
                }
            }
            element.normalize();
            if (selectionSaved) restoreSelection();
            setTimeout(removeGmailAutoCompleteSpan, 150);
        };
        var getMistakeElements = function() {
            return $gingerWidgetJquery(element).find(mistakeWrapTag);
        };
        var setVisibility = function(shouldBeVisible) {
            if (!shouldBeVisible) {
                destroy();
            }
            isVisible = shouldBeVisible;
        };
        var destroy = function() {
            getMistakeElements().each(function(i, mistakeTag, i) {
                removeMistakeTag(mistakeTag);
            });
        };
        var getCorrectionIdsOfRepr = function(repr) {
            var ids = [];
            for (var i = 0; i < repr.length; i++) {
                if (repr[i].correction && repr[i].correction.Corrections && repr[i].correction.Corrections.length) {
                    for (var h = 0; h < repr[i].correction.Corrections.length; h++) {
                        ids.push(repr[i].correction.Corrections[h].id);
                    }
                }
            }
            return ids.sort();
        };
        var init = function(initGingerInput) {
            gingerInput = initGingerInput;
            element = gingerInput.element;
        };
        return {
            refresh: antiCollisionRefresh,
            init: init,
            setVisibility: setVisibility,
            getMistakeElements: getMistakeElements,
            destroy: destroy,
            unit: {
                createMistakeTag: createMistakeTag,
                removeMistakeTag: removeMistakeTag,
                saveSelection: saveSelection,
                restoreSelection: restoreSelection,
                wrapSelection: wrapSelection,
                isThereBlockElemDifference: isThereBlockElemDifference,
                setAntiCollision: setAntiCollision
            }
        };
    }, [ "widget.utils", "widget.selectionManager" ]);
})();

(function() {
    var module = gingerModule.load("widget.injector.draft", function() {
        var injection = function() {
            var eventRegister = {};
            var findReactProp = function(elem) {
                for (var key in elem) {
                    if (key.indexOf("__reactInternalInstance") === 0 || key.indexOf("__reactProps")) {
                        return elem[key].memoizedProps || elem[key]._currentElement.props;
                    }
                }
                return null;
            };
            var dressUp = function(e) {
                e.defaultPrevented = false;
                e.target = document.activeElement;
                e.preventDefault = function() {};
                return e;
            };
            document.addEventListener("gingerModule-hasReactProp", function(e) {
                var data = e.detail;
                var hasReactProp = !!findReactProp(data.element);
                data.cb(hasReactProp);
            });
            document.addEventListener("gingerModule-eventEmitter-react-fire", function(e) {
                var reactProps = findReactProp(document.activeElement);
                if (e.detail.event) {
                    var eventName = e.detail.event;
                    var eventParams = e.detail.params ? dressUp(e.detail.params) : {};
                    if (reactProps && eventName && reactProps[eventName]) {
                        reactProps[eventName](eventParams);
                    }
                } else if (e.detail.prop) {
                    if (reactProps) {
                        reactProps[e.detail.prop] = e.detail.value;
                    }
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onpaste", function(e) {
                var reactProps = findReactProp(document.activeElement);
                var pasteObj = dressUp({
                    clipboardData: {
                        getData: function() {
                            return e.detail || "";
                        },
                        items: [ "text/plain" ]
                    }
                });
                if (reactProps && reactProps.onPaste) {
                    reactProps.onPaste(pasteObj);
                } else if (reactProps && reactProps.onChange) {
                    var textarea = document.activeElement;
                    var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
                    nativeTextAreaValueSetter.call(textarea, e.detail);
                    var event = new Event("input", {
                        bubbles: true
                    });
                    textarea.dispatchEvent(event);
                }
            });
            document.addEventListener("gingerModule-eventEmitter-onkeydown", function(e) {
                var reactProps = findReactProp(document.activeElement);
                var keyDownObj = dressUp(e.detail);
                if (reactProps) {
                    reactProps.onKeyDown(keyDownObj);
                }
            });
            var trigger = function(eventName, data) {
                if (!eventRegister[eventName]) return;
                for (var i = 0; i < eventRegister[eventName].length; i++) {
                    var listener = eventRegister[eventName][i];
                    listener(new CustomEvent(eventName), data);
                }
            };
            var nativeEventListener = document.addEventListener.bind(document);
            document.addEventListener = function(eventName, callback, options) {
                var eventRegisterItem = eventRegister[eventName] || [];
                eventRegisterItem.push(callback);
                eventRegister[eventName] = eventRegisterItem;
                nativeEventListener(eventName, callback, options);
            };
        };
        return injection;
    });
})();

(function() {
    var module = gingerModule.load("widget.injector", function() {
        var inject = function(doc, injection, args) {
            if (!args) args = [];
            var scriptTag = doc.createElement("script");
            var injectionString = injection.toString();
            scriptTag.src = gingerModule.get("gingerchromeext.browser").runtime.getURL(injection);
            doc.documentElement.appendChild(scriptTag);
        };
        var injections = {};
        var injectOnce = function(whichInjector) {
            if (!injections[whichInjector]) {
                injections[whichInjector] = true;
                if (document.body) {
                    inject(document, whichInjector, []);
                }
            }
        };
        return {
            injectOnce: injectOnce
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.injector.quill", function() {
        var injection = function() {
            var searchForProp = function(o, prop, d, path) {
                if (!d) d = 0;
                if (!path) path = [];
                if (d > 5) return null;
                for (var key in o) {
                    if (key === "CSSStyleSheet") break;
                    if (key === prop) {
                        return o[key];
                    }
                    if (typeof o[key] === "object") {
                        var newPath = path.slice(0);
                        newPath.push(key);
                        var oFound = searchForProp(o[key], prop, d + 1, newPath);
                        if (oFound) {
                            return oFound;
                        }
                    }
                }
                return null;
            };
            var injectGingerModuleToQuill = function(quillInstance) {
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
                }
                function _possibleConstructorReturn(self, call) {
                    if (!self) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return call && (typeof call === "object" || typeof call === "function") ? call : self;
                }
                var gingerInline = function() {
                    _inherits(gingerInline, quillInstance.imports["blots/inline"]);
                    function gingerInline() {
                        return _possibleConstructorReturn(this, (gingerInline.__proto__ || Object.getPrototypeOf(gingerInline)).apply(this, arguments));
                    }
                    return gingerInline;
                }();
                gingerInline.tagName = "GWMW";
                gingerInline.blotName = "ginger-inline";
                gingerInline.formats = function(e) {
                    return e.id;
                };
                quillInstance.register("formats/ginger-inline", gingerInline);
                var gingerInlinePH = function() {
                    _inherits(gingerInlinePH, quillInstance.imports["blots/inline"]);
                    function gingerInlinePH() {
                        return _possibleConstructorReturn(this, (gingerInline.__proto__ || Object.getPrototypeOf(gingerInlinePH)).apply(this, arguments));
                    }
                    return gingerInlinePH;
                }();
                gingerInlinePH.tagName = "GWCPHB";
                gingerInlinePH.blotName = "ginger-inline-ph";
                quillInstance.register("formats/ginger-inline-ph", gingerInlinePH);
            };
            var injectionSucceeded = false;
            var init = function() {
                if (injectionSucceeded) return;
                try {
                    var components = searchForProp(window.Aura, "ComponentService.indexComponent");
                    var quillLib = searchForProp(components, "lightning/quillLib");
                    var quill = searchForProp(quillLib, "Quill");
                    injectGingerModuleToQuill(quill);
                    injectionSucceeded = true;
                    window.removeEventListener("click", init);
                } catch (e) {
                    console.error("ginger injection failed", e);
                }
            };
            window.addEventListener("click", init);
            init();
        };
        return injection;
    });
})();

(function() {
    var module = gingerModule.load("widget.inputFinder", function() {
        var config = {
            selector: "textarea, *[contenteditable]"
        };
        var eventScope = $gingerWidgetJquery({});
        var inputFields = [];
        var refreshIntervalTime = 5e3;
        var refreshInterval = null;
        var isNotionVal = null;
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        var addNewField = function(field) {
            $field = $gingerWidgetJquery(field);
            var newfield = {};
            newfield.id = gingerModule.get("widget.utils").generateUID();
            $field.data("gingerWidgetFieldId", newfield.id);
            $field.gingerWidgetFieldId = newfield.id;
            var exist = inputFields.some(function(existingField) {
                return $gingerWidgetJquery(existingField).data("gingerWidgetFieldId") === $field.gingerWidgetFieldId;
            });
            if (!exist) {
                inputFields.push(field);
            }
            eventScope.trigger("new", $field.get(0));
        };
        var doesAreaApplyForAnOverride = function(area) {
            var activeInput = $gingerWidgetJquery(area);
            var loc = location.hostname;
            if (self != top && /localhost/.test(loc) && window.parent.location) loc = window.parent.location.hostname;
            if (window.location.hostname === "www.linkedin.com") {
                if (activeInput.attr("id") === "jobs-description") {
                    return true;
                } else if (activeInput.hasClass("mentions-texteditor__contenteditable")) {
                    return true;
                } else if (/rich-text-editor/.test(activeInput.parent().attr("id"))) {
                    return true;
                }
            }
            if (window.location.hostname === "mail.google.com") {
                activeInput[0].setAttribute("data-ginger-wrap", "gmail");
                return true;
            }
            if (window.location.hostname === "translate.google.com") {
                return true;
            }
            if (window.location.hostname === "www.facebook.com") {
                return true;
            }
            if (/outlook.live.com|outlook.office365.com|outlook.office.com/.test(loc)) {
                return true;
            }
            if (/1und1.de|gmx.net|gmx.com|web.de/.test(loc)) {
                return true;
            }
            if (window.location.hostname === "localhost") {
                if (activeInput.attr("id") === "unittest-input-field-that-matches-override-criteria") {
                    return true;
                }
            }
            if (activeInput.is(".cke_editable")) {
                return true;
            }
            return false;
        };
        var refresh = function(cb) {
            if (config.selector === null) return;
            if (gingerModule.get("widget").isEnabled()) {
                if (gingerModule.get("widget.utils").isNotion() && !isNotionVal) {
                    return;
                }
                var activeInput = $gingerWidgetJquery(isNotionVal ? isNotionVal : document.activeElement);
                var areaConfig = gingerModule.get("widget.siteSettings").get(window.location.href, isNotionVal ? isNotionVal : document.activeElement);
                if (isGoogleDocs()) {
                    activeInput = $gingerWidgetJquery(document.querySelector(".ginger-container-body"));
                }
                var isConntentAttr = activeInput && (activeInput.attr("contenteditable") === "" || activeInput.attr("contenteditable") === true || activeInput.attr("contenteditable") == "true");
                if (activeInput && !activeInput.data("gingerWidgetFieldId") && activeInput.attr("disableGinger") !== "true" && activeInput.attr("data-ginger") !== "false" && (activeInput.is(config.selector) || isConntentAttr) && !areaConfig.disabled) {
                    if (activeInput.attr("spellcheck") !== "false" || doesAreaApplyForAnOverride(isNotionVal ? isNotionVal : document.activeElement)) {
                        gingerModule.get("widget.preFlightProbe").run(isNotionVal ? isNotionVal : document.activeElement).then(function passed() {
                            addNewField(activeInput);
                            if (cb) cb();
                        }, function failed(reason) {
                            addNewField(activeInput);
                            if (cb) cb();
                        });
                    }
                }
            } else {
                console.log("widget is disabled");
            }
        };
        var inited = false;
        var init = function(initConfig) {
            if (inited) return;
            config = gingerModule.get("widget.utils").merge(config, initConfig);
            refresh();
            refreshInterval = setInterval(refresh, refreshIntervalTime);
            document.addEventListener("click", function(e) {
                if (gingerModule.get("widget.utils").isNotion()) {
                    isNotionVal = e.target;
                    refresh();
                } else {
                    setTimeout(refresh, 400);
                }
            });
            if (gingerModule.get("widget.utils").isNotion()) {
                document.addEventListener("keydown", () => {
                    var notionBlock = getSelectionStart();
                    if (notionBlock?.className === "notranslate") {
                        isNotionVal = notionBlock;
                        refresh();
                    }
                });
            }
            inited = true;
        };
        function getSelectionStart() {
            return document.getSelection()?.anchorNode?.parentNode;
        }
        var feed = function(elem) {
            addNewField(elem);
            return elem;
        };
        return {
            listen: eventScope,
            refresh: refresh,
            feed: feed,
            init: init
        };
    }, [ "widget.utils", "widget.siteSettings" ]);
})();

(function() {
    var module = gingerModule.load("widget.inputHandler", function() {
        var gingerInput;
        var representation = [];
        var latestCorrectionTimeStamp = null;
        var mouseActiveOnInput = null;
        var typeTimeout = null;
        var typeTimeoutInterval = 1e3;
        var mistakeHoverTimeout = null;
        var mistakeHoverTimeoutInterval = 50;
        var mistakeHoverElement = null;
        var isEnabled = true;
        var isForeign = false;
        var foreignLogger = {};
        var typeEvent = null;
        var correctionHistory = [];
        var valCache = {};
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        const redBgColor = "rgba(255, 102, 140, 0.2)";
        const yellowBgColor = "rgba(255, 203, 1, 0.2)";
        let isGDocsPageDisabled = false;
        var getVal = function() {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(gingerInput.element);
            var raw = isRTE ? gingerInput.element.innerHTML : gingerInput.element.value;
            if (valCache.raw && valCache.raw === raw) {
                return valCache.value;
            }
            valCache.raw = raw;
            valCache.value = gingerModule.get("widget.contentManager").getVal(gingerInput.element);
            return valCache.value;
        };
        var getFormattedVal = function() {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(gingerInput.element);
            if (isRTE) {
                if ($gingerWidgetJquery(gingerInput.element).text() === $gingerWidgetJquery(gingerInput.element).attr("data-placeholder-default")) {
                    return "";
                } else {
                    return $gingerWidgetJquery(gingerInput.element).html().replace(/<[\/]?gwmw[^>]*>/gi, "");
                }
            } else {
                return $gingerWidgetJquery(gingerInput.element).val();
            }
        };
        var setVal = function(content, from, to, fromRephrase) {
            gingerModule.get("widget.contentManager").setVal(gingerInput.element, content, from, to, fromRephrase).then(function() {
                updateRepresentation();
                recheck(true);
            });
        };
        var getSentenceById = function(id) {
            var index = getSentenceIndexById(id);
            return index !== null ? representation[index] : null;
        };
        var getSentenceIndexById = function(id) {
            for (var i = 0; i < representation.length; i++) {
                if (representation[i].id === id) {
                    return i;
                }
            }
            return null;
        };
        var getSentenceByCorrectionId = function(correctionId) {
            for (var i = 0; i < representation.length; i++) {
                if (representation[i].correction && representation[i].correction.Corrections) {
                    for (var h = 0; h < representation[i].correction.Corrections.length; h++) {
                        var correction = representation[i].correction.Corrections[h];
                        if (correction.id === correctionId) {
                            return representation[i];
                        }
                    }
                }
            }
            return null;
        };
        var getCorrectionById = function(correctionId) {
            for (var i = 0; i < representation.length; i++) {
                if (representation[i].correction && representation[i].correction.Corrections) {
                    for (var h = 0; h < representation[i].correction.Corrections.length; h++) {
                        var correction = representation[i].correction.Corrections[h];
                        if (correction.id === correctionId) {
                            return correction;
                        }
                    }
                }
            }
            return null;
        };
        var getCorrectionIdByMistakeTagId = function(tagId) {
            return tagId.replace("gwmw-", "");
        };
        var replaceInTextarea = function(replacement, from, to, cords) {
            return gingerModule.get("widget.contentManager").setVal(gingerInput.element, replacement, from, to, undefined, cords);
        };
        var removeCorrectionById = function(correctionId) {
            var sentence = getSentenceByCorrectionId(correctionId);
            var offset = 0;
            for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                if (sentence.correction.Corrections[i].id === correctionId) {
                    sentence.correction.Corrections.splice(i, 1);
                    i--;
                }
            }
            return sentence;
        };
        var approveMistake = function(correctionId, cords) {
            var reprCache = representation;
            var deferred = $gingerWidgetJquery.Deferred();
            var sentence = getSentenceByCorrectionId(correctionId);
            var correction = getCorrectionById(correctionId);
            var mistakeSentenceStartsAt = sentence.startsAt;
            var replaceWith = getCorrectedSentencePart(sentence, correction.From, correction.To + 1);
            var lengthDifferenceToCorrectWithinSentence = replaceWith.length - (correction.To + 1 - correction.From);
            removeCorrectionById(correction.id);
            replaceInTextarea(replaceWith, mistakeSentenceStartsAt + correction.From, mistakeSentenceStartsAt + correction.To + 1, cords).then(function() {
                updateRepresentation();
                deferred.resolve();
            });
            return deferred.promise();
        };
        var handleCorrectionBubbleResult = function(result, data) {
            try {
                var mistake = document.querySelector(`.gwmw-${data.correctionId}`);
                var cords = $gingerWidgetJquery(mistake).data("cords");
                correctionHistory.push({
                    result: result,
                    bubbleResultData: data,
                    representation: representation
                });
                var correction, sentence;
                if (result === "ignoreAll") {
                    sentence = getSentenceById(data.sentenceId);
                    correction = getCorrectionById(data.correctionId);
                    var remainingCorrections = sentence.correction.Corrections.length;
                    var mistakesToIgnore = [];
                    for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                        var correctionItem = sentence.correction.Corrections[i];
                        if (correctionItem.From >= correction.UXFrgFrom && correctionItem.To <= correction.UXFrgTo) {
                            mistakesToIgnore.push(correctionItem);
                        }
                    }
                    for (var i = 0; i < mistakesToIgnore.length; i++) {
                        gingerModule.get("widget.correctionService").ignoreMistake(mistakesToIgnore[i], sentence, function() {});
                    }
                    recheck(true);
                } else if (result === "approve") {
                    var singleCords = {
                        startX: cords?.singleStart,
                        endX: cords?.singleEnd,
                        startY: cords?.singleFirstTop,
                        endY: cords?.singleLastTop,
                        startHeight: cords?.singleFirstHeight,
                        endHeight: cords?.singleLastHeight
                    };
                    approveMistake(data.correctionId, singleCords).then(function() {
                        gingerInput.stats.update(representation);
                    });
                    gingerModule.get("widget.licenseLimits").approvalsUsed(1);
                } else if (result === "ignore") {
                    sentence = getSentenceByCorrectionId(data.correctionId);
                    correction = getCorrectionById(data.correctionId);
                    removeCorrectionById(data.correctionId);
                    gingerModule.get("widget.correctionService").ignoreMistake(correction, sentence);
                    recheck(true);
                } else if (result === "approveAll") {
                    sentence = getSentenceById(data.sentenceId);
                    correction = getCorrectionById(data.correctionId);
                    var fragmentCords = {
                        startX: cords?.fragmentStart,
                        endX: cords?.fragmentEnd,
                        startY: cords?.fragmentFirstTop,
                        endY: cords?.fragmentLastTop,
                        startHeight: cords?.fragmentFirstHeight,
                        endHeight: cords?.fragmentLastHeight
                    };
                    var sentenceText = getCorrectedSentencePart(sentence, correction.UXFrgFrom, correction.UXFrgTo + 1);
                    var approvalsUsed = 0;
                    for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                        if (sentence.correction.Corrections[i].From >= correction.UXFrgFrom && sentence.correction.Corrections[i].To <= correction.UXFrgTo) {
                            approvalsUsed++;
                            sentence.correction.Corrections.splice(i, 1);
                            i--;
                        }
                    }
                    var correctionMock = {
                        From: correction.UXFrgFrom,
                        To: correction.UXFrgTo,
                        UXFrgFrom: correction.UXFrgFrom,
                        UXFrgTo: correction.UXFrgTo,
                        Suggestions: [ {
                            Text: sentenceText
                        } ],
                        id: gingerModule.get("widget.utils").generateUID()
                    };
                    sentence.correction.Corrections.push(correctionMock);
                    approveMistake(correctionMock.id, fragmentCords).then(function() {});
                    gingerModule.get("widget.licenseLimits").approvalsUsed(approvalsUsed);
                }
            } catch (e) {
                if (console && console.error) console.error(e);
                throw new Error(e);
            }
        };
        var lastHit = null;
        var checkMistakeHovers = function(e) {
            if (lastHit) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, lastHit)) {
                    return lastHit;
                }
            }
            var mistakeElements = gingerInput.highlighter.getMistakeElements();
            var hitFound = null;
            for (var i = 0; i < mistakeElements.length && hitFound === null; i++) {
                if (gingerModule.get("widget.utils").isMouseEventOverElement(e, mistakeElements[i])) {
                    hitFound = mistakeElements[i];
                    return hitFound;
                }
            }
            return null;
        };
        var handleMouseMoveOnElement = function(e) {
            if (mistakeHoverTimeout) mistakeHoverTimeout = clearTimeout(mistakeHoverTimeout);
            var target = e.currentTarget.id === "writer" || e.currentTarget.id === "mini-writer" ? e.currentTarget.id : "widget";
            mistakeHoverTimeout = setTimeout(function() {
                var mistakeTarget = checkMistakeHovers(e);
                if (mistakeTarget) {
                    var id;
                    lastHit = mistakeTarget;
                    if ($gingerWidgetJquery(mistakeTarget).attr("id")) {
                        id = getCorrectionIdByMistakeTagId($gingerWidgetJquery(mistakeTarget).attr("id"));
                    } else {
                        id = $gingerWidgetJquery(mistakeTarget).data("cid");
                    }
                    var correction = getCorrectionById(id);
                    if (!correction) return;
                    var sentence = getSentenceByCorrectionId(correction.id);
                    if (sentence.correction.checkType === "shallow") {
                        recheck(true, function() {
                            handleMouseMoveOnElement(e);
                        });
                    } else {
                        clearMistakeStylesOnHover();
                        if (!$gingerWidgetJquery(mistakeTarget).hasClass("no-suggestion")) {
                            $gingerWidgetJquery(mistakeTarget).css("background-color", redBgColor);
                        } else {
                            $gingerWidgetJquery(mistakeTarget).css("background-color", yellowBgColor);
                        }
                        gingerModule.get("widget.correctionBubble").show(correction, sentence, handleCorrectionBubbleResult, target);
                    }
                } else {
                    clearMistakeStylesOnHover();
                    if (lastHit) {
                        gingerModule.get("widget.correctionBubble").gracefulHide();
                    }
                    lastHit = null;
                }
            }, mistakeHoverTimeoutInterval);
        };
        function clearMistakeStylesOnHover() {
            const allMistakes = document.querySelectorAll("gwmw");
            allMistakes?.forEach(mistakeEl => {
                $gingerWidgetJquery(mistakeEl).css("background-color", "transparent");
            });
        }
        var bindToMistakeHovers = function() {
            $gingerWidgetJquery(gingerInput.element).on("mousemove", handleMouseMoveOnElement);
        };
        var unBindFromMistakeHovers = function() {
            $gingerWidgetJquery(gingerInput.element).off("mousemove", handleMouseMoveOnElement);
        };
        var setMouseActiveOnInput = function(isActive) {
            mouseActiveOnInput = isActive;
            if (isActive) {
                bindToMistakeHovers();
            } else {
                unBindFromMistakeHovers();
            }
        };
        var clearGracefulRecheck = function() {
            if (typeTimeout !== null) {
                typeTimeout = clearTimeout(typeTimeout);
            }
        };
        var gracefulRecheck = function(timeout) {
            clearGracefulRecheck();
            typeTimeout = setTimeout(function() {
                recheck(true);
            }, timeout || typeTimeoutInterval);
        };
        var isTeams = function() {
            var loc = location.hostname;
            return /teams.microsoft.com/.test(loc);
        };
        var getCorrectedSentencePart = function(sentence, from, to) {
            var sentenceText = sentence.text;
            var diff = 0;
            for (var i = 0; i < sentence.correction.Corrections.length; i++) {
                if (sentence.correction.Corrections[i].From >= from && sentence.correction.Corrections[i].To <= to - 1) {
                    var mistakeFrom = sentence.correction.Corrections[i].From;
                    var mistakeTo = sentence.correction.Corrections[i].To + 1;
                    var replaceWith = sentence.correction.Corrections[i].Suggestions.length ? sentence.correction.Corrections[i].Suggestions[0].Text : sentence.text.substring(mistakeFrom, mistakeTo);
                    if (replaceWith.length === 0 && (isGoogleDocs || isTeams)) {
                        mistakeFrom -= 1;
                    }
                    sentenceText = sentenceText.substring(0, mistakeFrom + diff) + replaceWith + sentenceText.substring(mistakeTo + diff);
                    diff += replaceWith.length - (mistakeTo - mistakeFrom);
                }
            }
            return sentenceText.substring(from, to + diff);
        };
        var listenerRegistry = {};
        var subscribeToEvent = function(eventName, handler) {
            if (!listenerRegistry[eventName]) {
                listenerRegistry[eventName] = [];
            }
            var eventSpace = listenerRegistry[eventName];
            eventSpace.push(handler);
            gingerInput.events.listen.on(eventName, handler);
        };
        var unsubscribeFromEvent = function(eventName) {
            if (!listenerRegistry[eventName]) return;
            for (var i = 0; i < listenerRegistry[eventName].length; i++) {
                gingerInput.events.listen.off(eventName, listenerRegistry[eventName][i]);
            }
        };
        var destroy = function() {
            gingerModule.get("widget.correctionBubble").hide();
            $gingerWidgetJquery(gingerInput.element).attr("spellcheck", "true");
            $gingerWidgetJquery(gingerInput.element).data("gingerWidgetFieldId", null);
            gingerInput.highlighter.destroy();
            setMouseActiveOnInput(false);
            for (var event in listenerRegistry) {
                unsubscribeFromEvent(event);
            }
        };
        var subscribeToEvents = function() {
            subscribeToEvent("focus", function() {
                gracefulRecheck();
            });
            subscribeToEvent("blur", function() {
                setTimeout(function() {
                    gingerModule.get("widget.correctionBubble").hide();
                }, 1e3);
            });
            subscribeToEvent("delete", function() {
                typeEvent = "delete";
                setTimeout(function() {
                    gingerInput.events.listen.trigger("inputchange");
                }, 50);
            });
            subscribeToEvent("mouseover", function() {
                setMouseActiveOnInput(true);
            });
            subscribeToEvent("mouseout", function() {
                setMouseActiveOnInput(false);
            });
            subscribeToEvent("paste", function() {
                setTimeout(function() {
                    updateRepresentation();
                    recheck(true);
                }, 50);
            });
            subscribeToEvent("inputchange", function(e) {
                updateRepresentation();
                var isRTE = gingerModule.get("widget.utils").isRichTextElement(gingerInput.element);
                var val = isRTE ? $gingerWidgetJquery(gingerInput.element).text() : $gingerWidgetJquery(gingerInput.element).val();
                if (/^\s*$/.test(val)) {
                    representation = [];
                    gingerInput.stats.update([]);
                    gingerInput.highlighter.refresh([]);
                    if (isForeign) markForeign(false);
                } else {
                    if (typeEvent === "sentence.end") {
                        recheck(true);
                    } else if (typeEvent === "word.end") {
                        gracefulRecheck();
                    } else if (typeEvent === "delete") {
                        gingerInput.highlighter.refresh(representation);
                        gingerInput.stats.update(representation);
                        gracefulRecheck();
                    } else {
                        setTimeout(function() {
                            gingerInput.highlighter.refresh(representation);
                            gingerInput.stats.update(representation);
                            gracefulRecheck();
                        }, 10);
                    }
                }
                typeEvent = null;
                gingerInput.stats.update(representation);
            });
            subscribeToEvent("sentence.end", function() {
                typeEvent = "sentence.end";
            });
            subscribeToEvent("click", function() {
                if (window.location.hostname === "mail.google.com") {
                    removeGmailCorrection();
                }
                typeEvent = "sentence.end";
                setTimeout(function() {
                    gingerInput.events.listen.trigger("inputchange");
                }, 50);
            });
            subscribeToEvent("enter", function() {
                typeEvent = "sentence.end";
                setTimeout(function() {
                    gingerInput.events.listen.trigger("inputchange");
                }, 50);
            });
            subscribeToEvent("word.end", function() {
                typeEvent = "word.end";
            });
            subscribeToEvent("visibility.change", function(e, isVisible) {
                if (isEnabled) {
                    gingerInput.highlighter.setVisibility(isVisible);
                }
            });
        };
        var updateRepresentation = function() {
            var newRepr = gingerModule.get("widget.phraseService").getRepresentation(gingerInput.element);
            var oldRepr = gingerModule.get("widget.utils").cloneRepresentation(representation);
            var mergedRepr = gingerModule.get("widget.correctionService").mergeCorrections(newRepr, oldRepr);
            representation = mergedRepr;
            gingerInput.highlighter.refresh(representation);
            gingerInput.stats.update(representation);
            return representation;
        };
        var recheck = function(forceRecheck, next) {
            if (isGoogleDocs() && isGDocsPageDisabled) {
                return;
            }
            if (!isEnabled) {
                return next && next([]);
            }
            if (!representation.length) {
                gingerInput.highlighter.refresh(representation);
                gingerInput.stats.update(representation);
                if (next) next([]);
                return;
            }
            clearGracefulRecheck();
            if (forceRecheck) {
                for (var i = 0; i < representation.length; i++) {
                    representation[i].activeSentence = null;
                }
            }
            var repr = gingerModule.get("widget.utils").cloneRepresentation(representation);
            var timeStamp = new Date().getTime();
            latestCorrectionTimeStamp = timeStamp;
            var updateTimeout = null;
            gingerModule.get("widget.correctionService").correct(repr, function stepCallBack(correctedRepresentation) {
                if (latestCorrectionTimeStamp !== timeStamp) {
                    return;
                }
                representation = correctedRepresentation;
                if (!updateTimeout) {
                    updateRepresentation();
                } else {
                    updateTimeout = clearTimeout(updateTimeout);
                }
                updateTimeout = setTimeout(function() {
                    updateTimeout = clearTimeout(updateTimeout);
                    updateRepresentation();
                }, 10);
            }, function doneCallBack() {
                gingerModule.get("widget.config").set("charCount", representation[representation.length - 1].endsAt);
                if (latestCorrectionTimeStamp !== timeStamp) {
                    return;
                }
                foreignLogger = {};
                for (var ri = 0; ri < representation.length; ri++) {
                    var s = representation[ri];
                    if (s.correction && s.correction.Sentences && s.correction.Sentences.length && !s.correction.Sentences[0].IsEnglish && s.words.length >= 8) {
                        markForeign(true);
                    } else if (!getIsForeignLocked() && s.correction && s.correction.Corrections && s.correction.Corrections.length && s.words.length >= 8) {
                        gingerModule.get("widget.api").detectLang(s.text, function(result) {
                            var detectedLangsArray = result.detectedLanguages;
                            if (detectedLangsArray[0] && detectedLangsArray[0].language !== "en") markForeign(true);
                        });
                    }
                }
                gingerModule.get("widget.correctionBubble").hide();
                if (next) next(representation);
            });
        };
        var focus = function() {
            gingerInput.element.focus();
        };
        var flush = function() {
            setVal("");
            representation = [];
            gingerInput.stats.update([]);
            gingerInput.highlighter.refresh([]);
        };
        var disable = function() {
            if (!isEnabled) return;
            isEnabled = false;
            gingerModule.get("widget.correctionBubble").hide();
            if (!isGoogleDocs()) {
                $gingerWidgetJquery(gingerInput.element).attr("spellcheck", "true");
            }
            gingerInput.highlighter.setVisibility(false);
            gingerInput.events.listen.trigger("enable.change", {
                enabled: false
            });
            gingerInput.events.listen.trigger("disabled");
        };
        var enable = function() {
            if (isEnabled) return;
            isEnabled = true;
            $gingerWidgetJquery(gingerInput.element).attr("spellcheck", "false");
            gingerInput.highlighter.setVisibility(true);
            gingerInput.events.listen.trigger("enable.change", {
                enabled: true
            });
            gingerInput.events.listen.trigger("enabled");
            recheck(true);
        };
        var foreignLock = false;
        var markForeign = function(foreign, lock) {
            if (lock) foreignLock = true;
            if (isForeign === foreign) return;
            if (foreignLock && !lock) return;
            isForeign = foreign;
            if (foreign && isEnabled) {
                disable();
            } else if (!isEnabled) {
                enable();
            }
            gingerInput.events.listen.trigger("markedForeign.change", foreign);
        };
        var getIsForeign = function() {
            return isForeign;
        };
        var getIsForeignLocked = function() {
            return foreignLock;
        };
        var removeGmailCorrection = function() {
            var gmailCorrectionWrapper = document.querySelectorAll("[data-overlay-action=spellreplace]");
            gmailCorrectionWrapper = Array.from(gmailCorrectionWrapper);
            if (gmailCorrectionWrapper && Array.isArray(gmailCorrectionWrapper) && gmailCorrectionWrapper.length > 0) {
                gmailCorrectionWrapper.forEach(function(e) {
                    var gmailCorrectionElement = e.closest(".pl");
                    if (gmailCorrectionElement) {
                        gmailCorrectionElement.remove();
                    }
                });
            }
        };
        var getWordsCount = function() {
            return representation.reduce(function(acc, item) {
                return acc + item.words.length;
            }, 0);
        };
        var init = function(element) {
            if (!element) return;
            element.setAttribute("spellcheck", "false");
            try {
                gingerInput = {
                    element: $gingerWidgetJquery(element).get(0),
                    id: $gingerWidgetJquery(element).data("gingerWidgetFieldId"),
                    events: null,
                    highlighter: null,
                    rewriter: null,
                    stats: null,
                    empty: flush,
                    focus: focus,
                    setVal: setVal,
                    getVal: getVal,
                    enable: enable,
                    disable: disable,
                    getFormattedVal: getFormattedVal,
                    markForeign: markForeign,
                    getIsForeign: getIsForeign,
                    setRepresentation: function(repr) {
                        representation = repr;
                    },
                    getRepresentation: function() {
                        return representation;
                    },
                    getWordsCount: getWordsCount,
                    isEnabled: function() {
                        return isEnabled;
                    },
                    destroy: destroy,
                    unit: {
                        replaceInTextarea: replaceInTextarea,
                        recheck: recheck,
                        updateRepresentation: updateRepresentation,
                        handleCorrectionBubbleResult: handleCorrectionBubbleResult,
                        flush: flush
                    }
                };
                gingerInput.settings = gingerModule.get("widget.siteSettings").get(window.location.href, element);
                if (!gingerInput.settings) return;
                gingerInput.highlighter = new gingerModule.get(gingerInput.settings.highlighter, true)();
                gingerInput.stats = new gingerModule.get("widget.inputHandler.stats", true)();
                gingerInput.events = new gingerModule.get("widget.inputHandler.events", true)();
                gingerInput.events.init(gingerInput);
                gingerInput.highlighter.init(gingerInput);
                gingerInput.stats.init(element);
                gingerModule.get("widget.config").listen.on("change/dialect", function(e, value) {
                    gingerModule.get("widget.cache").flush();
                    representation = [];
                    updateRepresentation();
                    recheck(true);
                });
                gingerModule.get("widget.session").listen.on("change", function(event, data) {
                    updateRepresentation();
                    recheck(true);
                });
                if (gingerInput.settings.injection) {
                    gingerModule.get("widget.injector").injectOnce(gingerInput.settings.injection);
                }
                gingerModule.get("widget.onlinestatus").listen.on("online", function() {
                    recheck(true);
                    console.log("widget is back online");
                });
                gingerModule.get("widget.onlinestatus").listen.on("offline", function() {
                    console.warn("Ginger Widget is offline");
                });
                subscribeToEvents();
                gingerModule.get("widget.storage").get("gDocsBlackList").then(function(result) {
                    var gDocsblackList = result || [];
                    if (gDocsblackList.indexOf(window.location.href) !== -1) {
                        isGDocsPageDisabled = true;
                    }
                    representation = gingerModule.get("widget.phraseService").getRepresentation(gingerInput.element);
                    gingerInput.stats.update(representation);
                    if (representation.length) {
                        recheck(true);
                    }
                });
            } catch (e) {
                console.error(e);
            }
            return gingerInput;
        };
        return {
            init: init
        };
    }, [ "widget.utils", "widget.api", "widget.phraseService", "widget.correctionService", "widget.correctionBubble", "widget.inputHandler.events", "widget.inputHandler.stats", "widget.onlinestatus" ]);
})();

(function() {
    var module = gingerModule.load("widget.inputHandler.events", function() {
        var eventScope = $gingerWidgetJquery({});
        var bindElement;
        var isSentenceEndingCharacter = function(charCode) {
            var char = String.fromCharCode(charCode);
            var sentenceEndingCharacters = "?!.,;:-";
            return charCode === 13 || sentenceEndingCharacters.indexOf(char) !== -1;
        };
        var isWordEndingCharacter = function(charCode) {
            var char = String.fromCharCode(charCode);
            var wordEndingCharacters = /\s/;
            var isWordEnding = char.match(wordEndingCharacters) !== null;
            var input = $gingerWidgetJquery(bindElement);
            var caretPosition = gingerModule.get("widget.caret").get(input);
            var charBeforeCaret = input.val().substr(caretPosition - 1, 1);
            return isSentenceEndingCharacter(charBeforeCaret.charCodeAt(0)) || charBeforeCaret.match(wordEndingCharacters) ? false : isWordEnding;
        };
        var layoutCache = {};
        var defaultMutationTimeoutTick = 800;
        var mutationTimeout = null;
        var checkMutation = function() {
            var mutationTimeoutTick = defaultMutationTimeoutTick;
            if (mutationTimeout) mutationTimeout = clearTimeout(mutationTimeout);
            var layout = gingerModule.get("widget.mutationDetectorService").getLayout(bindElement);
            if (layout.isVisible !== layoutCache.isVisible) {
                mutationTimeoutTick = defaultMutationTimeoutTick;
                eventScope.trigger("visibility.change", layout.isVisible);
                if (layout.isVisible) {
                    eventScope.trigger("mutation", {
                        input: bindElement
                    });
                }
            } else {
                var hasLayoutChanged = gingerModule.get("widget.mutationDetectorService").compareLayouts(layout, layoutCache);
                if (hasLayoutChanged) {
                    eventScope.trigger("mutation", {
                        input: bindElement
                    });
                    mutationTimeoutTick = 80;
                }
            }
            layoutCache = layout;
            mutationTimeout = setTimeout(checkMutation, mutationTimeoutTick);
        };
        var bind = function(gingerInput) {
            bindElement = gingerInput.element;
            var $input = $gingerWidgetJquery(bindElement);
            $input.on("keypress", function(e) {
                if (isSentenceEndingCharacter(e.which)) {
                    eventScope.trigger("sentence.end", {
                        input: $input
                    });
                } else if (isWordEndingCharacter(e.which)) {
                    eventScope.trigger("word.end", {
                        input: $input
                    });
                }
            });
            $input.bind("paste", function() {
                eventScope.trigger("paste", {
                    input: $input
                });
            });
            $input.on("keyup", function(e) {
                if (e.which === 13) {
                    eventScope.trigger("enter", {
                        input: $input
                    });
                }
            });
            $input.on("keydown", function(e) {
                if ([ 8, 46 ].indexOf(e.which) !== -1) {
                    eventScope.trigger("delete", {
                        input: $input
                    });
                } else if ([ 37, 38, 39, 40 ].indexOf(e.which) !== -1) {
                    eventScope.trigger("inputchange", {
                        input: $input
                    });
                } else if (e.which === 89 && e.ctrlKey) {
                    eventScope.trigger("paste");
                } else if (e.which === 90 && e.ctrlKey) {
                    eventScope.trigger("paste");
                } else if (gingerModule.get("widget.utils").isCKEditor(bindElement)) {
                    eventScope.trigger("inputchange", {
                        input: $input
                    });
                }
            });
            $input.focus(function() {
                eventScope.trigger("focus", {
                    input: $input
                });
            });
            $input.blur(function() {
                eventScope.trigger("blur", {
                    input: $input
                });
            });
            $input.scroll(function() {
                eventScope.trigger("scroll", {
                    input: $input
                });
            });
            $input.mouseover(function() {
                eventScope.trigger("mouseover", {
                    input: $input
                });
            });
            $input.mouseout(function() {
                eventScope.trigger("mouseout", {
                    input: $input
                });
            });
            $input.keydown(function(e) {
                eventScope.trigger("keydown", {
                    input: $input,
                    event: e
                });
            });
            checkMutation();
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(bindElement);
            document.addEventListener("click", function() {
                const mutationIntervals = [ 0, 50, 100, 200, 500 ];
                mutationIntervals.forEach(function(interval) {
                    setTimeout(checkMutation, interval);
                });
                eventScope.trigger("click");
            });
            bindElement.addEventListener("input", function() {
                eventScope.trigger("inputchange", {
                    input: bindElement
                });
            });
            $input.on("paste", function(e) {
                if (e.which === 8 || e.which === 46) {
                    return true;
                }
                eventScope.trigger("paste");
            });
        };
        return {
            listen: eventScope,
            checkMutation: checkMutation,
            init: bind
        };
    }, [ "widget.utils", "widget.caret", "widget.mutationDetectorService" ]);
})();

(function() {
    var module = gingerModule.load("widget.inputHandler.stats", function() {
        var eventScope = $gingerWidgetJquery({});
        var element;
        var id = Math.random();
        var stats;
        var getMistakesCount = function(representation) {
            var newStats = {
                grammar: 0,
                spelling: 0
            };
            if (representation && representation.length) {
                for (var i = 0; i < representation.length; i++) {
                    if (representation[i].correction) {
                        for (var h = 0; h < representation[i].correction.Corrections.length; h++) {
                            var correction = representation[i].correction.Corrections[h];
                            if (!correction.ignored) {
                                if (correction.CorrectionType === 3 || correction.CorrectionType === 2) {
                                    newStats.grammar++;
                                } else {
                                    newStats.spelling++;
                                }
                            }
                        }
                    }
                }
            }
            return newStats;
        };
        var getWordAndCharacterCounts = function(representation) {
            var newCount = {
                words: 0,
                characters: 0,
                charactersWithSpace: 0,
                sentences: 0
            };
            var text = gingerModule.get("widget.contentManager").getVal(element);
            if (text && !text.match(/^\s+$/)) {
                var words = text.replace(/\d+/g, "").replace(/(^\s*|\s*$)/g, "").match(/([^\x00-\x7F]|\w)+/g);
                if (!words) words = [];
                if (words.length === 1 && words[0] == "") words = [];
                var characters = text.replace(/\s+/g, "");
                newCount.words = words.length;
                newCount.characters = characters.length;
                newCount.charactersWithSpace = text.length;
            }
            if (representation && representation.length) {
                newCount.sentences = representation.length;
                if (representation[representation.length - 1].text.match(/^\s*$/)) {
                    newCount.sentences--;
                }
            }
            return newCount;
        };
        var update = function(representation) {
            if (!representation) return;
            try {
                var newStats = {};
                newStats.mistakes = getMistakesCount(representation);
                if (location.hostname === gingerModule.get("gingerchromeext.browser").runtime.id) {
                    newStats.count = getWordAndCharacterCounts(representation);
                }
                stats = newStats;
                eventScope.trigger("changed", stats);
            } catch (e) {
                console.error(e);
            }
        };
        var get = function() {
            return stats;
        };
        var init = function(elem) {
            element = elem;
            update();
        };
        return {
            listen: eventScope,
            update: update,
            init: init,
            get: get
        };
    }, [ "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.licenseLimits", function() {
        var approvalsLeft = null;
        var eventScope = $gingerWidgetJquery({});
        var setApprovalsLeft = function(newApprovalsLeft) {
            var approvalsLeftCache = approvalsLeft;
            approvalsLeft = newApprovalsLeft;
            handleLimitation(approvalsLeftCache);
        };
        var retrieveApprovalsLeft = function(dontHandleLimitation) {
            var deferred = $gingerWidgetJquery.Deferred();
            var session = gingerModule.get("widget.session").get();
            if (!gingerModule.get("widget.session").isLoggedIn()) {
                deferred.reject();
            } else {
                if (session.license === 2) {
                    if (dontHandleLimitation) {
                        approvalsLeft = -1;
                    } else {
                        setApprovalsLeft(-1);
                    }
                    deferred.resolve(approvalsLeft);
                } else {
                    gingerModule.get("widget.storage").get("loggedInApprovalsLeft").then(function(result) {
                        var loggedInApprovalsLeft = JSON.parse(result ?? "{}");
                        if (!loggedInApprovalsLeft[session.userId] && loggedInApprovalsLeft[session.userId] !== 0) {
                            loggedInApprovalsLeft[session.userId] = 10;
                            gingerModule.get("widget.storage").set("loggedInApprovalsLeft", JSON.stringify(loggedInApprovalsLeft));
                        }
                        if (dontHandleLimitation) {
                            approvalsLeft = loggedInApprovalsLeft[session.userId];
                        } else {
                            setApprovalsLeft(loggedInApprovalsLeft[session.userId]);
                        }
                        deferred.resolve(approvalsLeft);
                    });
                }
            }
            return deferred.promise();
        };
        var handleLimitation = function(prevApprovalCount) {
            if (prevApprovalCount === null) return;
            if (approvalsLeft === -1) return;
            if (prevApprovalCount >= 5 && approvalsLeft < 5 && approvalsLeft >= 1) {
                eventScope.trigger("triggered.approaching");
            } else if (approvalsLeft < 1) {
                if (prevApprovalCount > 0) {
                    eventScope.trigger("triggered.exceeded");
                } else {
                    eventScope.trigger("triggered.onbubble");
                }
            }
        };
        var hasLoggedOutApprovalsLeft = function() {
            var deferred = $gingerWidgetJquery.Deferred();
            gingerModule.get("widget.storage").get("loggedOutApprovalsLeft").then(function(loggedOutApprovalsLeft) {
                deferred.resolve(loggedOutApprovalsLeft > 0);
            });
            return deferred.promise();
        };
        var approvalsUsed = function(count) {
            if (!count) {
                setApprovalsLeft(approvalsLeft);
                return;
            }
            var session = gingerModule.get("widget.session").get();
            if (gingerModule.get("widget.session").isLoggedIn()) {
                if (session.license === 2) {
                    setApprovalsLeft(-1);
                    return;
                }
                gingerModule.get("widget.storage").get("loggedInApprovalsLeft").then(function(result) {
                    var loggedInApprovalsLeft = JSON.parse(result ?? "{}");
                    loggedInApprovalsLeft[session.userId] = loggedInApprovalsLeft[session.userId] - count;
                    if (loggedInApprovalsLeft[session.userId] <= 0) {
                        loggedInApprovalsLeft[session.userId] = 0;
                    }
                    gingerModule.get("widget.storage").set("loggedInApprovalsLeft", JSON.stringify(loggedInApprovalsLeft));
                    setApprovalsLeft(loggedInApprovalsLeft[session.userId]);
                });
            } else {
                gingerModule.get("widget.storage").get("loggedOutApprovalsLeft").then(function(loggedOutApprovalsLeft) {
                    if (loggedOutApprovalsLeft > 0) {
                        gingerModule.get("widget.storage").set("loggedOutApprovalsLeft", loggedOutApprovalsLeft - count);
                    }
                });
            }
        };
        var isCapacityLimited = function() {
            return approvalsLeft === 0;
        };
        var setLoggedInLastCheck = function(session, currentDate, weekInMSec) {
            gingerModule.get("widget.storage").get("loggedInApprovalsLeftLastCheck").then(function(result) {
                var loggedInApprovalsLeftLastCheck = JSON.parse(result ?? "{}");
                if (!loggedInApprovalsLeftLastCheck[session.userId]) {
                    if (!session.isAnonym && session.license !== 2) {
                        loggedInApprovalsLeftLastCheck[session.userId] = currentDate;
                        gingerModule.get("widget.storage").set("loggedInApprovalsLeftLastCheck", JSON.stringify(loggedInApprovalsLeftLastCheck));
                    }
                }
                if (currentDate - weekInMSec > loggedInApprovalsLeftLastCheck[session.userId]) {
                    loggedInApprovalsLeftLastCheck[session.userId] = currentDate;
                    gingerModule.get("widget.storage").set("loggedInApprovalsLeftLastCheck", JSON.stringify(loggedInApprovalsLeftLastCheck));
                    gingerModule.get("widget.storage").get("loggedInApprovalsLeft").then(function(result) {
                        var loggedInApprovalsLeft = JSON.parse(result ?? "{}");
                        loggedInApprovalsLeft[session.userId] = 10;
                        gingerModule.get("widget.storage").set("loggedInApprovalsLeft", JSON.stringify(loggedInApprovalsLeft));
                    });
                }
            });
        };
        var init = function() {
            gingerModule.get("widget.storage").get("loggedOutApprovalsLeft").then(function(result) {
                if (!result && result !== 0) {
                    gingerModule.get("widget.storage").set("loggedOutApprovalsLeft", 10);
                }
            });
            var weekInMSec = 1e3 * 60 * 60 * 24 * 7;
            var session = gingerModule.get("widget.session").get();
            var currentDate = Date.now();
            var loggedOutApprovalsLeftLastCheck;
            gingerModule.get("widget.storage").get("loggedOutApprovalsLeftLastCheck").then(function(result) {
                loggedOutApprovalsLeftLastCheck = result;
                if (!loggedOutApprovalsLeftLastCheck) {
                    gingerModule.get("widget.storage").set("loggedOutApprovalsLeftLastCheck", currentDate);
                }
            });
            gingerModule.get("widget.session").listen.on("change", function(e, session) {
                if (!gingerModule.get("widget.session").isLoggedIn()) {
                    if (currentDate - weekInMSec > loggedOutApprovalsLeftLastCheck) {
                        gingerModule.get("widget.storage").set("loggedOutApprovalsLeftLastCheck", currentDate);
                        gingerModule.get("widget.storage").set("loggedOutApprovalsLeft", 10);
                    }
                    approvalsLeft = 10;
                } else {
                    setLoggedInLastCheck(session, currentDate, weekInMSec);
                    approvalsLeft = null;
                    retrieveApprovalsLeft(true);
                }
            });
            if (gingerModule.get("widget.session").isLoggedIn()) {
                setLoggedInLastCheck(session, currentDate, weekInMSec);
                retrieveApprovalsLeft(true);
            } else {
                if (currentDate - weekInMSec > loggedOutApprovalsLeftLastCheck) {
                    gingerModule.get("widget.storage").set("loggedOutApprovalsLeftLastCheck", currentDate);
                    gingerModule.get("widget.storage").set("loggedOutApprovalsLeft", 10);
                }
                approvalsLeft = 10;
            }
        };
        init();
        return {
            approvalsUsed: approvalsUsed,
            isCapacityLimited: isCapacityLimited,
            hasLoggedOutApprovalsLeft: hasLoggedOutApprovalsLeft,
            retrieveApprovalsLeft: retrieveApprovalsLeft,
            listen: eventScope
        };
    }, [ "widget.session", "widget.config", "widget.storage" ]);
})();

var module = gingerModule.load("widget.measure", function() {
    var getPaddingBox = function(element, positionCache) {
        var borderBox = getBorderBoxWithScroll(element, positionCache);
        var width = borderBox.width;
        var height = borderBox.height;
        var top = borderBox.top;
        var left = borderBox.left;
        var elementStyles = getComputedStyle(element);
        var borderTop = parseFloat(elementStyles["border-top-width"]) || 0;
        var borderRight = parseFloat(elementStyles["border-right-width"]) || 0;
        var borderBottom = parseFloat(elementStyles["border-bottom-width"]) || 0;
        var borderLeft = parseFloat(elementStyles["border-left-width"]) || 0;
        var a = 0;
        var scaledWidth = 0;
        if ("BackCompat" !== document.compatMode || element !== document.body || element !== document.scrollingElement) {
            var scaledHeight = element.clientWidth / getScaleRatio(element);
            scaledWidth = height - element.clientHeight / getScaleRatio(element) - borderTop - borderBottom, 
            (a = width - scaledHeight - borderLeft - borderRight) < 1 && (a = 0), 
            scaledWidth < 1 && (scaledWidth = 0);
        }
        width -= borderLeft + a + borderRight, height -= borderTop + scaledWidth + borderBottom, 
        top += borderTop, left += borderLeft;
        return {
            width: width,
            height: height,
            top: top,
            right: left + width,
            bottom: top + height,
            left: left,
            border: {
                top: borderTop,
                right: borderRight,
                bottom: borderBottom,
                left: borderLeft
            }
        };
    };
    var getElementScroll = function(e) {
        var isBody = e === document.body && "BackCompat" === document.compatMode;
        var stop = isBody ? 0 : e.scrollTop;
        var sleft = isBody ? 0 : e.scrollLeft;
        return {
            top: stop,
            left: sleft
        };
    };
    var getScaleRatio = function(elem) {
        var ratio = 1;
        var width = elem.getBoundingClientRect().width;
        if (width > 0) {
            var oWidth = elem.offsetWidth;
            Math.abs(width - oWidth) > 1 ? ratio = oWidth / width : ratio = 1;
        } else ratio = 1;
        return ratio;
    };
    var getBorderBox = function(element) {
        var boundingClientRect = element.getBoundingClientRect();
        return {
            width: boundingClientRect.width,
            height: boundingClientRect.height,
            top: boundingClientRect.top,
            right: boundingClientRect.right,
            bottom: boundingClientRect.bottom,
            left: boundingClientRect.left
        };
    };
    var getBorderBoxWithScroll = function(e, positionCache) {
        var borderBox = getBorderBox(e);
        var documentScroll = getDocumentScroll();
        borderBox.top += documentScroll.top;
        borderBox.left += documentScroll.left;
        borderBox.bottom += documentScroll.top;
        borderBox.right += documentScroll.left;
        if (document.body && document.body.contains(e)) {
            var documentGap = getDocumentGap(positionCache);
            borderBox.top -= documentGap.top;
            borderBox.right -= documentGap.left;
            borderBox.bottom -= documentGap.top;
            borderBox.left -= documentGap.left;
        }
        return {
            width: borderBox.width,
            height: borderBox.height,
            top: borderBox.top,
            right: borderBox.right,
            bottom: borderBox.bottom,
            left: borderBox.left
        };
    };
    var getDocumentScroll = function() {
        var t = document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0, e = document.documentElement && document.documentElement.scrollLeft || document.body && document.body.scrollLeft || 0;
        return {
            top: t,
            left: e
        };
    };
    var hasRelativePosition = function(positionCache) {
        return [ "relative", "fixed", "absolute", "sticky" ].indexOf(positionCache) > -1;
    };
    var getDocumentGap = function(positionCache) {
        var result = {
            top: 0,
            left: 0
        };
        if (document.body && hasRelativePosition(positionCache)) {
            var documentRect = document.documentElement.getBoundingClientRect();
            var bodyRect = document.body.getBoundingClientRect();
            var docTop = document.documentElement.offsetTop;
            var docLeft = document.documentElement.offsetLeft;
            var topMesaure = bodyRect.top - documentRect.top + docTop;
            var leftMesaure = bodyRect.left - documentRect.left + docLeft;
            var bodyComputedStyle = window.getComputedStyle(document.body);
            var borderTopWidth = parseFloat(bodyComputedStyle["border-top-width"]) || 0;
            var borderLeftWidth = parseFloat(bodyComputedStyle["border-left-width"]) || 0;
            result = {
                top: topMesaure + borderTopWidth,
                left: leftMesaure + borderLeftWidth
            };
        }
        return result;
    };
    var getScrollPosition = function(t) {
        var isCompatMode = t === window.document.body && "BackCompat" === window.document.compatMode;
        var top = isCompatMode ? 0 : t.scrollTop;
        var left = isCompatMode ? 0 : t.scrollLeft;
        return {
            top: top,
            left: left
        };
    };
    var findHighestZIndex = function(ShouldQueryAll) {
        var highestZIndex = 1;
        document.querySelectorAll("body *").forEach(function(e) {
            if ($gingerWidgetJquery(e).css("position") !== "static" && (!ShouldQueryAll ? !/ginger-/.test(e.className) : true)) {
                var elementZIndex = parseInt($gingerWidgetJquery(e).css("z-index"));
                elementZIndex = isNaN(elementZIndex) ? 1 : elementZIndex;
                highestZIndex = Math.max(elementZIndex, highestZIndex);
            }
        });
        return highestZIndex;
    };
    return {
        getPaddingBox: getPaddingBox,
        getScrollPosition: getScrollPosition,
        getElementScroll: getElementScroll,
        getDocumentScroll: getDocumentScroll,
        getDocumentGap: getDocumentGap,
        getScaleRatio: getScaleRatio,
        findHighestZIndex: findHighestZIndex
    };
}, [ "widget.session", "widget.config" ]);

(function() {
    var module = gingerModule.load("widget.mutationDetectorService", function(config) {
        var hasOverflow = function(node) {
            if (node.tagName === "IFRAME") {
                node = node.contentWindow.document.body;
                var isBodyHeightFixed = false;
                var cssRulesOfBody = node.ownerDocument.defaultView.getMatchedCSSRules(node, "");
                if (cssRulesOfBody && $gingerWidgetJquery.isArray(cssRulesOfBody)) {
                    for (var i = 0; i < cssRulesOfBody.length; i++) {
                        if (cssRulesOfBody[i].style.height) {
                            isBodyHeightFixed = true;
                        }
                    }
                }
                if (isBodyHeightFixed) return {
                    vertical: node.clientHeight + config.scrollbarWidth < node.scrollHeight,
                    horizontal: node.clientWidth < node.scrollWidth
                }; else return {
                    vertical: node.clientHeight + config.scrollbarWidth > node.scrollHeight,
                    horizontal: node.clientWidth < node.scrollWidth
                };
            } else {
                return {
                    vertical: node.clientHeight < node.scrollHeight,
                    horizontal: node.clientWidth < node.scrollWidth
                };
            }
        };
        var handleSpecialExceptions = function(node) {
            var mod = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: node
            }, $node = $gingerWidgetJquery(node);
            var isThisGmailComposer = $node.hasClass("LW-avf");
            if (isThisGmailComposer) {
                try {
                    mod.node = $node.closest("table").closest("td").get(0);
                    var $firstChild = $gingerWidgetJquery(node.firstElementChild || node.firstChild);
                    if ($firstChild.length > 0) {
                        var computerStyles = getComputedStyle($firstChild.get(0));
                        if (computerStyles) mod.direction = computerStyles.direction;
                    }
                } catch (e) {}
            }
            return mod;
        };
        var getLayout = function(node) {
            if (!node) return;
            var mod = {
                height: 0,
                width: 0,
                top: 0,
                left: 0,
                node: node
            };
            var offset = $gingerWidgetJquery(mod.node).offset();
            var overflow = hasOverflow(mod.node);
            return {
                height: $gingerWidgetJquery(mod.node).outerHeight() + mod.height,
                width: $gingerWidgetJquery(mod.node).outerWidth() + mod.width,
                direction: mod.direction || $gingerWidgetJquery(mod.node).css("direction"),
                top: (offset ? offset.top : 0) + mod.top,
                left: (offset ? offset.left : 0) + mod.left,
                hasVerticalScrollbar: overflow.vertical || $gingerWidgetJquery(mod.node).css("overflow") == "scroll" || $gingerWidgetJquery(mod.node).css("overflow-y") == "scroll" ? true : false,
                scrollTop: $gingerWidgetJquery(mod.node).scrollTop(),
                scrollLeft: $gingerWidgetJquery(mod.node).scrollLeft(),
                hasHorizontalScrollbar: overflow.horizontal || $gingerWidgetJquery(mod.node).css("overflow") == "scroll" || $gingerWidgetJquery(mod.node).css("overflow-x") == "scroll" ? true : false,
                isVisible: $gingerWidgetJquery(node).is(":visible"),
                fontSize: $gingerWidgetJquery(mod.node).css("font-size")
            };
        };
        var compareLayouts = function(layout_new, layout_old) {
            if (!layout_old) {
                return true;
            }
            for (var key in layout_new) {
                if (layout_new[key] !== layout_old[key]) {
                    return true;
                }
            }
            return false;
        };
        return {
            compareLayouts: compareLayouts,
            getLayout: getLayout
        };
    }, []);
})();

(function() {
    var module = gingerModule.load("widget.onlinestatus", function() {
        var eventScope = $gingerWidgetJquery({});
        var online = true;
        var init = function() {
            window.addEventListener("online", function(e) {
                if (!online) {
                    eventScope.trigger("online");
                }
                online = true;
            });
            window.addEventListener("offline", function(e) {
                if (online) {
                    eventScope.trigger("offline");
                }
                online = false;
            });
            online = !!window.navigator.onLine;
        };
        var isOnline = function() {
            return online;
        };
        init();
        return {
            listen: eventScope,
            isOnline: isOnline
        };
    }, [ "widget.report" ]);
})();

(function() {
    var module = gingerModule.load("widget.phraseService", function() {
        var sentenceSplitter = /[\x1F]*[\s]*(([^.^!^?^\n^\x1F]|[.!?]+(?=\S)|(?=\x1F))+)([.!?\x1F]+(\n*(?=$))?|.*(?=[\n])|$|(?=\x1F))/gi;
        var nonCharacterBreakCount = /[^\x1F]+/g;
        var nonCharacterBreakRemoval = /\x1F/g;
        var sentenceIgnoreCharacter = /\x1C/g;
        var licenseStatus = gingerModule.get("widget.config").get("licenseStatus");
        var getSentences = function(phrase) {
            if (!phrase) return [];
            var trimmed = gingerModule.get("widget.utils").trimAndMatch(phrase);
            var sentenceSplit = trimmed.text.match(sentenceSplitter);
            if (!sentenceSplit) return [];
            sentenceSplit[0] = trimmed.pre + sentenceSplit[0];
            sentenceSplit[sentenceSplit.length - 1] = sentenceSplit[sentenceSplit.length - 1] + trimmed.post;
            var sentences = [];
            var sentenceOffset = 0;
            for (var i = 0; i < sentenceSplit.length; i++) {
                var preLineBreakCountMatch = sentenceSplit[i].match(/^[\x1F]+/);
                var postLineBreakCountMatch = sentenceSplit[i].match(/[\x1F]+$/);
                var preLineBreakCount = preLineBreakCountMatch ? preLineBreakCountMatch.toString().replace(nonCharacterBreakCount, "").length : 0;
                var postLineBreakCount = postLineBreakCountMatch ? postLineBreakCountMatch.toString().replace(nonCharacterBreakCount, "").length : 0;
                sentenceSplit[i] = sentenceSplit[i].replace(nonCharacterBreakRemoval, "");
                var startsAt = sentenceOffset;
                var endsAt = startsAt + sentenceSplit[i].length;
                var isIgnored = false;
                if (sentenceIgnoreCharacter.test(sentenceSplit[i])) {
                    sentenceSplit[i] = sentenceSplit[i].replace(sentenceIgnoreCharacter, "");
                    isIgnored = true;
                }
                var sentence = {
                    text: sentenceSplit[i],
                    startsAt: startsAt,
                    endsAt: endsAt,
                    activeSentence: false,
                    id: gingerModule.get("widget.utils").generateUID(),
                    preLineBreakCount: preLineBreakCount,
                    postLineBreakCount: postLineBreakCount
                };
                if (isIgnored) sentence.ignored = true;
                sentence.words = getWordsOfSentence(sentence);
                sentences.push(sentence);
                sentenceOffset += sentenceSplit[i].length;
            }
            return sentences;
        };
        var getActiveSentence = function(input, sentences) {
            if (document.activeElement !== input && !gingerModule.get("widget.utils").isGoogleDocs()) {
                return null;
            }
            if (!sentences) sentences = getSentences($gingerWidgetJquery(input).val());
            try {
                var caretPosition = gingerModule.get("widget.caret").get(input);
            } catch (e) {
                return null;
            }
            for (var i = 0; i < sentences.length; i++) {
                if (sentences[i].startsAt <= caretPosition && sentences[i].endsAt >= caretPosition) {
                    return i;
                }
            }
            return null;
        };
        var getSentenceFragments = function(sentence, from, to) {
            var fragments = [];
            if (!from) from = 0;
            if (typeof to === "undefined") to = sentence.text.length;
            var corrections = sentence.correction.Corrections;
            var fragmentOffset = 0;
            for (var i = 0; i < corrections.length; i++) {
                if (from <= corrections[i].From && to >= corrections[i].To) {
                    var fragmentBeforeMistakeFrom = from >= fragmentOffset ? from : fragmentOffset;
                    var fragmentBeforeMistakeTo = from >= fragmentOffset ? from : fragmentOffset;
                    var fragmentBeforeMistake = sentence.text.substring(fragmentBeforeMistakeFrom, corrections[i].From);
                    var fragmentOfMistake = sentence.text.substring(corrections[i].From, corrections[i].To + 1);
                    fragments.push({
                        text: fragmentBeforeMistake
                    });
                    fragments.push({
                        text: fragmentOfMistake,
                        correction: corrections[i]
                    });
                }
                fragmentOffset = corrections[i].To + 1;
            }
            if (corrections[corrections.length - 1].To + 1 <= to) {
                var fragmentAfterLastMistake = sentence.text.substring(corrections[corrections.length - 1].To + 1, to + 1);
                fragments.push({
                    text: fragmentAfterLastMistake
                });
            }
            return fragments;
        };
        var getWordsOfSentence = function(sentence) {
            if (sentence.text.match(/^\s+$/)) return [];
            var wordSplit = sentence.text.match(/(^\s+)?\S+(\s*[.?!])?(\s+|$)/g);
            if (!wordSplit) return [];
            var words = [];
            for (var i = 0; i < wordSplit.length; i++) {
                var startsAt = i == 0 ? sentence.startsAt : sentence.startsAt + wordSplit.slice(0, i).join("").length;
                var endsAt = startsAt + wordSplit[i].length;
                var word = {
                    text: wordSplit[i],
                    startsAt: startsAt,
                    endsAt: endsAt
                };
                words.push(word);
            }
            return words;
        };
        var handleCharLimit = function(sentences) {
            var charLimit = gingerModule.get("widget.config").get("charLimit");
            var isPremium = gingerModule.get("widget.session").get("license") === licenseStatus.premium;
            var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs();
            if (charLimit && charLimit > 0 && sentences && sentences.length && sentences[sentences.length - 1].endsAt > charLimit) {
                for (var i = 0; i < sentences.length; i++) {
                    if (sentences[i].endsAt > charLimit && !(isPremium && isGoogleDocs)) {
                        sentences[i].charLimited = true;
                    } else {
                        sentences[i].charLimited = false;
                    }
                }
            }
        };
        var getRepresentation = function(input) {
            var val = gingerModule.get("widget.contentManager").getVal(input);
            var sentences = getSentences(val);
            var activeSentence = getActiveSentence(input, sentences);
            handleCharLimit(sentences);
            if (activeSentence !== null) sentences[activeSentence].activeSentence = true;
            return sentences;
        };
        return {
            getSentences: getSentences,
            getActiveSentence: getActiveSentence,
            getRepresentation: getRepresentation,
            getSentenceFragments: getSentenceFragments,
            getWordsOfSentence: getWordsOfSentence
        };
    }, [ "widget.contentManager", "widget.caret", "widget.utils" ]);
})();

(function() {
    var module = gingerModule.load("widget.preFlightProbe", function() {
        var disabled = false;
        var reactRTETest = function(area) {
            var deferred = $gingerWidgetJquery.Deferred();
            var reactRootParent = $gingerWidgetJquery(area).closest("[data-reactroot], [data-reactid]");
            if (reactRootParent.length) {
                deferred.reject("reactRTETest failed");
            } else {
                deferred.resolve();
            }
            return deferred.promise();
        };
        var injectionTest = function(area) {
            var deferred = $gingerWidgetJquery.Deferred();
            var textNodesWithinArea = $gingerWidgetJquery(area).contents().filter(function() {
                return this.nodeType == Node.TEXT_NODE;
            });
            var injectFakeHighlightInto = area;
            if (textNodesWithinArea.length) {
                injectFakeHighlightInto = textNodesWithinArea[0].parentNode;
            } else if ($gingerWidgetJquery(area).find("p").length) {
                injectFakeHighlightInto = $gingerWidgetJquery(area).find("p").eq(0);
            } else if ($gingerWidgetJquery(area).find("br").length) {
                injectFakeHighlightInto = $gingerWidgetJquery(area).find("br").eq(0).parent();
            }
            $gingerWidgetJquery("<gwmw style='display:none;'></gwmw>").appendTo(injectFakeHighlightInto);
            var prEvent = document.createEvent("CustomEvent");
            prEvent.initCustomEvent("input", true, true, null);
            area.dispatchEvent(prEvent);
            setTimeout(function() {
                var fhlights = $gingerWidgetJquery(area).find("gwmw");
                if (fhlights.length) {
                    deferred.resolve();
                } else {
                    deferred.reject("injectionTest failed");
                }
                fhlights.remove();
            }, 50);
            return deferred.promise();
        };
        var run = function(area) {
            var editorConfig = gingerModule.get("widget.siteSettings").get(window.location.href, area);
            var attr = $gingerWidgetJquery(area).attr("contenteditable");
            if (area && area.hasAttribute("contenteditable")) {
                return injectionTest(area).then(function() {
                    return reactRTETest(area);
                }).catch(function(error) {
                    throw error;
                });
            } else {
                var deferred = $gingerWidgetJquery.Deferred();
                deferred.resolve();
                return deferred.promise();
            }
        };
        return {
            run: run,
            disable: function(isDisabled) {
                disabled = isDisabled;
            }
        };
    }, [ "widget.utils", "widget.report" ]);
})();

(function() {
    var module = gingerModule.load("widget.report", function() {
        var eventScope = $gingerWidgetJquery({});
        var reporterGA4 = gingerModule.get("widget.backgroundConnector").proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporterGA4"
        });
        return {
            reporterGA4: reporterGA4
        };
    }, [ "widget.correctionBubble", "widget.config", "widget.correctionService" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.common", function() {
        var executeTimeout = 10;
        var executeTimeoutRef = null;
        var executeQueue = [];
        var executeInQueue = function(fnToRun) {
            if (fnToRun) executeQueue.push(fnToRun);
            var isQueueBeingProcessed = !!executeTimeoutRef;
            if (isQueueBeingProcessed) {
                return;
            }
            var queueItem = executeQueue.shift();
            queueItem();
            if (executeQueue.length) {
                executeTimeoutRef = setTimeout(executeInQueue, executeTimeout);
            } else {
                executeTimeoutRef = null;
            }
            return queueItem;
        };
        var findElementUntil = function(selector, fromElement, tillElement) {
            var closestParent = $gingerWidgetJquery(fromElement).closest(selector);
            if ($gingerWidgetJquery(closestParent).find(tillElement)) {
                return closestParent;
            } else {
                return null;
            }
        };
        var getTextNodesUnder = function(el) {
            var n, a = [], walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            while (n = walk.nextNode()) {
                a.push(n);
            }
            return a;
        };
        var selectText = function(element) {
            var doc = document;
            var text = element;
            var range, selection;
            if (doc.body.createTextRange) {
                range = document.body.createTextRange();
                range.moveToElementText(text);
                range.select();
            } else if (window.getSelection) {
                selection = window.getSelection();
                range = document.createRange();
                range.selectNodeContents(text);
                selection.removeAllRanges();
                selection.addRange(range);
            }
            return range;
        };
        var contentEditableReplacer = function(element, value, from, to, blockSelector, replaceCb) {
            $gingerWidgetJquery(element).focus();
            var textNodes = getTextNodesUnder(element);
            if (!textNodes.length) {
                var tn;
                tn = element.appendChild(document.createTextNode(""));
                replaceCb(element, tn, value);
                return;
            }
            var nodeOffsets = gingerModule.get("widget.utils").getNodeOffsetOfIndex(element, from, to);
            var isInReplacingMode = false;
            for (var tni = 0; tni < textNodes.length; tni++) {
                var fragment = textNodes[tni].nodeValue;
                var isStartNode = textNodes[tni] == nodeOffsets.startNode;
                var isEndNode = textNodes[tni] == nodeOffsets.endNode;
                if (isStartNode) {
                    isInReplacingMode = true;
                }
                if (isInReplacingMode) {
                    if (isStartNode && isEndNode) {
                        replaceCb(element, textNodes[tni], fragment.substring(0, nodeOffsets.startNodeOffset) + value + fragment.substring(nodeOffsets.endNodeOffset));
                    } else if (isStartNode) {
                        replaceCb(element, textNodes[tni], fragment.substring(0, nodeOffsets.startNodeOffset) + value);
                    } else if (isEndNode) {
                        replaceCb(element, textNodes[tni], fragment.substring(nodeOffsets.endNodeOffset));
                    } else {
                        replaceCb(element, textNodes[tni], "");
                    }
                }
                if (isEndNode) {
                    break;
                }
            }
            return;
        };
        return {
            executeInQueue: executeInQueue,
            selectText: selectText,
            contentEditableReplacer: contentEditableReplacer
        };
    });
})();

(function() {
    var module = gingerModule.load("widget.rewriters.contentEditable", function() {
        var rewrite = function(element, value, from, to) {
            var blockSelector = "p,h1, h2, h3, h4, h5, h6,li,pre,address,blockquote,dl,div";
            if (document.activeElement !== element) element.focus();
            gingerModule.get("widget.selectionManager").saveSelection(element);
            var textNodeReplacer = function(area, node, value) {
                $gingerWidgetJquery(node).replaceWith(value);
            };
            var walker = gingerModule.get("widget.rewriters.common").contentEditableReplacer(element, value, from, to, blockSelector, textNodeReplacer);
            gingerModule.get("widget.selectionManager").restoreSelection(element);
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.draft.ce", function() {
        return gingerModule.get("widget.rewriters.facebook.ce");
    }, [ "widget.rewriters.common", "widget.rewriters.facebook.ce" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.draft.textarea", function() {
        var rewrite = function(element, value, from, to) {
            var deferred = $gingerWidgetJquery.Deferred();
            var textarea = $gingerWidgetJquery(element);
            textarea.get(0).select();
            var len = textarea.val().length;
            var sentence = textarea.val().substring(from, to);
            var newValue = textarea.val().substring(0, from) + value + textarea.val().substring(to, len);
            textarea.val(newValue);
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var evenChange = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        prop: "value",
                        value: newValue
                    }
                });
                document.dispatchEvent(evenChange);
            });
            gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                var evenChange = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onChange",
                        params: {
                            target: {
                                value: newValue
                            }
                        }
                    }
                });
                document.dispatchEvent(evenChange);
                deferred.resolve();
            });
            return deferred.promise();
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.facebook.ce", function() {
        var eventRegister = {};
        var rewrite = function(element, value, from, to) {
            var blockSelector = "[data-block='true']";
            var textNodeReplacer = function(area, node, value) {
                var elem = document.activeElement;
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onFocus"
                        }
                    });
                    document.dispatchEvent(event);
                    var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(node);
                    document.dispatchEvent(event);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!value) {
                        var eventKeyDown = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(eventKeyDown);
                    } else {
                        var eventPaste = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: value
                        });
                        document.dispatchEvent(eventPaste);
                    }
                });
            };
            gingerModule.get("widget.rewriters.common").contentEditableReplacer(element, value, from, to, blockSelector, textNodeReplacer);
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.gdocs", function() {
        const MOUSE_EVENT_DETAIL = 99;
        const SCROLL_CONTAINER_SELECTOR = "div.kix-appview-editor-container > div.kix-appview-editor";
        const RECT_ELEMENTS_SELECTOR = "div.kix-canvas-tile-content:not(.kix-canvas-tile-selection) g rect";
        const GINGER_OVERLAY_SELECTOR = ".ginger-container-body";
        const DOCS_IFRAME_SELECTOR = ".docs-texteventtarget-iframe";
        const DOCS_INPUT_CONTAINER_SELECTOR = "div.kix-canvas-tile-content";
        let mousemoveCapture = null;
        const shiftKeyEvent = {
            shiftKey: true,
            key: "Shift",
            code: "ShiftLeft",
            keyCode: 16,
            charCode: 0,
            which: 16,
            location: 1
        };
        function getTargetElement(event) {
            if (typeof event.composedPath === "function") {
                const composedPath = event.composedPath();
                if (composedPath[0]) {
                    return composedPath[0];
                }
            }
            return event.target;
        }
        function addGlobalEventListener(target, eventType, callback) {
            const documentContext = isDocument(target) ? target : target.ownerDocument;
            const eventHandler = event => {
                const targetElement = getTargetElement(event);
                if ((isElementNode(targetElement) || isTextNode(targetElement)) && target.contains(targetElement)) {
                    callback(event);
                }
            };
            documentContext.defaultView.addEventListener(eventType, eventHandler, true);
            return {
                destroy() {
                    documentContext.defaultView.removeEventListener(eventType, eventHandler, true);
                }
            };
        }
        function isDocument(node) {
            return node.nodeType === Node.DOCUMENT_NODE;
        }
        function isElementNode(node) {
            return node.nodeType === Node.ELEMENT_NODE;
        }
        function isTextNode(node) {
            return node.nodeType === Node.TEXT_NODE;
        }
        function getDocsIframe() {
            const docsIframe = document.querySelector(DOCS_IFRAME_SELECTOR);
            return docsIframe && docsIframe.contentWindow || null;
        }
        function getScrollContainer() {
            var inputArea = document.querySelector(DOCS_INPUT_CONTAINER_SELECTOR);
            return inputArea.closest(SCROLL_CONTAINER_SELECTOR);
        }
        function getCurrentRects(rects, target) {
            let rectCords = rects.map(rect => {
                let cords = rect.getBoundingClientRect();
                return {
                    cords: cords,
                    rect: rect
                };
            });
            let result;
            for (let i = 0; i < rectCords.length; i++) {
                const element = rectCords[i]?.cords;
                const nextElement = rectCords[i + 1]?.cords;
                if (Math.round(element.left) <= target.x && target.x <= Math.round(element.left) + Math.round(element.width) && Math.round(element.top) <= target.y + target.height / 2 && target.y + target.height / 2 <= Math.round(nextElement?.top > element.top + element.height ? nextElement.top : element.bottom)) {
                    result = rectCords[i];
                }
            }
            return result;
        }
        function localTimeout(e = 25, t = null) {
            return new Promise(n => setTimeout(() => n(t), e));
        }
        function _selectFromRightToLeft(firstBox, lastBox, iframeWindow, firstBoxParentNode, lastBoxParentNode, editableContainer) {
            const sourceMouseEvent = {
                clientX: Math.round(lastBox.x),
                clientY: Math.round(lastBox.y + lastBox.height / 2),
                bubbles: true,
                shftKey: false,
                detail: MOUSE_EVENT_DETAIL
            };
            const targetMouseEvent = {
                clientX: Math.round(firstBox.x),
                clientY: Math.round(firstBox.y + lastBox.height / 2),
                bubbles: true,
                shftKey: true,
                detail: MOUSE_EVENT_DETAIL
            };
            return lastBoxParentNode.dispatchEvent(new MouseEvent("mousemove", sourceMouseEvent)), 
            localTimeout(50).then(() => {
                try {
                    lastBoxParentNode.dispatchEvent(new MouseEvent("mousedown", sourceMouseEvent));
                    firstBoxParentNode.dispatchEvent(new MouseEvent("mousemove", targetMouseEvent));
                    editableContainer.dispatchEvent(new iframeWindow.KeyboardEvent("keydown", shiftKeyEvent));
                    firstBoxParentNode.dispatchEvent(new MouseEvent("mouseup", targetMouseEvent));
                    editableContainer.dispatchEvent(new iframeWindow.KeyboardEvent("keyup", shiftKeyEvent));
                    return Promise.resolve();
                } catch (e) {
                    return Promise.reject();
                }
            });
        }
        function _selectFromLeftToRight(firstBox, lastBox, iframeWindow, firstBoxParentNode, lastBoxParentNode, editableContainer) {
            const sourceMouseEvent = {
                clientX: Math.round(firstBox.x),
                clientY: Math.round(firstBox.y + firstBox.height / 2),
                bubbles: true,
                shftKey: false,
                detail: MOUSE_EVENT_DETAIL
            };
            const targetMouseEvent = {
                clientX: Math.round(lastBox.x),
                clientY: Math.round(lastBox.y + firstBox.height / 2),
                bubbles: true,
                shftKey: true,
                detail: MOUSE_EVENT_DETAIL
            };
            return firstBoxParentNode.dispatchEvent(new MouseEvent("mousemove", sourceMouseEvent)), 
            localTimeout(50).then(() => {
                try {
                    firstBoxParentNode.dispatchEvent(new MouseEvent("mousedown", sourceMouseEvent));
                    lastBoxParentNode.dispatchEvent(new MouseEvent("mousemove", targetMouseEvent));
                    editableContainer.dispatchEvent(new iframeWindow.KeyboardEvent("keydown", shiftKeyEvent));
                    lastBoxParentNode.dispatchEvent(new MouseEvent("mouseup", targetMouseEvent));
                    editableContainer.dispatchEvent(new iframeWindow.KeyboardEvent("keyup", shiftKeyEvent));
                    return Promise.resolve();
                } catch (e) {
                    return Promise.reject();
                }
            });
        }
        function lockMousemove() {
            mousemoveCapture || (mousemoveCapture = (0, addGlobalEventListener)(document, "mousemove", e => e.stopImmediatePropagation()));
        }
        function unlockMousemove() {
            mousemoveCapture && (mousemoveCapture.destroy(), mousemoveCapture = null);
        }
        var rewrite = function(value, replacementCoordinates, fromRephrase) {
            const scrollContainer = getScrollContainer();
            if (!scrollContainer) {
                console.log("No scroll container");
            }
            const docsIframe = getDocsIframe();
            if (!docsIframe) {
                console.log("No scroll iframe");
            }
            const iframeEditableField = docsIframe.document.querySelector("[contenteditable=true]");
            if (!iframeEditableField) {
                console.log("No scroll editable field in iframe");
            }
            if (fromRephrase) {
                lockMousemove();
                return localTimeout(50).then(() => {
                    let pasteEvent;
                    try {
                        pasteEvent = new docsIframe.ClipboardEvent("paste", {
                            clipboardData: new docsIframe.DataTransfer(),
                            bubbles: true
                        });
                        pasteEvent.clipboardData.setData("text/plain", value);
                    } catch (e) {
                        pasteEvent = new docsIframe.ClipboardEvent("paste", {
                            bubbles: !0
                        });
                    }
                    iframeEditableField.dispatchEvent(pasteEvent);
                    iframeEditableField.textContent = value;
                    return Promise.resolve();
                }).catch(e => {
                    console.log("SOME ERR", e);
                }).finally(() => unlockMousemove());
            }
            var rectElements = document.querySelectorAll(RECT_ELEMENTS_SELECTOR);
            const inputField = document.querySelector(GINGER_OVERLAY_SELECTOR).getBoundingClientRect();
            if (!inputField) {
                console.log("No inputField");
            }
            if (!fromRephrase) {
                var firstBox = {
                    x: Math.round(replacementCoordinates.startX + inputField.x),
                    y: Math.round(replacementCoordinates.startY + inputField.y),
                    height: Math.round(replacementCoordinates.startHeight)
                };
                var lastBox = {
                    x: Math.round(replacementCoordinates.endX + inputField.x),
                    y: Math.round(replacementCoordinates.endY + inputField.y),
                    height: Math.round(replacementCoordinates.endHeight)
                };
            }
            let startRect = getCurrentRects(Array.from(rectElements), firstBox);
            let endRect = getCurrentRects(Array.from(rectElements), lastBox);
            if (!startRect) {
                startRect = endRect;
                console.log("No startRect");
            }
            if (!endRect) {
                endRect = startRect;
                console.log("No endRect");
            }
            let startRectParentEl = startRect?.rect?.parentElement;
            let endRectParentEl = endRect?.rect?.parentElement;
            if (!startRectParentEl) {
                startRectParentEl = endRectParentEl;
                console.log("No startRectParentEl");
            }
            if (!endRectParentEl) {
                endRectParentEl = startRectParentEl;
                console.log("No endRectParentEl");
            }
            lockMousemove();
            return localTimeout(50).then(() => unlockMousemove()).then(() => _selectFromLeftToRight(firstBox, lastBox, getDocsIframe(), startRect.rect.parentElement, startRect.rect.parentElement, iframeEditableField).catch(() => _selectFromRightToLeft(firstBox, lastBox, getDocsIframe(), startRect.rect.parentElement, startRect.rect.parentElement, iframeEditableField))).then(() => {
                let pasteEvent;
                try {
                    pasteEvent = new docsIframe.ClipboardEvent("paste", {
                        clipboardData: new docsIframe.DataTransfer(),
                        bubbles: true
                    });
                    pasteEvent.clipboardData.setData("text/plain", value);
                } catch (e) {
                    pasteEvent = new docsIframe.ClipboardEvent("paste", {
                        bubbles: true
                    });
                }
                iframeEditableField.dispatchEvent(pasteEvent);
                iframeEditableField.textContent = value;
                return Promise.resolve();
            }).catch(e => {
                console.log(e);
            }).finally(() => unlockMousemove());
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.newReact.ce", function() {
        var getCrrarShift = function(originText, replaceIndex) {
            var shift = 0;
            try {
                if (!replaceIndex || !originText) return 0;
                var clonedIndex = replaceIndex;
                for (var i = 0; i < originText.length; i++) {
                    if (/\n/.test(originText[i]) && i <= clonedIndex) {
                        clonedIndex = clonedIndex + 1;
                    }
                }
                return clonedIndex;
            } catch (error) {
                return shift;
            }
        };
        var rewrite = function(element, value, from, to, fromRephrase) {
            var isTextArea = !!element.value;
            var originText = element.value ? element.value : element.innerText;
            var dataBlocks = element.querySelectorAll('[data-block="true"]');
            var offsetFrom = 0;
            if (dataBlocks && dataBlocks.length) {
                originText = "";
                for (var i = 0; i < dataBlocks.length; i++) {
                    if (originText.length < from) {
                        var matches = dataBlocks[i].innerText.match(/\n/g);
                        if (matches && matches.length) {
                            offsetFrom += matches.length - 1;
                        }
                    }
                    if (i !== 0) {
                        originText += "\n";
                    }
                    originText += dataBlocks[i].textContent;
                }
                if (fromRephrase) {
                    from = from - offsetFrom;
                    to = to - offsetFrom;
                } else {
                    var oldFrom = from;
                    from = getCrrarShift(originText, from);
                    to = from + (to - oldFrom);
                }
            }
            value = originText.slice(0, from) + value + originText.slice(to);
            var textNodeReplacer = function(node, value) {
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onFocus"
                        }
                    });
                    document.dispatchEvent(event);
                    var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                        detail: {
                            event: "onSelect"
                        }
                    });
                    gingerModule.get("widget.rewriters.common").selectText(node);
                    document.dispatchEvent(event);
                });
                gingerModule.get("widget.rewriters.common").executeInQueue(function() {
                    if (!value) {
                        var eventKeyDown = new CustomEvent("gingerModule-eventEmitter-onkeydown", {
                            detail: {
                                keyCode: 8,
                                which: 8,
                                charCode: 0,
                                type: "keydown"
                            }
                        });
                        document.dispatchEvent(eventKeyDown);
                    } else {
                        var eventPaste = new CustomEvent("gingerModule-eventEmitter-onpaste", {
                            detail: value
                        });
                        document.dispatchEvent(eventPaste);
                    }
                });
            };
            $gingerWidgetJquery(element).focus();
            textNodeReplacer(element, value);
            return new Promise(function(resolve, reject) {
                resolve(true);
            });
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.newFloating", function() {
        var eventRegister = {};
        var actionQueueTimeout = 20;
        var actionQueue = [];
        var actionGap = null;
        var actionQueueRunner = function() {
            if (!actionQueue.length) {
                return;
            }
            if (actionGap) {
                return;
            }
            var action = actionQueue.shift();
            action.action();
            actionGap = setTimeout(function() {
                actionGap = null;
                actionQueueRunner();
            }, action.timeout);
        };
        var runAction = function(fn, timeout) {
            if (!timeout) timeout = actionQueueTimeout;
            actionQueue.push({
                action: fn,
                timeout: timeout
            });
            actionQueueRunner();
        };
        function textNodesUnder(el) {
            var n, a = [], walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            while (n = walk.nextNode()) a.push(n);
            return a;
        }
        var getTextNodesWithReplacementValues = function(element, value, from, to) {
            var r = gingerModule.get("widget.utils").getNodeFragmentsOfIndex(element, from, to);
            r.forEach(function(e) {
                if (!e.node.nodeValue) e.node.nodeValue = "";
                var nv = e.node.nodeValue;
                var i = Math.min(nv.length, value.length);
                e.newtext = nv.substr(0, e.from) + value.substr(0, i) + nv.substr(e.to);
                e.replacement = value.substr(0, e.to - e.from);
                value = value.substr(e.to - e.from);
            });
            if (value && r[r.length - 1]) r[r.length - 1].replacement += value;
            return r;
        };
        var appendStylesForSelection = function(element) {
            try {
                if (!element || document.querySelector("#ginger-rewriter-selection")) {
                    return;
                }
                var cssRules = "[ginger-rewriter-selection]::selection {background: transparent!important} [ginger-rewriter-selection] *::selection {background: transparent!important}";
                var ghostStyles = document.createElement("style");
                ghostStyles.id = "ginger-rewriter-selection";
                ghostStyles.type = "text/css";
                ghostStyles.textContent = cssRules;
                document.getElementsByTagName("head")[0].appendChild(ghostStyles);
            } catch (e) {
                console.error("appendStylesForSelection Error: ", e);
            }
        };
        var rewrite = function(element, value, from, to, fromRephrase, isReactUsingApp = false) {
            appendStylesForSelection(element);
            try {
                $gingerWidgetJquery(element).attr("ginger-rewriter-selection", true);
            } catch (e) {
                console.error(e);
            }
            var deferred = $gingerWidgetJquery.Deferred();
            var origValue = value;
            var isStandardArea = !(isTinyMCE(element) || isGutenberg(element) || isTrixEditor(element) || isSlateEditor(element) || gingerModule.get("widget.utils").isCKEditor(element));
            if (isStandardArea) {
                runAction(function() {
                    simulateSelection(element);
                });
            }
            var r = getTextNodesWithReplacementValues(element, value, from, to);
            var replaceIndexOffset = 0;
            r.reverse();
            r.forEach(function(e, i) {
                if (!e) return;
                if (e.node.nodeValue === e.replacement) return;
                if (isStandardArea) {
                    runAction(function() {
                        try {
                            simulateSelection(e.node.parentNode);
                        } catch (e) {
                            actionQueue.length = 0;
                            return rewrite(element, value, from, to + replaceIndexOffset);
                        }
                    });
                }
                if (!(gingerModule.get("widget.utils").isCKEditor(element) && fromRephrase)) {
                    runAction(function() {
                        selectText(e.node, e.from, e.to);
                    });
                }
                if (!gingerModule.get("widget.utils").isCKEditor(element)) {
                    runAction(function() {
                        var t = new window.InputEvent("beforeinput", {
                            bubbles: !0,
                            cancelable: 1,
                            inputType: "insertText",
                            data: e.replacement
                        });
                        element.dispatchEvent(t);
                        replaceIndexOffset += e.replacement.length - (e.to - e.from);
                        if (isReactUsingApp) {
                            document.execCommand("insertHTML", !1, e.replacement);
                        } else {
                            try {
                                document.execCommand("insertText", !1, e.replacement);
                            } catch (e) {
                                console.error(e);
                            }
                        }
                    });
                } else {
                    runAction(function() {
                        const e = new DataTransfer();
                        e.setData("text/plain", value);
                        const i = new ClipboardEvent("paste", {
                            clipboardData: e,
                            target: element,
                            dataType: "text/plain",
                            data: value,
                            bubbles: !0,
                            cancelable: !0
                        });
                        element.dispatchEvent(i);
                    });
                }
            });
            if (r[0]) {
                runAction(function() {
                    var selection = window.getSelection();
                    selection.removeAllRanges();
                    if (element.contains(r[0].node)) {
                        var range = new Range();
                        var minPos = Math.min(r[0].from + r[0].replacement.length, r[0].node.nodeValue.length);
                        range.setStart(r[0].node, minPos);
                        range.collapse();
                        selection.addRange(range);
                    }
                });
            }
            runAction(function() {
                simulateChange(element);
            });
            runAction(function() {
                try {
                    $gingerWidgetJquery(element).removeAttr("ginger-rewriter-selection");
                } catch (e) {
                    console.error(e);
                }
                deferred.resolve();
            });
            return deferred.promise();
        };
        function replaceSelectedText(replacementText) {
            var sel, range;
            if (window.getSelection) {
                sel = window.getSelection();
                if (sel.rangeCount) {
                    range = sel.getRangeAt(0);
                    range.deleteContents();
                    range.insertNode(document.createTextNode(replacementText));
                }
            } else if (document.selection && document.selection.createRange) {
                range = document.selection.createRange();
                range.text = replacementText;
            }
        }
        function selectText(e, t, n) {
            t = Math.max(t, 0);
            n = Math.min(n, e.nodeValue.length);
            var s = window.getSelection();
            s.empty();
            var r = new Range();
            r.setStart(e, t), r.setEnd(e, n), s.addRange(r);
        }
        function isFormElement(t) {
            return isTextArea(t) || isTextInput(t);
        }
        function isTextArea(t) {
            return t instanceof HTMLTextAreaElement;
        }
        function isTextInput(t) {
            return t instanceof HTMLInputElement && ("text" === t.type || "search" === t.type);
        }
        function isTinyMCE(t) {
            return t.classList.contains("mce-content-body") || t.classList.contains("mceContentBody");
        }
        function isSlateEditor(t) {
            return t.hasAttribute("data-slate-editor");
        }
        function isProseMirror(t) {
            return t.classList.contains("ProseMirror");
        }
        function isGutenberg(t) {
            return t.classList.contains("editor-rich-text__editable") || t.classList.contains("block-editor-rich-text__editable");
        }
        function isTrixEditor(t) {
            return "trix-editor" === t.nodeName.toLowerCase();
        }
        function isReactArea(element) {
            var ce = element.getAttribute("contenteditable");
            return ce && $gingerWidgetJquery(element).find("[data-block='true']").length > 0 || ce && $gingerWidgetJquery(element).closest("[data-reactroot]").length;
        }
        function simulateSelection(e) {
            var t = window.getSelection();
            t.empty();
            var n = new Range();
            n.setStart(e, false);
            n.collapse();
            t.addRange(n);
            var s = new MouseEvent("mousedown", {
                bubbles: !0,
                cancelable: !1
            }), r = new MouseEvent("mouseup", {
                bubbles: !0,
                cancelable: !1
            });
            e.dispatchEvent(s);
            e.dispatchEvent(r);
        }
        function simulateChange(element) {
            var e = new Event("change", {
                bubbles: !0,
                cancelable: !1
            });
            element.dispatchEvent(e);
        }
        function simulateInput(element, data) {
            var t = new window.InputEvent("input", {
                bubbles: !0,
                cancelable: !1,
                inputType: "insertText",
                data: data
            });
            element.dispatchEvent(t);
        }
        function offsetInRawText(e, t) {
            t = Math.min(e.length, t);
            var n = -1;
            var ZWC = [ "​", "‌", "‍" ];
            for (var zwci = 0; zwci < ZWC.length; zwci++) {
                var t2 = ZWC[zwci];
                var s2 = e.indexOf(t2);
                -1 !== s2 && (n = -1 === n ? s2 : Math.min(n, s2));
            }
            if (-1 === n || t < n) return t;
            var s = n, r = n;
            do {
                if (ZWC.includes(e[s]) || r++, r > t) break;
                s++;
            } while (s < e.length);
            return s;
        }
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.plainTextContentEditable", function() {
        var rewrite = function(element, value, from, to) {
            var blockSelector = "div, p";
            var textNodeReplacer = function(area, node, value) {
                node.nodeValue = value;
            };
            var walker = gingerModule.get("widget.rewriters.common").contentEditableReplacer(element, value, from, to, blockSelector, textNodeReplacer);
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.textarea", function() {
        var rewrite = function(element, value, from, to) {
            var deferred = $gingerWidgetJquery.Deferred();
            var textarea = $gingerWidgetJquery(element);
            var len = textarea.val().length;
            var sentence = textarea.val().substring(from, to);
            var newValue = textarea.val().substring(0, from) + value + textarea.val().substring(to, len);
            textarea.val(newValue);
            deferred.resolve();
            return deferred.promise();
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.rewriters.whatsapp.ce", function() {
        var rewrite = function(element, value, from, to) {
            var textNodeReplacer = function(area, node, value) {
                node.nodeValue = value;
                var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onInput"
                    }
                });
                document.dispatchEvent(event);
                var event = new CustomEvent("gingerModule-eventEmitter-react-fire", {
                    detail: {
                        event: "onFocus"
                    }
                });
                document.dispatchEvent(event);
                $gingerWidgetJquery(area).focus();
            };
            var walker = gingerModule.get("widget.rewriters.common").contentEditableReplacer(element, value, from, to, null, textNodeReplacer);
        };
        return {
            rewrite: rewrite
        };
    }, [ "widget.rewriters.common" ]);
})();

(function() {
    var module = gingerModule.load("widget.selectionManager", function() {
        var saveSelection = function(element) {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(element);
            if (isRTE) {
                return saveSelectionInRTE(element);
            } else {
                return saveSelectionInTextarea(element);
            }
        };
        var saveSelectionInRTE = function(element) {
            $gingerWidgetJquery("gwcphb").remove();
            $gingerWidgetJquery("gwcphe").remove();
            var sel = window.getSelection();
            if (sel.rangeCount > 0) {
                var range = sel.getRangeAt(0);
                var cursorRangeBegin = range.cloneRange();
                cursorRangeBegin.collapse(true);
                var cursorPlaceHolderBegin = document.createElement("gwcphb");
                cursorRangeBegin.insertNode(cursorPlaceHolderBegin);
                cursorRangeBegin.detach();
                if (!range.collapsed) {
                    var cursorRangeEnd = range.cloneRange();
                    cursorRangeEnd.collapse();
                    var cursorPlaceHolderEnd = document.createElement("gwcphe");
                    cursorRangeEnd.insertNode(cursorPlaceHolderEnd);
                    cursorRangeEnd.detach();
                }
            }
            return null;
        };
        var saveSelectionInTextarea = function() {};
        var restoreSelection = function(element) {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(element);
            if (isRTE) {
                return restoreSelectionInRTE(element);
            } else {
                return restoreSelectionInTextarea(element);
            }
        };
        var restoreSelectionInRTE = function(element) {
            var startNode = element.querySelector("gwcphb");
            var endNode = element.querySelector("gwcphe");
            if (!startNode && !endNode) return null;
            var range = document.createRange();
            range.setStartAfter(startNode);
            if (endNode) {
                range.setEndAfter(endNode);
            } else {
                range.collapse(true);
            }
            if (startNode) startNode.parentNode.removeChild(startNode);
            if (endNode) endNode.parentNode.removeChild(endNode);
            range.commonAncestorContainer.normalize();
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            return range;
        };
        var restoreSelectionInTextarea = function() {};
        return {
            saveSelection: saveSelection,
            restoreSelection: restoreSelection
        };
    }, [ "widget.utils" ]);
})();

gingerModule.load("widget.session", function() {
    var eventScope = $gingerWidgetJquery("<eventScope>");
    var session = null;
    var isSessionsMerged = false;
    var licenseStatus = gingerModule.get("widget.config").get("licenseStatus");
    var get = function(prop) {
        return session && prop ? session[prop] : session;
    };
    var set = function(newsession) {
        var sessionChanged = JSON.stringify(session) !== JSON.stringify(newsession);
        session = newsession ? newsession : null;
        if (sessionChanged) {
            gingerModule.get("widget.backgroundConnector").callPromise({
                module: "gingerchromeext.background.correctionLimits",
                callFunction: "get"
            }).then(function(correctionLimits) {
                gingerModule.get("widget.config").set("charLimit", newsession.license === licenseStatus.premium ? correctionLimits.premium : correctionLimits.free);
                eventScope.trigger("change", newsession);
            }, function(error) {
                console.warn("chrome.session.set is not supported", error);
                eventScope.trigger("change", newsession);
            });
        }
    };
    var isLoggedIn = function() {
        return session && !session.isAnonym;
    };
    gingerModule.get("widget.backgroundConnector").call({
        module: "gingerchromeext.background.session",
        callFunction: "get"
    }, function(result) {
        if (result && !isSessionsMerged) {
            session = gingerModule.get("widget.utils").merge(session, result);
            isSessionsMerged = true;
        }
    });
    return {
        get: get,
        set: set,
        isLoggedIn: isLoggedIn,
        listen: eventScope
    };
});

(function() {
    var module = gingerModule.load("widget.siteSettings", function() {
        var shiftIcon = {
            x: 20,
            y: 30
        };
        var shiftRephraseIcon = {
            y: 15
        };
        var settings = {
            kdfieneakcjfaiglcfcgkidlkmlijjnh: {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "web.whatsapp.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    }
                },
                shiftIcon: {
                    x: 15,
                    y: 8
                },
                minifyIcon: true
            },
            "gingersoftware.com": {
                pages: {
                    "ginger-writer": {
                        disabled: true
                    }
                }
            },
            "twitter.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    }
                },
                isMiniRephrase: true,
                shiftIcon: shiftIcon
            },
            "notion.so": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                minifyIcon: true
            },
            "linkedin.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "/talent/job-posting": {
                        disabled: true
                    }
                },
                selectors: {
                    ".mentions-texteditor__contenteditable": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    },
                    ".ql-editor": {
                        minifyIcon: false
                    }
                },
                shiftIcon: {
                    x: 20,
                    y: 10
                },
                minifyIcon: true
            },
            "salesforce.com": {
                pages: {
                    "/messaging": {
                        postRewriteEvents: [ "input" ]
                    },
                    "layout=EmailTemplate": {
                        disabled: true
                    }
                }
            },
            "slack.com": {},
            "discussions.apple.com": {},
            "lightning.force.com": {
                pages: {
                    "/lightning": {
                        postRewriteEvents: [ "input" ]
                    }
                },
                shiftIcon: {
                    x: 0,
                    y: 100
                },
                shiftRephraseIcon: shiftRephraseIcon,
                injection: "injection/js/ckeditor_inject_script.min.js"
            },
            "facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating",
                            plainText: "widget.rewriters.draft.textarea"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    },
                    "/notes": {
                        disabled: true
                    }
                },
                injection: "injection/js/inject_script.min.js",
                isMiniRephrase: true,
                minifyIcon: true,
                shiftIcon: {
                    x: 10,
                    y: 7
                }
            },
            "app.hubspot.com": {
                pages: {
                    "/notes": {
                        disabled: true
                    }
                }
            },
            "messenger.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    }
                },
                minifyIcon: true
            },
            "work.fb.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "outlook.live.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                shiftRephraseIcon: shiftRephraseIcon
            },
            "outlook.office.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                shiftRephraseIcon: shiftRephraseIcon
            },
            "discord.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                shiftRephraseIcon: shiftRephraseIcon,
                minifyIcon: true
            },
            localhost: {
                pages: {
                    "/ginger-widget/quill-injector.html": {}
                },
                selectors: {
                    "[ginger-debug-ghostarea]": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    },
                    "[unittest-area]": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "business.facebook.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                }
            },
            "docs.google.com": {
                pages: {
                    "/document": {
                        rewriter: {
                            richText: "widget.rewriters.gdocs"
                        }
                    },
                    "/spreadsheets": {
                        disabled: true
                    }
                }
            },
            "instagram.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating",
                            plainText: "widget.rewriters.draft.textarea"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        },
                        isReactUsingApp: true
                    }
                },
                injection: "injection/js/inject_script.min.js",
                shiftIcon: shiftIcon
            },
            "mail.google.com": {
                selectors: {
                    "textarea[name=to]": {
                        disabled: true
                    },
                    "textarea[name=cc]": {
                        disabled: true
                    },
                    "textarea[name=bcc]": {
                        disabled: true
                    }
                }
            },
            "chat.openai.com": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                minifyIcon: true,
                shiftIcon: {
                    x: -40,
                    y: 10
                }
            },
            "web.telegram.org": {
                pages: {
                    "*": {
                        rewriter: {
                            richText: "widget.rewriters.newFloating"
                        },
                        highlighter: {
                            richText: "widget.highlighters.floating"
                        }
                    }
                },
                shiftIcon: {
                    x: 15,
                    y: 10
                },
                minifyIcon: true
            },
            "*": {
                selectors: {
                    "#advanced-search": {
                        disabled: true
                    },
                    ".cke_editable": {
                        postRewriteEvents: [ "input" ]
                    }
                }
            },
            "translate.google": {
                disabled: true,
                name: "Google Translate"
            },
            "evernote.com": {
                disabled: true,
                name: "Evernote"
            },
            "quora.com": {
                disabled: true,
                name: "Quora"
            },
            "canva.com": {
                disabled: true,
                name: "Canva"
            },
            "pinterest.com": {
                disabled: true,
                name: "Pinterest"
            },
            "drive.google.com": {
                disabled: true,
                name: "Google Drive"
            },
            "hootsuite.com": {
                disabled: true,
                name: "Hoot Suite"
            },
            "onedrive.live.com": {
                disabled: true,
                name: "OneDrive"
            },
            "texteditor.nsspot.net": {
                disabled: true,
                name: "Text Editor for Google Drive"
            },
            "jsbin.com": {
                disabled: true,
                name: "JSBin"
            },
            "jsfiddle.net": {
                disabled: true,
                name: "JsFiddle"
            },
            "imperavi.com": {
                disabled: true,
                name: "Imperavi"
            },
            "miro.com": {
                disabled: true,
                name: "Miro"
            },
            "app.diagrams.net": {
                disabled: true,
                name: "App Diagrams"
            },
            "qualtrix.com": {
                isMiniRephrase: true
            }
        };
        var getLocation = function(href) {
            var match = href.match(/^([^:]+\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);
            return match && {
                href: href,
                protocol: match[1],
                host: match[2],
                hostname: match[3].replace(/^www\./, ""),
                port: match[4],
                pathname: match[5],
                search: match[6],
                hash: match[7]
            };
        };
        var isPossiblyReactArea = function(element) {
            var reactRootParent = $gingerWidgetJquery(element).closest("[data-reactroot]");
            if (reactRootParent.length) {
                return true;
            }
            return false;
        };
        var endsWith = function(str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        };
        var get = function(url, area) {
            if (!url && !area) {
                return settings;
            }
            if (!url) url = window.location.href;
            var parsedLocation = getLocation(url);
            var areaSettings = {
                rewriter: {
                    richText: "widget.rewriters.newFloating",
                    plainText: "widget.rewriters.textarea"
                },
                highlighter: {
                    richText: "widget.highlighters.floating",
                    plainText: "widget.highlighters.ghost"
                }
            };
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(area);
            var isReactArea = isPossiblyReactArea(area);
            if (parsedLocation && !/about:blank/i.test(url)) {
                for (var hostname in settings) {
                    if (hostname === "*" || endsWith(parsedLocation.hostname, hostname)) {
                        if (settings[hostname].disabled) {
                            return $gingerWidgetJquery.extend(settings[hostname], {
                                domainDisabled: true
                            });
                        }
                        if (settings[hostname].injection) {
                            $gingerWidgetJquery.extend(areaSettings, {
                                injection: settings[hostname].injection
                            });
                        }
                        if (typeof settings[hostname].isMiniRephrase !== "undefined") {
                            $gingerWidgetJquery.extend(areaSettings, {
                                isMiniRephrase: settings[hostname].isMiniRephrase
                            });
                        }
                        if (typeof settings[hostname].shiftIcon !== "undefined") {
                            $gingerWidgetJquery.extend(areaSettings, {
                                shiftIcon: settings[hostname].shiftIcon
                            });
                        }
                        if (typeof settings[hostname].shiftRephraseIcon !== "undefined") {
                            $gingerWidgetJquery.extend(areaSettings, {
                                shiftRephraseIcon: settings[hostname].shiftRephraseIcon
                            });
                        }
                        if (typeof settings[hostname].minifyIcon !== "undefined") {
                            $gingerWidgetJquery.extend(areaSettings, {
                                minifyIcon: settings[hostname].minifyIcon
                            });
                        }
                        if (settings[hostname].pages) {
                            for (var page in settings[hostname].pages) {
                                if (page === "*" || parsedLocation.href.indexOf(page) >= 0) {
                                    $gingerWidgetJquery.extend(true, areaSettings, settings[hostname].pages[page]);
                                }
                            }
                        }
                        if (area && settings[hostname].selectors) {
                            for (var selector in settings[hostname].selectors) {
                                if ($gingerWidgetJquery(area).is(selector)) {
                                    $gingerWidgetJquery.extend(true, areaSettings, settings[hostname].selectors[selector]);
                                }
                            }
                        }
                    }
                }
            }
            if (isReactArea) {
                if (isRTE) {
                    areaSettings.highlighter.richText = "widget.highlighters.floating";
                } else {
                    areaSettings.rewriter.plainText = "widget.rewriters.draft.textarea";
                    areaSettings.highlighter.plainText = "widget.highlighters.ghost";
                }
                if (!areaSettings.injection) areaSettings.injection = "injection/js/inject_script.min.js";
            }
            var result = areaSettings;
            if (isRTE) {
                result.highlighter = areaSettings.highlighter.richText;
                result.rewriter = areaSettings.rewriter.richText;
            } else {
                result.highlighter = areaSettings.highlighter.plainText;
                result.rewriter = areaSettings.rewriter.plainText;
            }
            return areaSettings;
        };
        return {
            get: get
        };
    }, []);
})();

gingerModule.load("widget.storage", function() {
    var eventScope = $gingerWidgetJquery("<eventScope>");
    var init = function() {
        gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(changes, namespace) {
            eventScope.trigger("change", changes, namespace);
        });
    };
    var set = function(key, value) {
        if (!key) return;
        var deferred = $gingerWidgetJquery.Deferred();
        var valueToSet = {};
        valueToSet[key] = value;
        try {
            gingerModule.get("gingerchromeext.browser").storage.sync.set(valueToSet, function() {
                deferred.resolve();
            });
        } catch (e) {
            console.warn("chrome.storage.sync.set is not supported", e);
            deferred.resolve();
        }
        return deferred.promise();
    };
    var get = function(key) {
        var deferred = $gingerWidgetJquery.Deferred();
        try {
            gingerModule.get("gingerchromeext.browser").storage.sync.get(key, function(result) {
                deferred.resolve(result[key]);
            });
        } catch (e) {
            console.warn("chrome.storage.sync.get is not supported", e);
            deferred.resolve();
        }
        return deferred.promise();
    };
    init();
    return {
        get: get,
        set: set,
        listen: eventScope
    };
}, []);

(function() {
    var module = gingerModule.load("widget.utils", function() {
        var generateUID = function() {
            var rnd = new Date().valueOf().toString() + Math.random().toString().substr(2, 10);
            return rnd;
        };
        var compareObjects = function(obj1, obj2) {
            return JSON.stringify(obj1) === JSON.stringify(obj2);
        };
        var getStyleOfObject = function(source) {
            var dom = source;
            var style;
            var returns = {};
            if (window.getComputedStyle) {
                var camelize = function(a, b) {
                    return b.toUpperCase();
                };
                style = window.getComputedStyle(dom, null);
                for (var i = 0, l = style.length; i < l; i++) {
                    var prop = style[i];
                    var camel = prop.replace(/\-([a-z])/g, camelize);
                    var val = style.getPropertyValue(prop);
                    returns[camel] = val;
                }
                return returns;
            }
            if (style = dom.currentStyle) {
                for (var prop in style) {
                    returns[prop] = style[prop];
                }
                return returns;
            }
            return source.css();
        };
        var isMouseEventOverElement = function(evt, elem) {
            elem = $gingerWidgetJquery(elem);
            var o = elem.offset();
            var w = elem.width();
            var h = elem.height();
            return evt.pageX >= o.left && evt.pageX <= o.left + w && evt.pageY >= o.top && evt.pageY <= o.top + h;
        };
        var isRichTextElement = function(element) {
            if (element && element.hasAttribute("contenteditable")) {
                return true;
            } else {
                return false;
            }
        };
        var merge = function(config, mergeConfig) {
            if (!config) config = {};
            for (var key in mergeConfig) {
                config[key] = mergeConfig[key];
            }
            return config;
        };
        var clone = function(o) {
            return JSON.parse(JSON.stringify(o));
        };
        var preFixRegex = /^[\s\-'"(\[:;,]+/;
        var postFixRegex = /[\s\-'")\]!?.:;,]+$/;
        var trimAndMatch = function(s) {
            var preFix = s.match(preFixRegex) || [ "" ];
            var postFix = s.match(postFixRegex) || [ "" ];
            return {
                text: s.replace(preFixRegex, "").replace(postFixRegex, ""),
                post: postFix[0],
                pre: preFix[0]
            };
        };
        var diffString = function(oldStr, newStr) {
            var preCommon = 0;
            var postCommon;
            for (var i = 0; i < newStr.length && i < oldStr.length; i++) {
                if (oldStr.substring(0, i) === newStr.substring(0, i)) {
                    preCommon = i;
                } else {
                    break;
                }
            }
            for (var i = 0; i < newStr.length && i < oldStr.length; i++) {
                if (oldStr.substring(oldStr.length - i, oldStr.length) === newStr.substring(newStr.length - i, newStr.length)) {
                    postCommon = i;
                } else {
                    break;
                }
            }
            return {
                preCommon: preCommon,
                postCommon: postCommon,
                diff: newStr.length - oldStr.length,
                from: preCommon,
                to: oldStr.length - postCommon
            };
        };
        var getTextNodesUnder = function(el) {
            var n, a = [], walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            while (n = walk.nextNode()) {
                a.push(n);
            }
            return a;
        };
        var getNodeFragmentsOfIndex = function(element, from, to) {
            if (typeof to == "undefined") to = from;
            var textOffset = 0;
            var result = [];
            var textNodes = getTextNodesUnder(element);
            if (!textNodes.length) {
                var tn = document.createTextNode("");
                element.appendChild(tn);
                return [ {
                    node: tn,
                    from: 0,
                    to: 0
                } ];
            }
            for (var tni = 0; tni < textNodes.length; tni++) {
                var fragment = textNodes[tni].nodeValue;
                if (textOffset + fragment.length < from) {
                    textOffset = textOffset + fragment.length;
                    continue;
                }
                var fragmentToPush = {
                    node: textNodes[tni],
                    from: Math.max(0, from - textOffset),
                    to: Math.min(fragment.length, to - textOffset)
                };
                if (fragmentToPush.from !== fragmentToPush.to) {
                    result.push(fragmentToPush);
                }
                if (textOffset + fragment.length > to) break;
                textOffset = textOffset + fragment.length;
            }
            return result;
        };
        var getNodeOffsetOfIndex = function(element, from, to) {
            if (typeof to == "undefined") to = from;
            var textOffset = 0;
            var result = {
                startNode: null,
                startNodeOffset: 0,
                endNode: null,
                endNodeOffset: 0
            };
            var textNodes = gingerModule.get("widget.utils").getTextNodesUnder(element);
            if (from === 0) {
                result.startNode = textNodes[0];
                result.startNodeOffset = 0;
            }
            for (var tni = 0; tni < textNodes.length; tni++) {
                var fragment = textNodes[tni].nodeValue;
                if (from >= textOffset && from <= textOffset + fragment.length) {
                    if (fragment.length === from - textOffset && textNodes[tni + 1]) {
                        tniOffset = 1;
                        while (textNodes.length > tni + tniOffset && textNodes[tni + tniOffset].nodeValue.length == 0) {
                            tniOffset++;
                        }
                        result.startNode = textNodes[tni + tniOffset];
                        result.startNodeOffset = 0;
                    } else {
                        result.startNode = textNodes[tni];
                        result.startNodeOffset = from - textOffset;
                    }
                }
                if (to > textOffset && to <= textOffset + fragment.length) {
                    result.endNode = textNodes[tni];
                    result.endNodeOffset = to - textOffset;
                }
                textOffset = textOffset + fragment.length;
            }
            return result;
        };
        var cloneRepresentation = function(repr) {
            if (!repr || !repr.length) return repr;
            var cloned = [];
            for (var i = 0; i < repr.length; i++) {
                cloned.push({
                    text: repr[i].text,
                    startsAt: repr[i].startsAt,
                    endsAt: repr[i].endsAt,
                    activeSentence: repr[i].activeSentence,
                    id: repr[i].id,
                    preLineBreakCount: repr[i].preLineBreakCount,
                    postLineBreakCount: repr[i].postLineBreakCount,
                    words: repr[i].words,
                    correction: repr[i].correction
                });
                if (repr[i].ignored) cloned[cloned.length - 1].ignored = repr[i].ignored;
                if (repr[i].charLimited) cloned[cloned.length - 1].charLimited = repr[i].charLimited;
            }
            return cloned;
        };
        var getElementZ = function(e) {
            var z = window.document.defaultView.getComputedStyle(e, null).getPropertyValue("z-index");
            if (isNaN(z)) return 1;
            return z;
        };
        var findHighestZIndex = function(node) {
            var zindex = 0;
            var current = node;
            if (node instanceof $gingerWidgetJquery) {
                current = node[0];
            }
            try {
                while (current.parentNode) {
                    var currentZindex = getElementZ(current);
                    if (currentZindex > zindex) zindex = parseInt(currentZindex);
                    current = current.parentNode;
                }
            } catch (e) {}
            return zindex;
        };
        function isCKEditor(element) {
            return element?.classList?.contains("ck-editor__editable");
        }
        function isNotion() {
            return /notion.so/.test(location.hostname);
        }
        var isGoogleDocs = function() {
            return /docs.google.com\/document/.test(location.href);
        };
        var getDomainOfUrl = function(url) {
            if (/docs.google.com/.test(url)) {
                try {
                    var parsedUrl = new URL(url);
                    var pathParts = parsedUrl.pathname.split("/");
                    return parsedUrl.hostname + "/" + pathParts[1];
                } catch (e) {
                    return url.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
                }
            }
            return url.replace(/^[^/]*\/\/(www\.)?/g, "").replace(/[:\/].*$/g, "");
        };
        function expandSelectionToHyphenatedWord() {
            const selection = window.getSelection();
            const range = selection.getRangeAt(0);
            const selectedText = selection.toString();
            const textNode = range.startContainer;
            const textContent = textNode.textContent;
            const selectionStartIndex = range.startOffset;
            const selectionEndIndex = range.endOffset;
            const wordBoundaries = /[\s,.!?;:"'()]+/;
            const words = textContent.split(wordBoundaries);
            let index = 0;
            let wordIndices = words.map(word => {
                let startIndex = textContent.indexOf(word, index);
                index = startIndex + word.length;
                return {
                    word: word,
                    startIndex: startIndex,
                    endIndex: index
                };
            });
            const wordWithHyphen = wordIndices.find(({
                word,
                startIndex,
                endIndex
            }) => {
                return word.includes(selectedText) && word.includes("-") && selectionStartIndex >= startIndex && selectionEndIndex <= endIndex;
            });
            if (wordWithHyphen) {
                range.setStart(textNode, wordWithHyphen.startIndex);
                range.setEnd(textNode, wordWithHyphen.endIndex);
                selection.removeAllRanges();
                selection.addRange(range);
            }
        }
        function getSelectionSurroundingText(wordCountBefore = 5, wordCountAfter = 5) {
            let selection = window.getSelection();
            const initialRange = selection.getRangeAt(0).cloneRange();
            if (!selection.rangeCount) {
                return null;
            }
            expandSelectionToHyphenatedWord();
            const range = selection.getRangeAt(0);
            const selectedText = selection.toString().trim();
            selection.modify("extend", "backward", "sentence");
            const startTextAsArray = selection.toString().trim().split(/\s+/);
            if (selectedText === startTextAsArray[startTextAsArray.length - 1]) {
                startTextAsArray.pop();
            }
            const fiveWordsBefore = startTextAsArray.slice(-wordCountBefore);
            const startText = fiveWordsBefore.join(" ").trim();
            selection.removeAllRanges();
            selection.addRange(range);
            selection.modify("extend", "forward", "sentence");
            const endTextAsArray = selection.toString().split(/\s+/);
            const theWordAndFiveWordsAfter = endTextAsArray.slice(0, wordCountAfter + 1);
            const endText = theWordAndFiveWordsAfter.join(" ").trim();
            selection.removeAllRanges();
            selection.addRange(initialRange);
            let contextSegment = startText + " " + endText;
            if (startText[startText.length - 1] === "-") {
                contextSegment = startText + endText;
            }
            return contextSegment;
        }
        return {
            merge: merge,
            getNodeOffsetOfIndex: getNodeOffsetOfIndex,
            getNodeFragmentsOfIndex: getNodeFragmentsOfIndex,
            generateUID: generateUID,
            isMouseEventOverElement: isMouseEventOverElement,
            clone: clone,
            cloneRepresentation: cloneRepresentation,
            compareObjects: compareObjects,
            trimAndMatch: trimAndMatch,
            diffString: diffString,
            isRichTextElement: isRichTextElement,
            getTextNodesUnder: getTextNodesUnder,
            getStyleOfObject: getStyleOfObject,
            findHighestZIndex: findHighestZIndex,
            isNotion: isNotion,
            isCKEditor: isCKEditor,
            isGoogleDocs: isGoogleDocs,
            getDomainOfUrl: getDomainOfUrl,
            getSelectionSurroundingText: getSelectionSurroundingText
        };
    });
})();

(function() {
    var module = gingerModule.load("widget", function() {
        var config;
        var eventScope = $gingerWidgetJquery({});
        var inputs = [];
        var wordSpellMistakes = [];
        var sentenceMistakes = [];
        var enabled = true;
        var representation = [];
        var addInput = function(input) {
            var gingerInputInstance = new gingerModule.get("widget.inputHandler", true);
            var gingerInput = gingerInputInstance().init(input);
            inputs.push(gingerInput);
            eventScope.trigger("input.added", gingerInput);
        };
        var getInputs = function() {
            return inputs;
        };
        var init = function(initConfig) {
            if (initConfig.apiKey) gingerModule.get("widget.config").set("apiKey", initConfig.apiKey);
            if (initConfig.userId) gingerModule.get("widget.config").set("userId", initConfig.userId);
            if (initConfig.widgetUid) gingerModule.get("widget.config").set("widgetUid", initConfig.widgetUid);
            if (initConfig.apiKey) gingerModule.get("widget.config").set("apiKey", initConfig.apiKey);
            if (initConfig.affId) gingerModule.get("widget.config").set("affId", initConfig.affId);
            if (initConfig.dialect) gingerModule.get("widget.config").set("dialect", initConfig.dialect);
            if (initConfig.version) gingerModule.get("widget.config").set("version", initConfig.version);
            if (initConfig.source) gingerModule.get("widget.config").set("source", initConfig.source);
            if (initConfig.charLimit) gingerModule.get("widget.config").set("charLimit", initConfig.charLimit);
            if (gingerModule.get("widget.utils").isGoogleDocs()) {
                gingerModule.get("widget.googledocs").init();
                setTimeout(() => {
                    gingerModule.get("widget.googledocs").parseText();
                });
                var targetNode = document.querySelector(".kix-rotatingtilemanager-content");
                var filteredMutationsList;
                var observer = new MutationObserver((mutationsList, observer) => {
                    filteredMutationsList = mutationsList.filter(el => typeof el.target.parentNode.className === "string" && !el.target.parentNode.className.includes("kix-canvas-tile-selection") || el.addedNodes.length && el.type === "childList" && el.target.nodeName !== "svg");
                    if (filteredMutationsList.length) {
                        setTimeout(() => {
                            gingerModule.get("widget.googledocs").parseText();
                            inputs[0]?.events.listen.trigger("inputchange");
                        });
                    }
                });
                observer.observe(targetNode, {
                    attributes: false,
                    childList: true,
                    subtree: true
                });
                var secondObserver = new MutationObserver((mutationsList, observer) => {
                    setTimeout(() => {
                        gingerModule.get("widget.googledocs").parseText();
                        inputs[0]?.events.listen.trigger("inputchange");
                    });
                });
                secondObserver.observe(targetNode, {
                    attributes: true,
                    attributeFilter: [ "style" ]
                });
            }
            gingerModule.get("widget.inputFinder").listen.on("new", function(event, input) {
                addInput(input);
            });
            $gingerWidgetJquery(document).ready(function() {
                gingerModule.get("widget.inputFinder").init(initConfig.inputFinder);
            });
            if (console && console.log) console.log("Running Ginger Widget v" + gingerModule.get("widget.config").get("version"));
            if (gingerModule.get("widget.utils").isNotion()) {
                document.removeEventListener("click", handleNotionFieldsOnClick);
                document.addEventListener("click", handleNotionFieldsOnClick);
                document.removeEventListener("keydown", handleNotionFieldsOnKeyDown);
                document.addEventListener("keydown", handleNotionFieldsOnKeyDown);
            }
        };
        var handleNotionFieldsOnClick = function($event) {
            setTimeout(() => {
                if ($event.target && $event.target.className === "notranslate" && inputs.length) {
                    inputs.forEach(function(input) {
                        if (input.element === $event.target) {
                            input.events.listen.trigger("inputchange");
                            input.events.listen.trigger("focus");
                        }
                    });
                }
            });
        };
        var handleNotionFieldsOnKeyDown = function() {
            setTimeout(() => {
                var ds = getSelectionStart();
                if (ds.className === "notranslate" && inputs.length) {
                    inputs.forEach(function(input) {
                        if (input.element === ds) {
                            input.events.listen.trigger("inputchange");
                        }
                    });
                }
            });
        };
        function getSelectionStart() {
            return document.getSelection()?.anchorNode?.parentNode;
        }
        var findInputIndexById = function(id) {
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].id === id) {
                    return i;
                }
            }
            return null;
        };
        var removeInput = function(id) {
            var inputIndex = findInputIndexById(id);
            var inputToDestroy = inputs[inputIndex];
            if (inputIndex !== null) {
                inputToDestroy.destroy();
                inputs.splice(inputIndex, 1);
            }
            eventScope.trigger("input.removed", inputToDestroy);
        };
        var disable = function() {
            enabled = false;
            while (inputs.length) {
                removeInput(inputs[0].id);
            }
        };
        var enable = function(cb) {
            enabled = true;
            gingerModule.get("widget.inputFinder").refresh(cb);
        };
        var isEnabled = function() {
            return enabled;
        };
        return {
            getInputs: getInputs,
            listen: eventScope,
            disable: disable,
            enable: enable,
            remove: removeInput,
            isEnabled: isEnabled,
            init: init
        };
    }, [ "widget.inputFinder", "widget.inputHandler", "widget.phraseService", "widget.api", "widget.config", "widget.report", "widget.licenseLimits", "widget.googledocs" ]);
})();

gingerModule.load("gingerchromeext.browser", function() {
    return chrome;
});

gingerModule.load("gingerchromeext.content.ajax", function() {
    return {
        execute: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.ajax",
            callFunction: "execute",
            promise: true
        })
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

gingerModule.load("gingerchromeext.content.backgroundConnector", function() {
    var call = function(config, cb) {
        try {
            gingerModule.get("gingerchromeext.browser").runtime.sendMessage(config, function(result, a, b) {
                if (cb) cb(result);
            });
        } catch (e) {
            console.log(e);
        }
    };
    var callPromise = function(config) {
        var deferred = $gingerWidgetJquery.Deferred();
        config.promise = true;
        call(config, function(callBackResult) {
            if (callBackResult.rejected) {
                deferred.reject(callBackResult.result);
            } else {
                deferred.resolve(callBackResult.result);
            }
        });
        return deferred.promise();
    };
    var proxy = function(config) {
        var proxyFunction = function(arg, cb) {
            if (config.promise) {
                config.callArgs = [];
                for (var ai = 0; ai < arguments.length; ai++) {
                    config.callArgs.push(arguments[ai]);
                }
                return callPromise(config);
            } else {
                config.callArgs = [ arg ];
                return call(config, cb);
            }
        };
        return proxyFunction;
    };
    return {
        call: call,
        callPromise: callPromise,
        proxy: proxy
    };
});

gingerModule.load("gingerchromeext.content.buttonSelection", function() {
    var buttonContainer = document.querySelector("#ginger-button-for-rephrase-container");
    var button = document.querySelector("#ginger-button-for-rephrase");
    var isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    var measure = gingerModule.get("gingerchromeext.content.measure");
    var siteSettings = gingerModule.get("widget.siteSettings").get(window.location.href);
    var create = function(x, y, isSynMode = false) {
        try {
            this.remove();
            buttonContainer = document.createElement("div");
            buttonContainer.id = "ginger-button-for-rephrase-container";
            button = document.createElement("span");
            button.id = "ginger-button-for-rephrase";
            const buttonTooltip = document.createElement("div");
            buttonTooltip.className = "ginger-button-for-rephrase-tooltip";
            if (isSynMode) {
                buttonTooltip.innerHTML = "View Synonyms and Definitions";
            } else {
                buttonTooltip.innerHTML = `Rephrase with Ginger ${isMac ? "(Cmd+⌥+E)" : "(Ctrl+Alt+E)"}`;
            }
            buttonContainer.appendChild(button);
            buttonContainer.appendChild(buttonTooltip);
            if (siteSettings.shiftRephraseIcon) {
                y += siteSettings.shiftRephraseIcon.y;
            }
            if (!button.style || !buttonContainer.style) return false;
            button.style.position = `relative`;
            if (isSynMode) {
                button?.classList.add("syn-mode");
            }
            if (x + 24 + 4 > document.body.clientWidth) {
                buttonContainer.style.left = `${document.body.clientWidth - 40}px`;
            } else {
                buttonContainer.style.left = `${x + 5}px`;
            }
            buttonContainer.style.top = `${y - 25 - 4}px`;
            buttonContainer.style.position = `fixed`;
            buttonContainer.style.zIndex = measure.findHighestZIndex() + 50;
            button.setAttribute("disabled", "disabled");
            setTimeout(() => {
                button.removeAttribute("disabled");
            });
            if (document.body) {
                document.getElementsByTagName("html")[0].insertBefore(buttonContainer, document.getElementsByTagName("body")[0]);
            }
            return buttonContainer;
        } catch (error) {
            console.log(error);
        }
    };
    var remove = function() {
        try {
            buttonContainer = document.querySelector("#ginger-button-for-rephrase-container");
            if (buttonContainer) buttonContainer.remove();
            return;
        } catch (error) {
            console.log(error);
        }
    };
    return {
        create: create,
        remove: remove,
        button: buttonContainer
    };
}, [ "widget.siteSettings" ]);

gingerModule.load("gingerchromeext.content.config", function() {
    var config = {};
    var loadDefer = $gingerWidgetJquery.Deferred();
    gingerModule.get("gingerchromeext.content.backgroundConnector").call({
        module: "gingerchromeext.background.config",
        callFunction: "get"
    }, function(result) {
        config = result;
        loadDefer.resolve(result);
    });
    return {
        get: function(property) {
            return property ? config[property] : config;
        },
        set: function(property, value) {
            config[property] = value;
            return config;
        },
        loaded: loadDefer.promise()
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

(function() {
    var module = gingerModule.load("gingerchromeext.content.contentPopup", function() {
        var eventScope = $gingerWidgetJquery({});
        var html;
        var customDivTag = "gdiv";
        var eventListener = gingerModule.get("gingerchromeext.content.eventListener");
        var measure = gingerModule.get("gingerchromeext.content.measure");
        var build = function() {
            if (html) return;
            var doc = window.top.document;
            if (!doc.getElementsByTagName("body").length) {
                return;
            }
            html = {};
            html.main = doc.getElementsByTagName("body")[0].appendChild(doc.createElement(customDivTag));
            html.main.className = "ginger-extension-popup";
            html.main.frame = html.main.appendChild(doc.createElement(customDivTag));
            html.main.frame.className = "ginger-extension-popup-frame";
            html.main.wrap = $gingerWidgetJquery('<gdiv class="ginger-extension-popup-wrap"></gdiv>').appendTo(html.main.frame).get(0);
            html.main.close = $gingerWidgetJquery('<ga class="ginger-extension-popup-close">&times;</ga>').appendTo(html.main.wrap).get(0);
            html.main.iframe = html.main.wrap.appendChild(doc.createElement("iframe"));
            html.main.iframe.setAttribute("scrolling", "no");
            $gingerWidgetJquery(html.main).css("z-index", measure.findHighestZIndex(true) + 30);
            eventListener.add(html.main.close, "click", function() {
                eventScope.trigger("closed");
                hide();
            });
            return true;
        };
        var serializeToQueryParams = function(params) {
            var queryString = "";
            for (var key in params) {
                if (queryString != "") {
                    queryString += "&";
                }
                queryString += key + "=" + encodeURIComponent(params[key]);
            }
            return queryString;
        };
        var show = function(params) {
            build();
            if (params.withoutClose) {
                $gingerWidgetJquery(html.main.close).hide();
            } else {
                $gingerWidgetJquery(html.main.close).show();
            }
            html.main.iframe.src = gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/contentPopup/index.html?") + serializeToQueryParams(params);
            $gingerWidgetJquery(html.main.iframe).css("width", params.width || "501").css("height", params.height || "510");
            $gingerWidgetJquery(html.main).show();
        };
        var hide = function() {
            if (html) {
                html.main.iframe.src = "about:blank";
                $gingerWidgetJquery(html.main).hide();
            }
        };
        return {
            show: show,
            hide: hide,
            listen: eventScope
        };
    }, [ "gingerchromeext.content.eventListener", "gingerchromeext.content.measure" ]);
})();

(function() {
    var module = gingerModule.load("gingerchromeext.content.definitionPopup", function() {
        var html;
        var eventListener = gingerModule.get("gingerchromeext.content.eventListener");
        var gaFields = gingerModule.get("gingerchromeext.content.report").get();
        var isIFrame = gingerModule.get("gingerchromeext.content.config").get("isIFramePopup");
        var selectionInfo;
        var session = gingerModule.get("gingerchromeext.content.session").get();
        var isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
        var data = {
            text: "",
            clientVersion: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
            apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
            userIdentifier: !gingerModule.get("gingerchromeext.content.session").get("isAnonym") ? gingerModule.get("gingerchromeext.content.session").get("userId") : gingerModule.get("gingerchromeext.content.config").get("anonUserId"),
            lang: gingerModule.get("gingerchromeext.content.config").get("dialect")
        };
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        var getSelectionCoordinates = function() {
            var sel = document.selection, range, rects, rect = null;
            try {
                if (window.getSelection) {
                    sel = window.getSelection();
                    if (sel.rangeCount) {
                        range = sel.getRangeAt(0).cloneRange();
                        if (range.getClientRects) {
                            rects = range.getClientRects();
                            if (rects.length > 0) {
                                rect = range.getClientRects()[0];
                            }
                        }
                        if (x == 0 && y == 0) {
                            var span = document.createElement("span");
                            if (span.getClientRects) {
                                span.appendChild(document.createTextNode("​"));
                                range.insertNode(span);
                                rect = $gingerWidgetJquery(span).offset();
                                var spanParent = span.parentNode;
                                spanParent.removeChild(span);
                                spanParent.normalize();
                            }
                        }
                    }
                }
            } catch (e) {}
            return rect;
        };
        var getSelectionNode = function() {
            var selectionContainer = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    selectionContainer = document.activeElement;
                } else {
                    selectionContainer = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return selectionContainer;
        };
        var getSelectionText = function() {
            var text = "";
            if (window.getSelection) {
                text = $gingerWidgetJquery.trim(window.getSelection().toString());
            } else if (document.selection && document.selection.type != "Control") {
                text = document.selection.createRange().text;
            }
            return text;
        };
        var getDefinition = function(word, cb) {
            var url = gingerModule.get("gingerchromeext.content.config").get("urlDefinitions");
            gingerModule.get("gingerchromeext.content.ajax").execute({
                url: `${url}/${data.lang}/${data.text}`,
                headers: {
                    "Content-Type": "application/json"
                },
                cache: "default"
            }).then(function(reply) {
                var definitions = [];
                if (reply.DefsByWord.length > 0 && reply.DefsByWord[0].DefsByPos && reply.DefsByWord[0].DefsByPos.length > 0) {
                    $gingerWidgetJquery.each(reply.DefsByWord[0].DefsByPos, function(index, pos) {
                        $gingerWidgetJquery.each(pos.Defs, function(key, value) {
                            definitions.push(value.Def);
                        });
                    });
                    if (definitions.length) cb(definitions[0]);
                }
            }, function(reply) {});
        };
        var serializeToQueryParams = function(params) {
            var queryString = "";
            for (var key in params) {
                if (queryString != "") {
                    queryString += "&";
                }
                queryString += key + "=" + encodeURIComponent(params[key]);
            }
            return queryString;
        };
        var scrollBindElements = [];
        var bindScroll = function(node) {
            if (node) {
                scrollBindElements.push(node);
                $gingerWidgetJquery(node).on("scroll.definitionScroll", function() {
                    hide();
                });
                if (node.parentNode) bindScroll(node.parentNode);
            }
        };
        var unBindScroll = function() {
            for (var i = 0; i < scrollBindElements.length; i++) {
                $gingerWidgetJquery(scrollBindElements[i]).off("scroll.definitionScroll");
            }
            scrollBindElements = [];
        };
        var build = function() {
            html = {};
            html.frame = $gingerWidgetJquery("<gdiv class='ginger-extension-definitionpopup'></gdiv>").appendTo(document.querySelector("html"));
        };
        var hide = function() {
            unBindScroll();
            if (html) $gingerWidgetJquery(html.frame).hide();
        };
        var show = function(config) {
            if (!html) build();
            gingerModule.get("gingerchromeext.content.report").reporterGA4({
                event: gaFields.GAEvent.definitionDisplay,
                category: gaFields.GACategory.Definition,
                trigger: gaFields.GATrigger.definition,
                eventValue: window.location.hostname
            });
            getDefinition(config.text, function(definition) {
                $gingerWidgetJquery(html.frame).html('<gdiv class="ginger-dp">\n' + '    <gdiv class="ginger-dp-content">\n' + '        <gdiv class="ginger-dp-title"><gspan id="dp-title">' + config.text + "</gspan></gdiv>\n" + '        <gdiv class="ginger-dp-description" id="dp-description">' + definition + "</gdiv>\n" + '        <gdiv class="ginger-dp-more">More <gspan>(Definitions, Synonyms, Translation)</gspan></gdiv>\n' + "    </gdiv>\n" + "</gdiv>");
                $gingerWidgetJquery(".ginger-dp-more").click(function() {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.definitionClick,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.more
                    });
                    hide();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.dictionary",
                        data: {
                            text: config.text
                        }
                    });
                });
                var height = $gingerWidgetJquery(html.frame).height();
                var popupOffset = height + 10;
                var popupTop = config.selectionCoordinates.top + config.selectionCoordinates.height;
                var popupLeft = config.selectionCoordinates.left;
                if (config.selectionCoordinates.top - popupOffset >= 0) {
                    popupTop = config.selectionCoordinates.top - popupOffset;
                }
                if (config.selectionCoordinates.left - popupOffset + config.selectionCoordinates.width / 2 - popupOffset >= 0) {
                    popupLeft = config.selectionCoordinates.left - popupOffset + config.selectionCoordinates.width / 2;
                }
                $gingerWidgetJquery(html.frame).css("left", popupLeft);
                $gingerWidgetJquery(html.frame).css("top", popupTop);
                $gingerWidgetJquery(html.frame).css("z-index", 2147483646);
                $gingerWidgetJquery(html.frame).delay(200).fadeIn();
            });
            bindScroll(config.node);
        };
        var init = function() {
            document.addEventListener("dblclick", function(event) {
                if (isGoogleDocs()) {
                    return;
                }
                gingerModule.get("gingerchromeext.content.storage").get("enableDefinitionsAndSynonyms").then(function(isEnabled) {
                    if (isEnabled) {
                        selectionInfo = {
                            text: getSelectionText(),
                            selectionCoordinates: getSelectionCoordinates(),
                            node: getSelectionNode()
                        };
                        var isNodeThatsNotValid = $gingerWidgetJquery(selectionInfo.node).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(selectionInfo.node).is("*[contenteditable='false']");
                        if (selectionInfo.text && !selectionInfo.text.match(/\s/) && !isNodeThatsNotValid) {
                            const selectedMultiWordsLength = selectionInfo.text.split(/\s+/).length;
                            const pattern = /.*[0-9@].*/gi;
                            if (pattern.test(selectionInfo.text) && selectedMultiWordsLength === 1) {
                                return;
                            }
                            var gingerInput = document.activeElement;
                            var isContain = gingerInput && gingerInput.contains(selectionInfo.node) && $gingerWidgetJquery(gingerInput).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(gingerInput).is("*[contenteditable='false']");
                            if (!isContain) {
                                if (isIFrame) {
                                    selectionInfo = {
                                        ...data,
                                        ...selectionInfo,
                                        tab: "definitions",
                                        segment: gingerModule.get("widget.utils").getSelectionSurroundingText()
                                    };
                                    delete selectionInfo.word;
                                    gingerModule.get("gingerchromeext.content.synonymPopup").show(selectionInfo);
                                } else {
                                    show(selectionInfo);
                                }
                                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                                    module: "gingerchromeext.background.statisticService",
                                    callFunction: "increase",
                                    callArgs: [ gaFields.GAEventValue.doubleClickOnWord + "_definition" ]
                                });
                            }
                        }
                    }
                });
            });
            document.addEventListener("click", function(event) {
                hide();
            });
            window.addEventListener("message", function(msg) {
                var message = msg.data ? msg.data : {};
                if (!message) return;
                if (message.cmd === "definitionPopup.close") {
                    hide();
                } else if (message.cmd === "definitionPopup.definition") {
                    hide();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.dictionary",
                        data: message.data
                    });
                } else if (message.cmd === "definitionPopup.translate") {
                    hide();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.translate",
                        data: message.data
                    });
                } else if (message.cmd === "definitionPopup.synonyms") {
                    hide();
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.synonyms",
                        data: message.data
                    });
                }
            });
        };
        init();
        return {
            show: show,
            hide: hide
        };
    }, [ "gingerchromeext.content.ajax", "gingerchromeext.content.config", "gingerchromeext.content.writer", "gingerchromeext.content.session", "gingerchromeext.browser", "gingerchromeext.content.storage", "gingerchromeext.content.eventListener" ]);
})();

gingerModule.load("gingerchromeext.content.eventListener", function() {
    var add = function(elem, event, cb) {
        window.addEventListener(event, function(e) {
            if (e.target === elem) {
                cb(e);
            }
        }, {
            capture: true
        });
    };
    return {
        add: add
    };
}, []);

(function() {
    var module = gingerModule.load("gingerchromeext.content.floatingG", function() {
        "use strict";
        var eventScope = $gingerWidgetJquery({});
        var bubble = {};
        var activeElement = null;
        var config = {
            bindClassname: "ginger-floatingG",
            bindContainerId: "ginger-floatingG-container",
            bubbleMargin: 8,
            scrollbarWidth: 17,
            mistakesSteps: [ 1, 5, 10, 20 ],
            popupSize: {
                height: 200,
                width: 160
            },
            gSize: 20,
            popup: "",
            gDocsClassName: "-gdocs"
        };
        var charLimit = gingerModule.get("gingerchromeext.content.config").get("charLimit");
        var charCount = 0;
        var ajaxGraceTimeout = null;
        var ajaxGrace = 2e3;
        var mistakesCount = 0;
        var floatingGBlurTimeout = null;
        var eventListener = gingerModule.get("gingerchromeext.content.eventListener");
        var measure = gingerModule.get("gingerchromeext.content.measure");
        var isLoggedIn = false;
        var isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
        var gaFields = gingerModule.get("gingerchromeext.content.report").get();
        var licenseStatus = gingerModule.get("gingerchromeext.content.config").get("licenseStatus");
        var layout = {};
        var maxHeightForIconMinifiction = 35;
        var alwaysMinified = false;
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        let gDocsBlackList = [];
        var getClass = function(postfix) {
            return config.bindClassname + "-" + postfix;
        };
        var isPointingTo = function(area, x, y) {
            var elementAtPoint = document.elementFromPoint(x, y);
            return area === elementAtPoint || area.contains(elementAtPoint);
        };
        var drawDebugPoint = function(x, y, color) {
            $gingerWidgetJquery("<div class='debug-pt'></div>").appendTo("body").css("left", x + 2).css("top", y).css("backgroundColor", color);
        };
        var getPosition = function(area) {
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(area);
            var isReactArea = isRTE && $gingerWidgetJquery(area).find("[data-block='true']").length > 0 || isRTE && $gingerWidgetJquery(area).closest("[data-reactroot]").length;
            var leftCache = $gingerWidgetJquery(bubble.main).css("left");
            $gingerWidgetJquery(bubble.main).css("left", -1e3);
            var paddingBox = getPaddingBox(area);
            var scroll = getDocumentScroll();
            var inspectViewportArea = {
                top: paddingBox.top - scroll.top,
                left: paddingBox.left - scroll.left,
                bottom: paddingBox.top + paddingBox.height - scroll.top,
                right: paddingBox.left + paddingBox.width - scroll.left
            };
            var viewportHeight = window.innerHeight;
            var viewportWidth = window.innerWidth;
            if (inspectViewportArea.top < 0) inspectViewportArea.top = 0;
            if (inspectViewportArea.bottom > viewportHeight) inspectViewportArea.bottom = viewportHeight;
            if (inspectViewportArea.left < 0) inspectViewportArea.left = 0;
            if (inspectViewportArea.right > viewportWidth) inspectViewportArea.right = viewportWidth;
            var inspectFromRight = inspectViewportArea.right;
            var inspectFromBottom = inspectViewportArea.bottom;
            var inspectFromTop = inspectViewportArea.top;
            if (inspectFromBottom <= 0) return null;
            while (inspectFromTop < inspectViewportArea.bottom) {
                if (isPointingTo(area, inspectViewportArea.left + paddingBox.width / 3, inspectFromTop)) {
                    while (isPointingTo(area, inspectViewportArea.left + paddingBox.width / 3, inspectFromTop)) {
                        inspectFromTop--;
                    }
                    inspectFromTop++;
                    break;
                }
                if (!isReactArea) {
                    var temp = inspectFromTop + 6;
                    if (temp > inspectViewportArea.bottom) {
                        break;
                    }
                }
                inspectFromTop += 6;
            }
            while (inspectFromBottom > inspectViewportArea.top) {
                if (isPointingTo(area, inspectViewportArea.left + paddingBox.width / 3, inspectFromBottom)) {
                    while (isPointingTo(area, inspectViewportArea.left + paddingBox.width / 3, inspectFromBottom)) {
                        inspectFromBottom++;
                    }
                    inspectFromBottom--;
                    break;
                }
                if (!isReactArea) {
                    var temp = inspectFromBottom - 6;
                    if (temp < inspectViewportArea.top) {
                        break;
                    }
                }
                inspectFromBottom -= 6;
            }
            while (inspectFromRight > inspectViewportArea.left) {
                var middleOfArea = Math.floor((inspectFromBottom + inspectFromTop) / 2);
                if (isPointingTo(area, inspectFromRight, middleOfArea)) {
                    while (isPointingTo(area, inspectFromRight, middleOfArea)) {
                        inspectFromRight++;
                    }
                    inspectFromRight--;
                    break;
                }
                if (!isReactArea) {
                    var temp = inspectFromRight - 6;
                    if (temp < inspectViewportArea.left) {
                        break;
                    }
                }
                inspectFromRight -= 6;
            }
            var areaHeight = inspectFromBottom - inspectFromTop;
            if (!(areaHeight - config.gSize - config.bubbleMargin < 0) && !isPointingTo(area, inspectFromRight - config.gSize / 2 - config.bubbleMargin, inspectFromBottom - config.gSize / 2)) {
                while (inspectFromBottom > inspectViewportArea.top) {
                    if (isPointingTo(area, inspectFromRight - config.gSize / 2 - config.bubbleMargin, inspectFromBottom - config.gSize / 2) && isPointingTo(area, inspectFromRight - config.gSize / 2 - config.bubbleMargin, inspectFromBottom)) {
                        while (isPointingTo(area, inspectFromRight - config.gSize / 2 - config.bubbleMargin, inspectFromBottom)) {
                            inspectFromBottom++;
                        }
                        inspectFromBottom--;
                        break;
                    }
                    if (!isReactArea) {
                        var temp = inspectFromBottom - 6;
                        if (temp < inspectViewportArea.top) {
                            break;
                        }
                    }
                    inspectFromBottom -= 6;
                }
            }
            if (inspectFromTop >= inspectViewportArea.bottom) return null;
            if (inspectFromBottom <= inspectViewportArea.top) return null;
            if (inspectFromRight <= inspectViewportArea.left) return null;
            $gingerWidgetJquery(bubble.main).css("left", leftCache);
            var siteSettingsVal = gingerModule.get("widget.siteSettings").get(window.location.href, area);
            var bubblePosition = {
                left: inspectFromRight - config.bubbleMargin,
                top: areaHeight - config.gSize - config.bubbleMargin * 2 < 0 ? inspectFromBottom - config.gSize - (areaHeight - config.gSize) / 2 : inspectFromBottom - config.gSize - config.bubbleMargin,
                height: areaHeight
            };
            setTimeout(() => {
                alwaysMinified = !!siteSettingsVal?.minifyIcon;
                minify(!!siteSettingsVal?.minifyIcon);
            });
            if (window.location.hostname.indexOf("lightning.force.com") != -1) {
                inspectFromBottom = viewportHeight - config.gSize;
            }
            if (siteSettingsVal.shiftIcon) {
                return {
                    ...bubblePosition,
                    left: bubblePosition.left + siteSettingsVal.shiftIcon.x,
                    top: inspectFromBottom >= bubblePosition.top + siteSettingsVal.shiftIcon.y ? bubblePosition.top + siteSettingsVal.shiftIcon.y : inspectFromBottom,
                    height: bubblePosition.height
                };
            }
            return bubblePosition;
        };
        var getPaddingBox = function(element, e, o) {
            var _ref = getBorderBoxWithScroll(element, o);
            var width = _ref.width;
            var height = _ref.height;
            var top = _ref.top;
            var left = _ref.left;
            var elementComputedStyle = window.getComputedStyle(element);
            var borderTopWidth = parseFloat(elementComputedStyle["border-top-width"]) || 0;
            var borderRightWidth = parseFloat(elementComputedStyle["border-right-width"]) || 0;
            var borderBottomWidth = parseFloat(elementComputedStyle["border-bottom-width"]) || 0;
            var borderLeftWidth = parseFloat(elementComputedStyle["border-left-width"]) || 0;
            var a = 0;
            var u = 0;
            if ("BackCompat" !== document.compatMode || element !== document.body || element !== document.scrollingElement) {
                var _e6 = element.clientWidth / getScaleRatio(element, o);
                u = height - element.clientHeight / getScaleRatio(element, o) - borderTopWidth - borderBottomWidth;
                (a = width - _e6 - borderLeftWidth - borderRightWidth) < 1 && (a = 0);
                u < 1 && (u = 0);
            }
            width -= borderLeftWidth + a + borderRightWidth;
            height -= borderTopWidth + u + borderBottomWidth;
            top += borderTopWidth;
            left += borderLeftWidth;
            return {
                width: width,
                height: height,
                top: top,
                right: left + width,
                bottom: top + height,
                left: left,
                border: {
                    top: borderTopWidth,
                    right: borderRightWidth,
                    bottom: borderBottomWidth,
                    left: borderLeftWidth
                }
            };
        };
        var getBorderBoxWithScroll = function(e) {
            var borderBox = getBorderBox(e);
            var documentScroll = getDocumentScroll();
            borderBox.top += documentScroll.top;
            borderBox.left += documentScroll.left;
            borderBox.bottom += documentScroll.top;
            borderBox.right += documentScroll.left;
            if (document.body && document.body.contains(e)) {
                var documentGap = getDocumentGap();
                borderBox.top -= documentGap.top;
                borderBox.right -= documentGap.right;
                borderBox.bottom -= documentGap.top;
                borderBox.left -= documentGap.left;
            }
            return borderBox;
        };
        var getBorderBox = function(e) {
            var boundingClientRect = e.getBoundingClientRect();
            return {
                width: boundingClientRect.width,
                height: boundingClientRect.height,
                top: boundingClientRect.top,
                right: boundingClientRect.right,
                bottom: boundingClientRect.bottom,
                left: boundingClientRect.left
            };
        };
        var getScaleRatio = function(elem) {
            var ratio = 1;
            var width = elem.getBoundingClientRect().width;
            if (width > 0) {
                var oWidth = elem.offsetWidth;
                Math.abs(width - oWidth) > 1 ? ratio = oWidth / width : ratio = 1;
            }
            return ratio;
        };
        var getDocumentScroll = function() {
            var t = document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0, e = document.documentElement && document.documentElement.scrollLeft || document.body && document.body.scrollLeft || 0;
            return {
                top: t,
                left: e
            };
        };
        var getDocumentGap = function() {
            var result = {
                top: 0,
                left: 0
            };
            if (document.body && hasRelativePosition(document.body)) {
                var documentRect = document.documentElement.getBoundingClientRect();
                var bodyRect = document.body.getBoundingClientRect();
                var docTop = document.documentElement.offsetTop;
                var docLeft = document.documentElement.offsetLeft;
                var i = bodyRect.top - documentRect.top + docTop;
                var s = bodyRect.left - documentRect.left + docLeft;
                var r = window.getComputedStyle(document.body);
                var l = parseFloat(r["border-top-width"]) || 0, c = parseFloat(r["border-left-width"]) || 0;
                result = {
                    top: i + l,
                    left: s + c
                };
            }
            return result;
        };
        var hasRelativePosition = function(element) {
            var position = window.getComputedStyle(element).position;
            return [ "relative", "fixed", "absolute", "sticky" ].indexOf(position) > -1;
        };
        var getCurrentUrl = function() {
            if ("about:blank" === location.href || "about:srcdoc" === location.href) try {
                return window.parent.location.href;
            } catch (t) {}
            return location.href;
        };
        var isFixedPositioned = function(element) {
            if (/fixed/i.test(window.getComputedStyle(element)["position"])) return true; else if (!element.parentNode || element.parentNode === document) return false; else return isFixedPositioned(element.parentNode);
        };
        var positionBubble = function(area) {
            layout = getPosition(area);
            if (!layout) {
                $gingerWidgetJquery(bubble.main).hide();
                return;
            } else {
                $gingerWidgetJquery(bubble.main).show();
            }
            bubble.main.style.top = layout.top + "px";
            bubble.main.style.left = layout.left + "px";
            var bubbleLeft = layout.left;
            var bubbleTop = layout.top;
            var fitsInWindowInUprightPosition = bubbleTop - config.popupSize.height > 0;
            var fitsInWindowInLeftPosition = bubbleLeft - config.popupSize.width > 0;
            if (fitsInWindowInUprightPosition) {
                $gingerWidgetJquery(bubble.main).removeClass(getClass("posdown"));
            } else {
                $gingerWidgetJquery(bubble.main).addClass(getClass("posdown"));
            }
            if (fitsInWindowInLeftPosition) {
                $gingerWidgetJquery(bubble.main).removeClass(getClass("posright"));
            } else {
                $gingerWidgetJquery(bubble.main).addClass(getClass("posright"));
            }
            bubble.main.style.zIndex = measure.findHighestZIndex() + 50;
            if (statsCache && layout) {
                handleIconMinification();
            }
        };
        var tagName = "gdiv";
        var buildBubble = function(doc) {
            bubble.main = doc.createElement(tagName);
            bubble.main.className = config.bindClassname + " " + config.bindClassname + "-closed";
            bubble.main.style.display = "block";
            bubble.blocked = bubble.main.appendChild(doc.createElement(tagName));
            bubble.blocked.className = "ginger-floatingG-disabled-main";
            eventListener.add(bubble.blocked, "click", function(e) {
                if (isGoogleDocs()) {
                    removeFromGDocsBlackList();
                    return;
                }
                enableElement();
                activeElement.element.focus();
                e.stopPropagation();
                e.preventDefault();
            });
            bubble.blockedToolTip = bubble.blocked.appendChild(doc.createElement(tagName));
            bubble.blockedToolTip.className = "ginger-floatingG-bar-tool-tooltip ginger-floatingG-bar-tool-tooltip-enable";
            bubble.blockedToolTip.innerHTML = "Enable Ginger";
            bubble.offline = bubble.main.appendChild(doc.createElement(tagName));
            bubble.offline.className = "ginger-floatingG-offline-main";
            bubble.offlineToolTip = bubble.offline.appendChild(doc.createElement(tagName));
            bubble.offlineToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            bubble.offlineToolTip.innerHTML = "<em>Cannot connect to Ginger</em> Check your internet connection<br/> or reload the browser";
            bubble.enabled = bubble.main.appendChild(doc.createElement(tagName));
            bubble.enabled.className = "ginger-floatingG-enabled-main";
            bubble.bar = bubble.enabled.appendChild(doc.createElement(tagName));
            bubble.bar.className = "ginger-floatingG-bar";
            bubble.barClose = bubble.bar.appendChild(doc.createElement(tagName));
            bubble.barClose.className = "ginger-floatingG-bar-tool ginger-floatingG-bar-tool-disable";
            bubble.barCloseLink = bubble.barClose.appendChild(doc.createElement("ga"));
            bubble.barCloseLink.innerHTML = "";
            eventListener.add(bubble.barCloseLink, "click", function(e) {
                if (!bubble.disablingPopup) {
                    return;
                }
                bubble.disablingPopup.style.display = "flex";
                document.addEventListener("click", clickOutsideDisablingPopupHandler);
            });
            bubble.barCloseToolTip = bubble.barClose.appendChild(doc.createElement(tagName));
            bubble.barCloseToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            bubble.barCloseToolTip.innerHTML = "Disable Ginger";
            bubble.loadingPopup = doc.createElement(tagName);
            bubble.loadingPopup.className = `ginger-floatingG__loading-popup`;
            bubble.loadingPopup.innerHTML = `<span class="ginger-floatingG__loading-popup-logo"></span><span class="ginger-floatingG__loading-popup-text">Ginger is checking your text for mistakes...</span>`;
            bubble.main.appendChild(bubble.loadingPopup);
            bubble.disablingPopup = doc.createElement(tagName);
            bubble.disablingPopup.className = `ginger-floatingG__disabling-popup ${isGoogleDocs() ? "ginger-floatingG__disabling-popup_gdocs" : ""}`;
            var disableField = doc.createElement("button");
            disableField.textContent = isGoogleDocs() ? "Disable Ginger in this document" : "Disable Ginger in this text field";
            disableField.className = "ginger-floatingG__disabling-popup-button";
            disableField.addEventListener("click", function() {
                bubble.disablingPopup.style.display = "none";
                if (isGoogleDocs()) {
                    addToGDocsBlackList();
                    return;
                }
                disableElement();
                activeElement.element.focus();
            });
            bubble.disablingPopup.appendChild(disableField);
            var disableUrl = doc.createElement("button");
            disableUrl.textContent = "Disable Ginger on this website";
            disableUrl.className = "ginger-floatingG__disabling-popup-button";
            disableUrl.addEventListener("click", function() {
                gingerModule.get("gingerchromeext.content.widget").updateBlackList(getCurrentUrl());
                bubble.disablingPopup.style.display = "none";
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-closed");
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-open");
            });
            bubble.disablingPopup.appendChild(disableUrl);
            bubble.disablingPopup.style.display = "none";
            bubble.main.appendChild(bubble.disablingPopup);
            if (!isGoogleDocs()) {
                bubble.barRephrase = bubble.bar.appendChild(doc.createElement(tagName));
                bubble.barRephrase.className = "ginger-floatingG-bar-tool ginger-floatingG-bar-tool-rephrase";
                bubble.barRephraseLink = bubble.barRephrase.appendChild(doc.createElement("ga"));
                bubble.barRephraseLink.className = "ginger-floatingG-bar-tool-rephrase__btn";
                bubble.barRephraseLink.id = "ginger__floatingG-bar-tool-rephrase__btn";
                bubble.barRephraseLink.innerHTML = "Rephrase";
                bubble.barRephraseToolTip = bubble.barRephrase.appendChild(doc.createElement(tagName));
                bubble.barRephraseToolTip.className = "ginger-floatingG-bar-tool-tooltip ginger-floatingG-bar-tool-tooltip_rephrase";
                bubble.barRephraseToolTip.innerHTML = `Rephrase with Ginger ${isMac ? "(Cmd+⌥+E)" : "(Ctrl+Alt+E)"}`;
                var siteSettings = gingerModule.get("widget.siteSettings").get(window.location.href);
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.rephraseLimits",
                    callFunction: "getNewQuantity"
                }).then(function(qnt) {
                    if (siteSettings.isMiniRephrase && (!qnt || qnt <= 8)) {
                        bubble.barRephrase.classList.add("ginger-floatingG-bar-tool-rephrase_small-circle_priority");
                    } else {
                        if (!siteSettings.isMiniRephrase && (!qnt || qnt <= 3)) {
                            bubble.barRephrase.classList.add("ginger-floatingG-bar-tool-rephrase_big-circle");
                        } else if (qnt > 3 && qnt <= 8) {
                            bubble.barRephrase.classList.remove("ginger-floatingG-bar-tool-rephrase_big-circle");
                            bubble.barRephrase.classList.add("ginger-floatingG-bar-tool-rephrase_small-circle");
                        }
                    }
                });
            }
            bubble.barOpen = bubble.bar.appendChild(doc.createElement(tagName));
            bubble.barOpen.className = "ginger-floatingG-bar-tool ginger-floatingG-bar-tool-mistakes";
            bubble.barOpenLink = bubble.barOpen.appendChild(doc.createElement("ga"));
            bubble.mistakesCount = bubble.barOpenLink.appendChild(doc.createElement("span"));
            bubble.mistakesCount.className = "ginger-floatingG-bar-tool-mistakes-count";
            if (isGoogleDocs()) {
                bubble.barOpen.className = bubble.barOpen.className + " gdocs";
            }
            eventListener.add(bubble.barOpenLink, "click", function(e) {
                if (isGoogleDocs()) {
                    return;
                }
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: isLoggedIn ? gaFields.GAEvent.openWriterClick : gaFields.GAEvent.loginClick,
                    category: isLoggedIn ? gaFields.GACategory.Writer : gaFields.GACategory.Login,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget
                });
                triggerWriterOpen({
                    trigger: "FloatingGEdit"
                });
                e.preventDefault();
                e.stopPropagation();
            });
            bubble.barOpenToolTip = bubble.barOpen.appendChild(doc.createElement(tagName));
            bubble.barOpenToolTip.className = "ginger-floatingG-bar-tool-tooltip";
            bubble.barOpenToolTip.innerHTML = "Edit in Ginger";
            return bubble;
        };
        var appendMistakesPopupForGoogleDocs = function(isPremium) {
            if (!isGoogleDocs()) {
                return;
            }
            $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + config.gDocsClassName);
            if (mistakesCount > 0 && isPremium) {
                if (!contentPopupHtml) {
                    createContentPopup();
                }
                hideContentPopup();
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-notification");
                contentPopupHtml.main.wrap.className = "ginger-floatingG-contentPopup-wrap-limit ginger-floatingG-contentPopup-wrap-limit_premium";
                contentPopupHtml.main.wrap.innerHTML = `
                        <span class="ginger-floatingG__mistakes-popup-logo"></span>
                        <div>
                        <span class="ginger-floatingG__mistakes-popup-title"><b>${mistakesCount} mistakes</b> found on the current pages.</span>
                        <span class="ginger-floatingG__mistakes-popup-subtitle">Keep scrolling to check the rest of your document in real-time.</span>
                        </div>
                    `;
                $gingerWidgetJquery(contentPopupHtml.main).fadeIn();
            }
        };
        function updateGDocsMistakeCount() {
            const popupTitle = document.querySelector(".ginger-floatingG__mistakes-popup-title");
            if (popupTitle) {
                popupTitle.innerHTML = `<b>${mistakesCount} mistakes</b> found on the current pages.`;
            }
        }
        var isMistakesStepTaken = function(mistakes) {
            if (mistakesCount < mistakes) {
                for (var i = 0; i < config.mistakesSteps.length; i++) {
                    if (mistakesCount < config.mistakesSteps[i] && mistakes >= config.mistakesSteps[i]) {
                        return true;
                    }
                }
            }
            return false;
        };
        var setMistakes = function(mistakes) {
            if (mistakes !== mistakesCount) {
                if (isMistakesStepTaken(mistakes)) {
                    $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-spin");
                } else {
                    $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-spin");
                }
                mistakesCount = mistakes;
            }
            if (mistakes > 0) {
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-dirty");
                if (mistakes > 99) {
                    $gingerWidgetJquery(bubble.mistakesCount).html('<gdiv style="font-size:11px">99+</gdiv>');
                } else {
                    $gingerWidgetJquery(bubble.mistakesCount).text(mistakes);
                }
            } else {
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + config.gDocsClassName + "-dirty");
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-dirty");
                $gingerWidgetJquery(bubble.mistakesCount).text(mistakes);
            }
            updateGDocsMistakeCount();
        };
        var getDocumentContext = function(node) {
            if (node) {
                return node.ownerDocument || window.document;
            } else {
                return window.document;
            }
        };
        var createBubble = function() {
            var doc = window.document;
            var container;
            if (doc.getElementsByTagName("body")[0].hasAttribute("contenteditable")) {
                container = doc.getElementsByTagName("html")[0].insertBefore(doc.createElement(tagName), doc.getElementsByTagName("body")[0]);
            } else {
                container = doc.getElementsByTagName("body")[0].appendChild(doc.createElement(tagName));
            }
            container.style.position = "absolute";
            container.style.top = "0";
            container.style.left = "0";
            container.id = config.bindContainerId;
            buildBubble(doc);
            container.appendChild(bubble.main);
            return container;
        };
        var serializeToQueryParams = function(params) {
            var queryString = "";
            for (var key in params) {
                if (queryString != "") {
                    queryString += "&";
                }
                queryString += key + "=" + encodeURIComponent(params[key]);
            }
            return queryString;
        };
        var handleIconMinification = function() {
            if (!layout || alwaysMinified) {
                return;
            }
            if (charCount > 0 && layout.height < maxHeightForIconMinifiction) {
                minify(true);
            } else {
                minify(false);
            }
        };
        var contentPopupHtml = null;
        var createContentPopup = function() {
            contentPopupHtml = {};
            contentPopupHtml.main = bubble.main.appendChild(document.createElement(tagName));
            contentPopupHtml.main.className = "ginger-floatingG-contentPopup";
            contentPopupHtml.main.wrap = $gingerWidgetJquery('<gdiv class="ginger-floatingG-contentPopup-wrap"></gdiv>').appendTo(contentPopupHtml.main).get(0);
            contentPopupHtml.main.close = $gingerWidgetJquery('<ga class="ginger-floatingG-contentPopup-close">&times;</ga>').appendTo(contentPopupHtml.main.wrap).get(0);
            contentPopupHtml.main.frame = $gingerWidgetJquery('<gdiv class="ginger-floatingG-contentPopup-frame"></gdiv>').appendTo(contentPopupHtml.main.wrap).get(0);
            contentPopupHtml.main.iframe = contentPopupHtml.main.frame.appendChild(document.createElement("iframe"));
            contentPopupHtml.main.iframe.setAttribute("scrolling", "no");
            eventListener.add(contentPopupHtml.main.close, "click", function() {
                hideContentPopup();
            });
        };
        var doesContentPopupFitUprightInView = function(contentHeight) {
            var scrollTop = $gingerWidgetJquery(window).scrollTop();
            var elementOffset = $gingerWidgetJquery(contentPopupHtml.main).offset().top;
            var distance = elementOffset - scrollTop;
            if (elementOffset === 0 && scrollTop === 0) return true;
            return distance - contentHeight > 0;
        };
        var showContentPopup = function(params) {
            var width = params.width || 300;
            var height = params.height || 150;
            var innerW = window.innerWidth;
            var innerH = window.innerHeight;
            if (innerW < width + 30 || innerH < height + 30) return;
            params.type = "floatingGContentPopup";
            var session = gingerModule.get("gingerchromeext.content.session").get();
            if (session && session.token) params.authToken = session.token;
            if (!contentPopupHtml) createContentPopup();
            hideContentPopup();
            $gingerWidgetJquery(contentPopupHtml.main).fadeIn();
            if (doesContentPopupFitUprightInView(height)) {
                $gingerWidgetJquery(contentPopupHtml.main).removeClass("ginger-floatingG-contentPopup-down");
            } else {
                $gingerWidgetJquery(contentPopupHtml.main).addClass("ginger-floatingG-contentPopup-down");
            }
            contentPopupHtml.main.iframe.setAttribute("src", gingerModule.get("gingerchromeext.browser").runtime.getURL("content/popups/contentPopup/index.html?") + serializeToQueryParams(params));
            $gingerWidgetJquery(contentPopupHtml.main.iframe).css("width", width).css("height", height);
            contentPopupHtml.main.frame.style.height = height + "px";
        };
        var showLimitPopup = function(params) {
            if (!contentPopupHtml) {
                createContentPopup();
            }
            hideContentPopup();
            $gingerWidgetJquery(contentPopupHtml.main).fadeIn();
            var counter = isGoogleDocs() ? `<span id="counter" class="widget-body-counter-value">${params.charLimit}/${params.charLimit}</span><span> free characters checked.</span>` : `<span id="counter" class="widget-body-counter-value">${params.charLimit}/${params.charCount}</span><span> free characters checked.</span>`;
            contentPopupHtml.main.wrap.className = "ginger-floatingG-contentPopup-wrap-limit";
            contentPopupHtml.main.wrap.innerHTML = `
                <div class="widget-body-counter">
                    <div>${counter}</div>
                    ${!params.isPremium ? '<div class="widget-body-counter-premium">' + '<a id="counterLink" target="_blank" href="https://www.gingersoftware.com/online_store/ginger_upgrade">Go Premium</a>' + " to check longer texts and entire documents</div>" : ""}
                </div>`;
        };
        var hideContentPopup = function() {
            $gingerWidgetJquery(contentPopupHtml.main).hide();
        };
        var hideArea = function(area) {
            var allowClicksToHappenTimeout = setTimeout(function() {
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-closed");
            }, 100);
        };
        var triggerWriterOpen = function(params) {
            if (!params) params = {};
            if (!params.type) params.type = "writer";
            var formattedValue;
            if (params.type === "writer" && activeElement) {
                formattedValue = /^\s+$/.test(activeElement.getVal()) ? "" : activeElement.getFormattedVal();
            }
            var isRte = gingerModule.get("widget.utils").isRichTextElement(activeElement.element);
            if (!isRte) {
                formattedValue = formattedValue.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            } else {
                var loc = location.hostname;
                var wrapDTT = function(el) {
                    return '<dtt dont-touch-this="true" style="display: none!important;">' + el.outerHTML + "</dtt>";
                };
                var contentDom = document.createElement("div");
                contentDom.innerHTML = formattedValue;
                var elWithStyles = $gingerWidgetJquery(contentDom).find("[style]");
                elWithStyles.each(function(index, el) {
                    el.setAttribute("cloned-style-ginger-writer", el.getAttribute("style"));
                });
                var selectors;
                if (/gmail.com|mail.google.com/.test(loc)) {
                    selectors = '.gmail_quote, .gmail_signature, [data-smartmail="gmail_signature"]';
                }
                if (selectors) {
                    var quotes = contentDom.querySelectorAll(selectors);
                    quotes.forEach(function(q) {
                        try {
                            q.outerHTML = wrapDTT(q);
                        } catch (e) {}
                    });
                }
                formattedValue = contentDom.innerHTML;
            }
            params = {
                cmd: "ginger.extension.setText",
                data: {
                    text: formattedValue,
                    cache: JSON.stringify(gingerModule.get("widget.api").dumpCorrectionCache()),
                    representation: activeElement.getRepresentation(),
                    host: location.host
                }
            };
            eventScope.trigger("writer.open", params);
        };
        var listenToMessages = function() {
            window.addEventListener("message", function receiveMessage(e) {
                if (!e.data) return;
                var message = e.data;
                try {
                    message = JSON.parse(e.data);
                } catch (e) {}
                if (message.type === "floatingGContentPopup") {
                    if (message.intent === "signIn") {
                        eventScope.trigger("inlineAuth.open", {
                            view: "login",
                            trigger: "FloatingGBackTo"
                        });
                    } else if (message.intent === "neverShowSignIn") {
                        gingerModule.get("gingerchromeext.content.storage").set("signInFloatingGPopupShowInWindows", [ "*" ]);
                    } else if (message.intent === "openBusinessPage") {
                        window.open(gingerModule.get("gingerchromeext.content.config").get("urlBase") + "/business?autk=" + encodeURIComponent(gingerModule.get("gingerchromeext.content.session").get().token) + "&utm_medium=" + gingerModule.get("gingerchromeext.content.config").get("platform") + "_ext&utm_source=g_message&utm_campaign=smb_intro");
                    }
                    if (activeElement) activeElement.element.focus();
                    hideContentPopup();
                }
            }, false);
        };
        var addStyleToHeadOutlook = function() {
            if (document.querySelector("#ginger-spellchecker-in-outlook")) {
                return;
            }
            try {
                var cssRules = ".ms-editor-squiggler {display: none !important;}";
                var ghostStyles = document.createElement("style");
                ghostStyles.id = "ginger-spellchecker-in-outlook";
                ghostStyles.type = "text/css";
                ghostStyles.textContent = cssRules;
                document.getElementsByTagName("head")[0].appendChild(ghostStyles);
            } catch (error) {
                console.error(error);
            }
        };
        var removeStyleToHeadOutlook = function() {
            return document.querySelector("#ginger-spellchecker-in-outlook") && document.querySelector("#ginger-spellchecker-in-outlook").remove();
        };
        var isNotion = function() {
            var loc = location.hostname;
            return /notion.so/.test(loc);
        };
        var init = function() {
            gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                module: "gingerchromeext.background.correctionLimits",
                callFunction: "get"
            }).then(function(correctionLimits) {
                charLimit = gingerModule.get("gingerchromeext.content.session").get("license") === licenseStatus.premium ? correctionLimits.premium : correctionLimits.free;
            });
            if (!document.getElementsByTagName("body").length) return;
            createBubble();
            createContentPopup();
            listenToMessages();
            document.addEventListener("scroll", function() {
                setTimeout(function() {
                    if (activeElement) refreshPosition(activeElement);
                }, 100);
            });
            gingerModule.get("widget").listen.on("input.removed", function(event, gingerInput) {
                var destroyEvents = [ "focus", "blur", "mutation", "visibility.change" ];
                for (var i = 0; i < destroyEvents.length; i++) {
                    gingerInput.events.listen.off(destroyEvents[i]);
                }
                hide();
            });
            gingerModule.get("widget").listen.on("input.added", function(event, gingerInput) {
                updateCharsCount(gingerInput.getRepresentation());
                gingerInput.markForeign(false, true);
                if (isGoogleDocs()) {
                    gingerModule.get("gingerchromeext.content.storage").get("gDocsBlackList").then(function(result) {
                        gDocsBlackList = result || [];
                        if (gDocsBlackList.indexOf(getCurrentUrl()) !== -1) {
                            addToGDocsBlackList();
                        }
                    });
                }
                if (location.host === "outlook.office.com" || location.host === "outlook.live.com" || location.host === "outlook.office365.com") {
                    addStyleToHeadOutlook();
                }
                gingerInput.events.listen.on("disabled", function() {
                    console.log("disabled");
                    if (location.host === "outlook.office.com" || location.host === "outlook.live.com" || location.host === "outlook.office365.com") {
                        addStyleToHeadOutlook();
                    }
                });
                gingerInput.events.listen.on("enabled", function() {
                    if (location.host === "outlook.office.com" || location.host === "outlook.live.com" || location.host === "outlook.office365.com") {
                        removeStyleToHeadOutlook();
                    }
                });
                var badelement = $gingerWidgetJquery(gingerInput.element).find("[data-original-tag='GDIV']");
                badelement.remove();
                if (isNotion() && gingerInput.element) {
                    show(gingerInput);
                }
                if (isGoogleDocs()) {
                    if (gingerInput.element === document.querySelector(".ginger-container-body")) {
                        show(gingerInput);
                    }
                }
                if (gingerInput.element === document.activeElement) {
                    show(gingerInput);
                }
                gingerInput.events.listen.on("focus", function() {
                    show(gingerInput);
                    refreshPosition(gingerInput);
                });
                gingerInput.events.listen.on("blur", function() {
                    if (floatingGBlurTimeout) floatingGBlurTimeout = clearTimeout(floatingGBlurTimeout);
                    floatingGBlurTimeout = setTimeout(function() {
                        if (gingerInput.element !== (isGoogleDocs() ? document.querySelector(".ginger-container-body") : document.activeElement)) {
                            if (bubble.disablingPopup.style.display === "flex") {
                                return;
                            }
                            hide();
                        }
                    }, 1e3);
                });
                gingerInput.events.listen.on("markedForeign.change", function(e, isForeign) {
                    var action = "";
                    if (isForeign) {
                        $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-disabled");
                        $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-foreign");
                        action = "MarkedForeign";
                    } else {
                        $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-foreign");
                        $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-disabled");
                        action = "UnMarkedForeign";
                    }
                });
                gingerInput.events.listen.on("mutation", function() {
                    refreshPosition(gingerInput);
                });
                gingerInput.events.listen.on("visibility.change", function(e, isVisible) {
                    if (isVisible) {
                        show(activeElement);
                    } else {
                        if (gingerInput === activeElement) {
                            hide();
                        }
                    }
                });
                gingerInput.events.listen.on("inputchange", function() {
                    hideContentPopup();
                });
            });
            gingerModule.get("widget.config").listen.on("change", function(e, data) {
                if ("charLimit" in data.changed) {
                    charLimit = data.changed.charLimit;
                }
                if ("charCount" in data.changed) {
                    charCount = data.changed.charCount;
                    handleIconMinification();
                }
            });
            gingerModule.get("widget.onlinestatus").listen.on("online", function(event) {
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-offline");
            });
            gingerModule.get("widget.onlinestatus").listen.on("offline", function(event) {
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-offline");
            });
            gingerModule.get("widget.api").listen.on("ajax.start", function() {
                if (ajaxGraceTimeout) ajaxGraceTimeout = clearTimeout(ajaxGraceTimeout);
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-loading");
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-notification");
            });
            gingerModule.get("widget.api").listen.on("ajax.end", function() {
                var isPremium = gingerModule.get("widget.session").get("license") === licenseStatus.premium;
                if (ajaxGraceTimeout) ajaxGraceTimeout = clearTimeout(ajaxGraceTimeout);
                ajaxGraceTimeout = setTimeout(function() {
                    $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-loading");
                    appendMistakesPopupForGoogleDocs(isPremium);
                    if (isGoogleDocs() && isPremium) {
                        $gingerWidgetJquery(bubble.mistakesPopup).css("display", "flex");
                        setTimeout(function() {
                            $gingerWidgetJquery(bubble.mistakesPopup).hide();
                        }, 1500);
                    }
                    if (charCount > charLimit && !(isGoogleDocs() && isPremium)) {
                        showLimitPopup({
                            charCount: charCount,
                            charLimit: charLimit,
                            isPremium: isPremium
                        });
                        if (isGoogleDocs()) {
                            $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-notification");
                        }
                    }
                }, ajaxGrace);
            });
            var tooltipTimer;
            $gingerWidgetJquery(bubble.bar).mouseenter(function() {
                tooltipTimer = setTimeout(() => {
                    var isLoginToolTip = bubble.barOpenToolTip.innerHTML.toLowerCase().trim() === "Log in to edit with Ginger".toLowerCase().trim();
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: isLoginToolTip ? gaFields.GAEvent.loginDisplay : gaFields.GAEvent.openWriterDisplay,
                        category: isLoginToolTip ? gaFields.GACategory.Login : gaFields.GACategory.Writer,
                        trigger: gaFields.GATrigger.edit,
                        interface: gaFields.GAInterface.widget
                    });
                }, 100);
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-open");
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-closed");
            });
            $gingerWidgetJquery(bubble.bar).mouseleave(function() {
                if (bubble.disablingPopup.style.display === "flex") {
                    return;
                }
                clearTimeout(tooltipTimer);
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-open");
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-closed");
            });
        };
        var updateCharsCount = function(representation) {
            charCount = representation.length ? representation[representation.length - 1].endsAt : 0;
        };
        var statsCache;
        var handleStatsChanged = function(e, statsChanged) {
            var stats = activeElement.stats.get();
            if (stats && stats.mistakes) setMistakes(stats.mistakes.grammar + stats.mistakes.spelling);
            statsCache = stats;
        };
        var show = function(gingerInput) {
            if (!gingerModule.get("widget").isEnabled()) return;
            if (activeElement) activeElement.stats.listen.off("changed", handleStatsChanged);
            hideContentPopup();
            if (floatingGBlurTimeout) floatingGBlurTimeout = clearTimeout(floatingGBlurTimeout);
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {
                isLoggedIn = true;
                if (bubble.barEditToolTip) bubble.barEditToolTip.innerHTML = "Edit in Ginger";
                bubble.barOpenToolTip.innerHTML = "Edit in Ginger";
            }, function() {
                isLoggedIn = false;
                if (bubble.barEditToolTip) bubble.barEditToolTip.innerHTML = "Log in to edit with Ginger";
                bubble.barOpenToolTip.innerHTML = "Log in to edit with Ginger";
            });
            activeElement = gingerInput;
            if (gingerInput.isEnabled()) {
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-disabled");
            } else {
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-disabled");
            }
            if (gingerModule.get("widget.onlinestatus").isOnline()) {
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-offline");
            } else {
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-offline");
            }
            var isPossiblyATrickyArea = !/inline/i.test($gingerWidgetJquery(gingerInput.element.parentNode).css("display")) && $gingerWidgetJquery(gingerInput.element.parentNode).height() <= 0;
            if (!isPossiblyATrickyArea) {
                handleStatsChanged();
                activeElement.stats.listen.on("changed", handleStatsChanged);
                refreshPosition(activeElement);
                setTimeout(function() {
                    refreshPosition(activeElement);
                }, 100);
                $gingerWidgetJquery(bubble.main).show();
                gingerModule.get("gingerchromeext.content.storage").get("onboardingFloatingGShown").then(function(result) {
                    if (!result) {
                        showContentPopup({
                            url: gingerModule.get("gingerchromeext.browser").runtime.getURL("/popup/index.html#!/supported/fgactive")
                        });
                        gingerModule.get("gingerchromeext.content.storage").set("onboardingFloatingGShown", true);
                    } else {
                        gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function resolved() {}, function rejected() {
                            gingerModule.get("gingerchromeext.content.storage").get("onboardingFloatingGShown").then(function(result) {
                                if (!result) return;
                                gingerModule.get("gingerchromeext.content.storage").get("signInFloatingGPopupShowInWindows").then(function(result) {
                                    var signInFloatingGPopupShowInWindows = result || [];
                                    gingerModule.get("gingerchromeext.content.backgroundConnector").call({
                                        module: "gingerchromeext.background.browserInterface",
                                        callFunction: "getTabId",
                                        includeSender: true
                                    }, function(tab) {
                                        if (signInFloatingGPopupShowInWindows[0] !== "*" && signInFloatingGPopupShowInWindows.indexOf(tab.id) === -1) {
                                            showContentPopup({
                                                url: gingerModule.get("gingerchromeext.browser").runtime.getURL("/popup/index.html#!/supported/fgsignin")
                                            });
                                            signInFloatingGPopupShowInWindows.push(tab.id);
                                            signInFloatingGPopupShowInWindows = signInFloatingGPopupShowInWindows.slice(-60);
                                            gingerModule.get("gingerchromeext.content.storage").set("signInFloatingGPopupShowInWindows", signInFloatingGPopupShowInWindows);
                                        } else {}
                                    });
                                });
                            });
                        });
                    }
                });
            } else {
                if (console && console.warn) console.warn("Possibly a tricky area for floatingG!");
            }
        };
        var hide = function() {
            $gingerWidgetJquery(bubble.main).hide();
            if (activeElement) {
                activeElement.stats.listen.off("changed", handleStatsChanged);
            }
        };
        var minify = function(shouldBeMinified) {
            if (shouldBeMinified) $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-minified"); else $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-minified");
        };
        var setVisibility = function(element, vis) {
            if (!activeElement) return;
            if (element === activeElement.element) {
                if (vis) {
                    show(activeElement);
                } else {
                    hide();
                }
            }
        };
        var refreshPosition = function(gingerInput) {
            if (gingerInput !== activeElement) return false;
            positionBubble(gingerInput.element);
        };
        function enableElement() {
            if (!activeElement || activeElement.isEnabled()) return;
            if (activeElement.getIsForeign()) {
                return;
            }
            activeElement.enable();
            bubble.barCloseToolTip.innerHTML = "Disable in this text field";
            $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-disabled");
            $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-open");
        }
        function disableElement() {
            if (!activeElement || !activeElement.isEnabled()) return;
            if (activeElement.getIsForeign()) {
                return;
            }
            activeElement.disable();
            bubble.barCloseToolTip.innerHTML = "Enable in this text field";
            $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-disabled");
            gingerModule.get("gingerchromeext.content.report").reporterGA4({
                event: gaFields.GAEvent.disableTextfield,
                category: gaFields.GACategory.Settings,
                trigger: gaFields.GATrigger.floatingG,
                interface: gaFields.GAInterface.widget,
                eventValue: location.host
            });
            $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-open");
        }
        var getActiveElement = function() {
            return activeElement;
        };
        function clickOutsideDisablingPopupHandler(event) {
            if (!bubble.disablingPopup.contains(event.target) && !bubble.barCloseLink.contains(event.target)) {
                bubble.disablingPopup.style.display = "none";
                $gingerWidgetJquery(bubble.main).addClass(config.bindClassname + "-closed");
                $gingerWidgetJquery(bubble.main).removeClass(config.bindClassname + "-open");
                document.removeEventListener("click", clickOutsideDisablingPopupHandler);
            }
        }
        function addToGDocsBlackList() {
            disableElement();
            document?.documentElement?.setAttribute("ginger-ext-for", "gdocs-disabled");
            if (gDocsBlackList.indexOf(getCurrentUrl()) !== -1) {
                return;
            }
            gDocsBlackList.push(getCurrentUrl());
            gingerModule.get("gingerchromeext.content.report").reporterGA4({
                event: gaFields.GAEvent.disableCorrections,
                category: gaFields.GACategory.Settings,
                trigger: gaFields.GATrigger.floatingG,
                interface: gaFields.GAInterface.widget,
                eventValue: location.host
            });
            gingerModule.get("gingerchromeext.content.storage").set("gDocsBlackList", gDocsBlackList);
        }
        function removeFromGDocsBlackList() {
            enableElement();
            document?.documentElement?.setAttribute("ginger-ext-for", "gdocs");
            const hostIndexInBlackListArray = gDocsBlackList.indexOf(getCurrentUrl());
            if (hostIndexInBlackListArray === -1) {
                return;
            }
            gDocsBlackList.splice(hostIndexInBlackListArray, 1);
            gingerModule.get("gingerchromeext.content.storage").set("gDocsBlackList", gDocsBlackList);
        }
        return {
            legacyConnector: {
                show: show,
                hide: hide
            },
            listen: eventScope,
            getActiveElement: getActiveElement,
            showContentPopup: showContentPopup,
            refreshPosition: refreshPosition,
            init: init
        };
    }, [ "widget", "widget.utils", "widget.inputFinder", "widget.siteSettings", "gingerchromeext.content.report", "gingerchromeext.content.eventListener", "gingerchromeext.content.measure" ]);
})();

gingerModule.load("gingerchromeext.content.init", function() {
    var checkInterval;
    var initiateWidget = function() {
        gingerModule.get("gingerchromeext.content.widget");
        gingerModule.get("gingerchromeext.content.onboardingBubbles");
        gingerModule.get("gingerchromeext.content.reloadContentScripts");
        checkInterval = clearInterval(checkInterval);
    };
    var initiateWriterPage = function() {
        window.postMessage({
            cmd: "gingerchromeext.content.inited"
        }, "*");
        gingerModule.get("gingerchromeext.content.writer");
        gingerModule.get("gingerchromeext.content.writer").listen.one("writer.loaded", function() {
            gingerModule.get("gingerchromeext.content.writer").open();
        });
        checkInterval = clearInterval(checkInterval);
    };
    var listenToLoginMessages = function() {
        window.addEventListener("message", function(msg) {
            var message = {};
            try {
                message = JSON.parse(msg.data);
            } catch (e) {
                message = msg.data;
            }
            if (!message) return;
            if (message.type === "gingerAuth.login.successful") {
                gingerModule.get("gingerchromeext.content.session").set(message.session);
                var isMessageOriginTheInlineAuth = msg.origin.toLowerCase() === gingerModule.get("gingerchromeext.browser").runtime.getURL("").split("/").splice(0, 3).join("/").toLowerCase();
                if (isMessageOriginTheInlineAuth) {
                    if (message.session.signUp) {} else {}
                }
            }
        });
    };
    var checkIfDocumentIsApplicable = function() {
        var isWriterPage = /gingersoftware\.com\/ginger-writer/.test(location.href);
        var isBlockedBySiteMeta = document.querySelector("meta[name=disable-ginger-extension]");
        var isGoogleDocs = /docs.google.com\/document/.test(location.href);
        if (isWriterPage) {
            initiateWriterPage();
            checkInterval = clearInterval(checkInterval);
        } else if (isBlockedBySiteMeta) {
            checkInterval = clearInterval(checkInterval);
        } else if (isGoogleDocs && document.querySelectorAll(".kix-page-paginated").length || document.querySelectorAll("textarea").length || document.querySelectorAll("[contenteditable]").length) {
            initiateWidget();
            checkInterval = clearInterval(checkInterval);
        }
    };
    var init = function() {
        checkInterval = setInterval(checkIfDocumentIsApplicable, 4e3);
        checkIfDocumentIsApplicable();
        listenToLoginMessages();
        gingerModule.get("gingerchromeext.content.definitionPopup");
        gingerModule.get("gingerchromeext.content.synonymPopup");
        gingerModule.get("gingerchromeext.content.writer");
        gingerModule.get("gingerchromeext.content.inlineAuth");
        gingerModule.get("gingerchromeext.content.licenseLimits");
        gingerModule.get("gingerchromeext.content.miniWriter");
        gingerModule.get("gingerchromeext.content.rephrasePopup");
        if (gingerModule.get("gingerchromeext.content.config").get("platform") === "safari") {
            gingerModule.get("gingerchromeext.content.backgroundConnector").call({
                module: "gingerchromeext.background.iconSwitcher",
                callFunction: "refresh"
            });
            document.addEventListener("visibilitychange", function() {
                gingerModule.get("gingerchromeext.content.backgroundConnector").call({
                    module: "gingerchromeext.background.iconSwitcher",
                    callFunction: "refresh"
                });
            });
        }
    };
    init();
}, []);

(function() {
    var module = gingerModule.load("gingerchromeext.content.inlineAuth", function(config) {
        var eventScope = $gingerWidgetJquery({});
        var html;
        var deferred;
        var oneYearinSec = 31536e3;
        var setTokenCookie = function(authToken, rememberMe) {
            var expirationDate;
            if (rememberMe) {
                expirationDate = new Date().getTime() / 1e3 + oneYearinSec;
            }
            gingerModule.get("gingerchromeext.content.backgroundConnector").call({
                module: "gingerchromeext.background.cookies",
                callFunction: "setCookies",
                callArgs: [ "authToken", authToken, expirationDate ]
            });
        };
        var listenToMessages = function() {
            window.addEventListener("message", function(msg) {
                var message = {};
                try {
                    message = JSON.parse(msg.data);
                } catch (e) {
                    message = msg.data;
                }
                if (!message) return;
                if (message.type === "gingerAuth.login.successful") {
                    setTokenCookie(message.session.token, message.session.keepSession);
                    gingerModule.get("gingerchromeext.content.contentPopup").hide();
                } else if (message.cmd === "ginger.extension.inlineAuth.open") {
                    open("Writer").then(function() {}, function() {});
                }
            });
        };
        var open = function(config) {
            deferred = $gingerWidgetJquery.Deferred();
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {}, function() {
                show(config);
            });
            return deferred.promise();
        };
        var show = function(config) {
            var popupParams = {
                url: gingerModule.get("gingerchromeext.content.config").get("urlBaseInlineAuth") + "/",
                height: 600,
                width: 410,
                platform: gingerModule.get("gingerchromeext.content.config").get("source"),
                trigger: config.trigger,
                clientVersion: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
                widgetUid: gingerModule.get("gingerchromeext.content.config").get("widgetUid"),
                origin: gingerModule.get("gingerchromeext.content.config").get("affId"),
                utm_medium: config.trigger,
                utm_source: "button",
                utm_campaign: "signup_login"
            };
            popupParams.url += config.view === "login" ? "#!/login" : "#!/sign-up";
            gingerModule.get("gingerchromeext.content.contentPopup").show(popupParams);
            gingerModule.get("gingerchromeext.content.contentPopup").listen.one("closed", function() {
                eventScope.trigger("auth.cancelled");
            });
        };
        var init = function() {
            listenToMessages();
            if (window.location.href.indexOf("pages/postinstall/index.html") !== -1) {
                open();
            }
        };
        init();
        return {
            open: open,
            listen: eventScope
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "gingerchromeext.content.report" ]);
})();

(function() {
    var module = gingerModule.load("gingerchromeext.content.licenseLimits", function() {
        var popups = {
            chrome: {
                exceeded: gingerModule.get("gingerchromeext.browser").runtime.getURL("/popup/index.html#!/supported/exceeded"),
                onbubble: gingerModule.get("gingerchromeext.browser").runtime.getURL("/popup/index.html#!/supported/exceeded"),
                approaching: gingerModule.get("gingerchromeext.browser").runtime.getURL("/popup/index.html#!/supported/approaching")
            },
            safari: {
                exceeded: gingerModule.get("gingerchromeext.browser").runtime.getURL("/popup/index.html#!/supported/exceeded"),
                onbubble: gingerModule.get("gingerchromeext.browser").runtime.getURL("/popup/index.html#!/supported/exceeded"),
                approaching: gingerModule.get("gingerchromeext.browser").runtime.getURL("/popup/index.html#!/supported/approaching")
            }
        };
        var showLimitationPopup = function(type) {
            var session = gingerModule.get("gingerchromeext.content.session").get();
            var params = {};
            if (session) {
                params.email = session.email;
                params.authToken = session.token;
            }
            var serializedParams = "";
            for (var key in params) {
                if (serializedParams != "") {
                    serializedParams += "&";
                }
                serializedParams += key + "=" + encodeURIComponent(params[key]);
            }
            var popupParams = {};
            var popupPlatform = popups[gingerModule.get("gingerchromeext.content.config").get("platform")];
            var gaReportName;
            switch (type) {
              case "approaching":
                gaReportName = "Display Premium for Correction Limit Approaching pop-up";
                popupParams = {
                    url: popupPlatform.approaching + "?" + serializedParams,
                    width: "570",
                    height: "570"
                };
                break;

              case "onbubble":
                gaReportName = "Display Premium for Correction Limit Reached pop-up";
                popupParams = {
                    url: popupPlatform.onbubble + "?" + serializedParams,
                    width: "570",
                    height: "570"
                };
                gingerModule.get("gingerchromeext.content.storage").get("onBubblePopupShownForUsers").then(function(users) {
                    if (!users) users = [];
                    if (users.indexOf(session.userId) === -1) {
                        users.push(session.userId);
                        gingerModule.get("gingerchromeext.content.storage").set("onBubblePopupShownForUsers", users);
                    }
                });
                break;

              case "exceeded":
                gaReportName = "Display Premium for Correction Limit Reached pop-up";
                popupParams = {
                    url: popupPlatform.exceeded + "?" + serializedParams,
                    width: "570",
                    height: "570"
                };
                break;
            }
            popupParams.withoutClose = true;
            gingerModule.get("gingerchromeext.content.contentPopup").show(popupParams);
        };
        var hidePopup = function() {
            gingerModule.get("gingerchromeext.content.contentPopup").hide();
        };
        var listenToMessages = function() {
            window.addEventListener("message", function(msg) {
                var message = {};
                try {
                    message = JSON.parse(msg.data);
                } catch (e) {
                    message = msg.data;
                }
                if (!message) return;
                if (message && message.action === "close") {
                    setTimeout(hidePopup);
                } else if (message.cmd == "ginger.extension.licenseLimits") {
                    showLimitationPopup(message.type);
                } else if (message.action === "upgrade") {}
            });
        };
        var init = function() {
            listenToMessages();
        };
        init();
        return {
            showLimitationPopup: showLimitationPopup
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "widget.licenseLimits", "widget.correctionBubble" ]);
})();

(function() {
    var module = gingerModule.load("gingerchromeext.content.marketingPopups", function() {
        var getOsName = function() {
            if (/Win/i.test(navigator.appVersion)) {
                return "win";
            } else if (/Mac/i.test(navigator.platform)) {
                return "mac";
            }
            return "other";
        };
        var listenToMessages = function() {
            window.addEventListener("message", function(msg) {
                var message = "";
                try {
                    message = JSON.parse(msg.data);
                } catch (e) {
                    message = msg.data;
                }
                if (!message) return;
                if (message.cmd == "ginger.extension.pollMessage") {
                    pollForNewMessage();
                }
            });
        };
        var savedMessagesForLater = [];
        var pollForNewMessage = function(type) {};
        listenToMessages();
        return {
            pollForNewMessage: pollForNewMessage
        };
    }, [ "gingerchromeext.content.session", "gingerchromeext.content.config", "widget.correctionBubble", "gingerchromeext.content.ajax" ]);
})();

gingerModule.load("gingerchromeext.content.measure", function() {
    var findHighestZIndex = function(ShouldQueryAll) {
        var highestZIndex = 1;
        document.querySelectorAll("body *").forEach(function(e) {
            if ($gingerWidgetJquery(e).css("position") !== "static" && (!ShouldQueryAll ? !/ginger-/.test(e.className) : true)) {
                var elementZIndex = parseInt($gingerWidgetJquery(e).css("z-index"));
                elementZIndex = isNaN(elementZIndex) ? 1 : elementZIndex;
                highestZIndex = Math.max(elementZIndex, highestZIndex);
            }
        });
        return highestZIndex;
    };
    var createMimic = function(target) {
        if (document.querySelector("#ginger__mime-element")) {
            document.querySelector("#ginger__mime-element").remove();
        }
        var propsForCopy = [ "fontSize", "lineHeight", "height", "overflow", "overflowY", "overflowX", "overflowAnchor", "overflowWrap", "overscrollBehavior", "overscrollBehaviorBlock", "overscrollBehaviorInline", "overscrollBehaviorX", "overscrollBehaviorY", "maxHeight", "border", "width", "padding", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "boxSizing", "outline", "backgroundColor", "fontSize", "maxHeight", "lineHeight", "fontFamily", "fontWeight", "fontStyle" ];
        var donorStyles = window.getComputedStyle(target, null);
        var mime = document.createElement("div");
        mime.id = "ginger__mime-element";
        mime.classList.add("ginger__mime-element");
        propsForCopy.forEach(function(prop) {
            mime.style[prop] = donorStyles[prop];
        });
        mime.style.zIndex = "-999";
        mime.style.whiteSpace = "pre-wrap";
        mime.textContent = target.value;
        mime.style.top = target.getBoundingClientRect().top + "px";
        mime.style.left = target.getBoundingClientRect().left + "px";
        mime.style.position = "fixed";
        document.body.appendChild(mime);
        mime.scrollTop = target.scrollTop;
        mime.scrollLeft = target.scrollLeft;
        return mime;
    };
    getSelectionRectFromMimic = function(target) {
        if (!target) {
            return;
        }
        if (target.nodeName === "TEXTAREA") {
            var mime = createMimic(target);
            if (mime) {
                var start = target.selectionStart;
                var finish = target.selectionEnd;
                window.getSelection().removeAllRanges();
                try {
                    var rangeM = new Range();
                    var textNode = mime.childNodes[0];
                    rangeM.setStart(textNode, start);
                    rangeM.setEnd(textNode, finish);
                    window.getSelection().addRange(rangeM);
                    var sel = document.selection, range, rects, rect = null;
                    sel = window.getSelection();
                    if (sel.rangeCount) {
                        range = sel.getRangeAt(0).cloneRange();
                        if (range.getClientRects) {
                            rects = range.getClientRects();
                            if (rects.length > 0) {
                                rect = range.getClientRects()[0];
                            }
                        }
                    }
                    window.getSelection().removeAllRanges();
                    target.selectionStart = start;
                    target.selectionEnd = finish;
                    if (document.querySelector("#ginger__mime-element")) {
                        document.querySelector("#ginger__mime-element").remove();
                    }
                    return rect;
                } catch (e) {
                    console.error(e);
                }
                return null;
            }
        } else {
            return null;
        }
    };
    return {
        findHighestZIndex: findHighestZIndex,
        getSelectionRectFromMimic: getSelectionRectFromMimic
    };
}, []);

(function() {
    var module = gingerModule.load("gingerchromeext.content.miniWriter", function() {
        var cache = gingerModule.get("widget.cache");
        var queueLine = [];
        var queueExec = function() {
            if (queueLine.length) queueLine[0]();
        };
        var queue = function(xhrConfig) {
            var deferred = $gingerWidgetJquery.Deferred();
            if (xhrConfig) {
                queueLine.push(function() {
                    var me = this;
                    $gingerWidgetJquery.ajax(xhrConfig).then(function(result) {
                        queueLine.splice(0, 1);
                        queueExec();
                        deferred.resolve(result);
                    }, function(result) {
                        queueLine.splice(0, 1);
                        queueExec();
                        deferred.reject(result);
                    });
                });
            }
            if (queueLine.length === 1) {
                queueExec();
            }
            return deferred.promise();
        };
        var getSelectionNode = function() {
            var selectionContainer = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    selectionContainer = document.activeElement;
                } else {
                    selectionContainer = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return selectionContainer;
        };
        var getSelectionText = function() {
            var text = "";
            if (window.getSelection) {
                text = $gingerWidgetJquery.trim(window.getSelection().toString());
            } else if (document.selection && document.selection.type !== "Control") {
                text = document.selection.createRange().text;
            }
            return text;
        };
        var init = function() {
            document.addEventListener("visibilitychange", function() {
                if (document.hidden) gingerModule.get("gingerchromeext.content.storage").set("miniWriterFromSelection", null);
            });
            document.addEventListener("mouseup", function(event) {
                gingerModule.get("gingerchromeext.content.storage").set("miniWriterFromSelection", null);
                var selectionInfo = {
                    text: getSelectionText(),
                    node: getSelectionNode()
                };
                if (selectionInfo.text && selectionInfo.text.length > 1) {
                    var inputSelection = $gingerWidgetJquery(selectionInfo.node).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(selectionInfo.node).is("*[contenteditable='false']");
                    gingerModule.get("gingerchromeext.content.storage").set("miniWriterFromSelection", {
                        type: inputSelection ? "input" : "content",
                        text: selectionInfo.text
                    });
                }
            });
        };
        init();
    }, []);
})();

gingerModule.load("gingerchromeext.content.onboardingBubbles", function() {
    var html = {};
    var alreadyShownInThisSession = false;
    var build = function() {
        var cont = document.body;
        html.main = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding"></gdiv>').appendTo(cont);
        html.top = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding-bubble ginger-module-correctionBubble-onboarding-top">To approve a single suggestion, mouse over it and click "✔"</gdiv>').appendTo(html.main);
        html.bottom = $gingerWidgetJquery('<gdiv class="ginger-module-correctionBubble-onboarding-bubble ginger-module-correctionBubble-onboarding-bottom">Click the bubble to approve all of its suggestions.</gdiv>').appendTo(html.main);
    };
    var show = function(e, bubbleData) {
        var mistakeTag = document.getElementsByTagName("gwbm")[0];
        if (!mistakeTag) return;
        gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function() {
            var mistakeTagOffset = $gingerWidgetJquery(mistakeTag).offset();
            var mistakeBubbleOffset = $gingerWidgetJquery(".ginger-module-correctionBubble-container-loggedin .ginger-module-correctionBubble-body").offset();
            $gingerWidgetJquery(html.top).css("top", mistakeTagOffset.top - 76);
            $gingerWidgetJquery(html.top).css("left", mistakeTagOffset.left - 45);
            $gingerWidgetJquery(html.bottom).css("top", mistakeBubbleOffset.top + 60);
            $gingerWidgetJquery(html.bottom).css("left", mistakeBubbleOffset.left - 35);
            $gingerWidgetJquery(html.main).show();
            alreadyShownInThisSession = true;
            gingerModule.get("gingerchromeext.content.storage").set("onboardingBubblesShown", true);
        }, function() {});
    };
    var hide = function() {
        if (alreadyShownInThisSession) {
            gingerModule.get("widget.correctionBubble").listen.off("hide", hide);
            gingerModule.get("widget.correctionBubble").listen.off("show", show);
            $gingerWidgetJquery(html.main).remove();
        }
    };
    var wouldOnboardingBubblesFitInViewport = function() {
        var mistakeTag = document.getElementsByTagName("gwbm")[0];
        if (!mistakeTag) return;
        var mistakeOffset = $gingerWidgetJquery(mistakeTag).offset();
        var viewportTop = $(window).scrollTop();
        var viewportBottom = viewportTop + $(window).height();
        if (mistakeOffset.top + 100 < viewPortBottom && mistakeOffset.top - 100 < viewportTop) {
            return true;
        }
        return false;
    };
    var init = function() {
        gingerModule.get("gingerchromeext.content.storage").get("onboardingBubblesShown").then(function(result) {
            if (!result) {
                var isInAnIframeElement = window.top !== window;
                var doesBubbleFitInView = wouldOnboardingBubblesFitInViewport();
                if (!isInAnIframeElement) {
                    build();
                    gingerModule.get("widget.correctionBubble").listen.on("show", show);
                    gingerModule.get("widget.correctionBubble").listen.on("hide", hide);
                }
            }
        });
    };
    init();
}, [ "gingerchromeext.content.storage" ]);

gingerModule.load("gingerchromeext.content.reloadContentScripts", function() {
    var init = function() {
        gingerModule.get("widget").listen.on("input.added", function() {
            var testElement = document.body.appendChild(document.createElement("div"));
            testElement.className = "ginger-module-highlighter-mistake-type-2";
            var elementBackgroundColor = getComputedStyle(testElement).backgroundColor;
            testElement.remove();
            if (elementBackgroundColor === "rgba(0, 0, 0, 0)") {
                gingerModule.get("gingerchromeext.browser").runtime.getManifest().content_scripts.forEach(function(manifest) {
                    if (manifest.css) {
                        manifest.css.forEach(function(cssUrlString) {
                            var cssUrl = gingerModule.get("gingerchromeext.browser").runtime.getURL(cssUrlString);
                            fetch(cssUrl).then(function(response) {
                                response.text().then(function(cssString) {
                                    var styleElement = document.createElement("style");
                                    styleElement.textContent = cssString;
                                    document.head.appendChild(styleElement);
                                });
                            });
                        });
                    }
                });
            }
        });
    };
    init();
    return {
        init: init
    };
}, [ "gingerchromeext.browser" ]);

(function() {
    var module = gingerModule.load("gingerchromeext.content.rephrasePopup", function() {
        var eventScope = $gingerWidgetJquery({});
        var isShown = false;
        var html = null;
        var scrollBindElements = [];
        var selectionInfo = null;
        var isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
        var hotKey = "d";
        var gingerInput = null;
        var gaFields = gingerModule.get("gingerchromeext.content.report").get();
        var fromIcon = false;
        var fromSynPopupButton = false;
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        var getMin = function(arr, att) {
            try {
                return arr.reduce(function(acc, el) {
                    return el[att] < acc[att] ? el : acc;
                })[att];
            } catch (e) {
                return arr && arr[0] && arr[0][att] ? arr[0][att] : 0;
            }
        };
        var getMax = function(arr, att) {
            try {
                return arr.reduce(function(acc, el) {
                    return el[att] > acc[att] ? el : acc;
                })[att];
            } catch (e) {
                return arr && arr[0] && arr[0][att] ? arr[0][att] : 0;
            }
        };
        var startRephrasingByIcon = function(fullSentence, fromButton = false) {
            fromIcon = true;
            fromSynPopupButton = fromButton;
            if (!gingerModule.get("widget").isEnabled()) return;
            if (!gingerInput.isEnabled()) return;
            try {
                if (!isGoogleDocs()) {
                    setSelectionInfo(fullSentence);
                } else {
                    selectionInfo = gingerModule.get("widget.googledocs").getSelection();
                }
            } catch (error) {
                console.error(error);
            }
            if (selectionInfo && selectionInfo.text.trim()) show(selectionInfo);
            setSelection(selectionInfo.range);
        };
        var init = function() {
            gingerModule.get("widget").listen.on("input.added", function(event, gInput) {
                gingerInput = gInput;
                var rephraseBtn = document.querySelector("#ginger__floatingG-bar-tool-rephrase__btn");
                if (!rephraseBtn) return;
                if (!gingerModule.get("widget").isEnabled()) return;
                if (!gingerInput.isEnabled()) return;
                rephraseBtn.onmousedown = function(ev) {
                    try {
                        if (!isGoogleDocs()) {
                            setSelectionInfo(true);
                        } else {
                            selectionInfo = gingerModule.get("widget.googledocs").getSelection();
                        }
                    } catch (error) {
                        console.error(error);
                    }
                };
                rephraseBtn.onclick = function(event) {
                    if (selectionInfo && selectionInfo.text.trim()) show(selectionInfo);
                    setSelection(selectionInfo.range);
                };
                gingerInput.events.listen.on("keydown", function(event, data) {
                    const clickEvent = data.event;
                    if (clickEvent?.code === "KeyE" && (clickEvent?.metaKey || clickEvent?.ctrlKey) && clickEvent?.altKey) {
                        setSelectionInfo(true);
                        if (selectionInfo && selectionInfo.text.trim()) {
                            setTimeout(() => {
                                show(selectionInfo);
                            });
                        }
                        setSelection(selectionInfo.range);
                    }
                    if (isShown) {
                        hide();
                    }
                });
                gingerInput.events.listen.on("visibility.change", function(e, isVisible) {
                    if (!isVisible) {
                        hide();
                    }
                });
            });
            document.addEventListener("click", function(event) {
                if (isShown && event.target.id !== "ginger__floatingG-bar-tool-rephrase__btn" && !event.target.classList.contains("ginger-extension__rephrase-popup__body") && !event.target.classList.contains("ginger-extension__rephrase-popup__limit-reached__link")) {
                    hide();
                }
            });
            if (gingerInput && gingerInput.events) {
                gingerInput.events.listen.on("blur", function() {
                    hide();
                });
            }
        };
        var setSelectionInfo = function(fullSentence) {
            selectionInfo = {};
            selectionInfo.text = getSelectionText(fullSentence);
            selectionInfo.range = getSelectionRange();
            selectionInfo.selectionCoordinates = getSelectionCoordinates(gingerInput ? gingerInput.element : null);
            selectionInfo.node = getSelectionNode();
        };
        var getSelectionCoordinates = function(target) {
            var sel = document.selection, range, rects, rect = null;
            try {
                if (window.getSelection) {
                    if (target) {
                        rect = gingerModule.get("gingerchromeext.content.measure").getSelectionRectFromMimic(target);
                        if (rect) {
                            return rect;
                        }
                    }
                    sel = window.getSelection();
                    if (sel.rangeCount) {
                        range = sel.getRangeAt(0).cloneRange();
                        if (range.getClientRects) {
                            rects = range.getClientRects();
                            if (rects.length === 1) {
                                rect = rects[0];
                                return rect;
                            } else if (rects.length > 1) {
                                var _react = {
                                    bottom: getMax(Object.values(rects), "bottom"),
                                    height: getMax(Object.values(rects), "height"),
                                    left: getMin(Object.values(rects), "left"),
                                    right: getMax(Object.values(rects), "right"),
                                    top: getMin(Object.values(rects), "top"),
                                    width: getMax(Object.values(rects), "width"),
                                    x: getMin(Object.values(rects), "x"),
                                    y: getMin(Object.values(rects), "y")
                                };
                                _react.height = _react.bottom - _react.bottom > _react.height ? _react.bottom - _react.bottom : _react.height;
                                _react.width = _react.left - _react.right > _react.width ? _react.left - _react.right : _react.width;
                                rect = _react;
                                return rect;
                            }
                        }
                        if (typeof x !== "undefined" && typeof y !== "undefined" && x == 0 && y == 0) {
                            var span = document.createElement("span");
                            if (span.getClientRects) {
                                span.appendChild(document.createTextNode("​"));
                                range.insertNode(span);
                                rect = $gingerWidgetJquery(span).offset();
                                var spanParent = span.parentNode;
                                spanParent.removeChild(span);
                                spanParent.normalize();
                            }
                        }
                    }
                }
            } catch (e) {
                console.error(e);
                return null;
            }
            return rect;
        };
        var getSelectionNode = function() {
            var selectionContainer = null;
            try {
                if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    selectionContainer = document.activeElement;
                } else {
                    selectionContainer = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return selectionContainer;
        };
        var getSelectionRange = function() {
            if (gingerInput.element && (gingerInput.element.tagName === "TEXTAREA" || gingerInput.element.tagName === "INPUT")) {
                return {
                    selectionEnd: gingerInput.element.selectionEnd,
                    selectionStart: gingerInput.element.selectionStart,
                    selectionDirection: gingerInput.element.selectionDirection
                };
            } else {
                return window.getSelection ? window.getSelection().getRangeAt(0).cloneRange() : null;
            }
        };
        var getSelectionText = function(fullSentence) {
            var sel = window.getSelection && window.getSelection();
            if (!sel) return "";
            if (fullSentence) {
                sel.modify("move", "forward", "sentence");
                sel.modify("extend", "backward", "sentence");
            }
            return sel.toString();
        };
        var setSelection = function(range) {
            var sel = window.getSelection && window.getSelection();
            if (!sel && !isGoogleDocs()) return "";
            if (typeof range.selectionStart !== "undefined" && typeof range.selectionEnd !== "undefined") {
                if (gingerInput && gingerInput.element) {
                    gingerInput.element.select();
                    gingerInput.element.selectionEnd = range.selectionEnd;
                    gingerInput.element.selectionStart = range.selectionStart;
                    return;
                }
            }
            sel.removeAllRanges();
            sel.addRange(range || selectionInfo && selectionInfo.range);
        };
        var prevSentence = function(range) {
            var sel = window.getSelection && window.getSelection();
            if (!sel) return "";
            setSelection(range);
            sel.modify("move", "backward", "sentence");
            sel.modify("extend", "backward", "sentence");
            selectionInfo.range = getSelectionRange();
            return sel.toString();
        };
        var nextSentence = function(range) {
            var sel = window.getSelection && window.getSelection();
            if (!sel) return "";
            setSelection(range);
            sel.modify("move", "forward", "sentence");
            sel.modify("extend", "backward", "sentence");
            selectionInfo.range = getSelectionRange();
            return sel.toString();
        };
        var replaceSelectedText = function(replacementText) {
            var _sSource = /\s/.test(selectionInfo.text.split("").reverse()[0]);
            var _sTarget = /\s/.test(replacementText.split("").reverse()[0]);
            if (_sSource && !_sTarget) {
                replacementText += " ";
            }
            var isRTE = gingerModule.get("widget.utils").isRichTextElement(gingerInput.element);
            var isReactArea = isRTE && $gingerWidgetJquery(gingerInput.element).find("[data-block='true']").length > 0 || isRTE && $gingerWidgetJquery(gingerInput.element).closest("[data-reactroot]").length;
            var areaConfig = gingerModule.get("widget.siteSettings").get(window.location.href, gingerInput.element);
            var isReactUsingApp = areaConfig.isReactUsingApp ?? false;
            if (isGoogleDocs()) {
                var cordsForReplace = selectionInfo.fullCoordinates;
                var cords = {
                    startX: cordsForReplace[0]?.rects?.left,
                    endX: cordsForReplace[cordsForReplace.length - 1]?.rects?.left + cordsForReplace[cordsForReplace.length - 1]?.rects?.width,
                    startY: cordsForReplace[0]?.rects?.top,
                    endY: cordsForReplace[cordsForReplace.length - 1]?.rects?.top,
                    startHeight: cordsForReplace[0]?.rects?.height,
                    endHeight: cordsForReplace[cordsForReplace.length - 1]?.rects?.height
                };
                gingerModule.get(areaConfig.rewriter).rewrite(replacementText, cords, true);
            }
            gingerModule.get("gingerchromeext.content.report").reporterGA4({
                event: gaFields.GAEvent.variantClick,
                category: gaFields.GACategory.Rephrase,
                trigger: gaFields.GATrigger.accept,
                interface: fromIcon ? gaFields.GAInterface.qsPopup : gaFields.GAInterface.widget,
                eventValue: window.location.hostname
            });
            if (gingerInput && gingerInput.setVal && (isReactArea || isReactUsingApp || gingerModule.get("widget.utils").isCKEditor(gingerInput.element))) {
                var end = 0;
                var start = 0;
                if (typeof selectionInfo.range.selectionStart !== "undefined" && typeof selectionInfo.range.selectionEnd !== "undefined") {
                    start = selectionInfo.range.selectionStart;
                    end = selectionInfo.range.selectionEnd;
                } else {
                    setSelection(selectionInfo.range);
                    window.getSelection().removeAllRanges();
                    var nr = new Range();
                    nr.setStart(gingerInput.element, 0);
                    nr.setEnd(selectionInfo.range.startContainer, selectionInfo.range.startOffset);
                    window.getSelection().addRange(nr);
                    start = window.getSelection().toString().replace(/\n/g, "").length;
                    end = start + selectionInfo.text.length;
                    if (_sSource && !_sTarget) {
                        end -= 1;
                    }
                    window.getSelection().removeAllRanges();
                }
                gingerInput.setVal(replacementText, start, end, gingerModule.get("widget.utils").isCKEditor(gingerInput.element) ? true : undefined);
            } else {
                var t = new window.InputEvent("beforeinput", {
                    bubbles: !0,
                    cancelable: 1,
                    inputType: "insertText",
                    data: replacementText
                });
                document.activeElement.dispatchEvent(t);
                document.execCommand("insertText", !1, replacementText);
            }
            setTimeout(function() {
                if (gingerInput && gingerInput.element) {
                    gingerInput.element.focus();
                    gingerInput.events.listen.trigger("inputchange");
                }
            }, 100);
        };
        var buildLimitReached = function() {
            var session = gingerModule.get("gingerchromeext.content.session").get();
            if (session.license === 2) {
                return "";
            }
            var premiumUrl = gingerModule.get("gingerchromeext.content.config").get("urlBase") + "/online_store/ginger_upgrade?cp=new-hp-store-topnav&autk=" + session.token;
            return '<gdiv class="ginger-extension__rephrase-popup__limit-reached__title">Free limit reached</gdiv>' + '<gdiv class="ginger-extension__rephrase-popup__limit-reached__text">Boost your creativity and style\n' + "with Unlimited Rephrasing</gdiv>" + '<a id="premiumLink" href="' + premiumUrl + '" target="_blank" class="ginger-extension__rephrase-popup__limit-reached__link">Go Premium</a>';
        };
        var clickPremiumSendGA = function() {
            gingerModule.get("gingerchromeext.content.report").reporterGA4({
                event: gaFields.GAEvent.premiumClick,
                category: gaFields.GACategory.Premium,
                trigger: gaFields.GATrigger.limitReachedRephrase,
                interface: fromIcon ? gaFields.GAInterface.qsPopup : gaFields.GAInterface.widget
            });
        };
        var build = function() {
            html = {};
            html.main = $gingerWidgetJquery("<gdiv id='gingerExtension__rephrasePopup' contenteditable='false' class='ginger-extension__rephrase-popup'></gdiv>").appendTo(document.querySelector("html"));
            html.header = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__header'>" + "<span class='ginger-extension__rephrase-popup__header-title'>Rephrase suggestions</span><div class='ginger-extension__rephrase-popup__header-logo'></div>" + "</gdiv>").appendTo(html.main);
            html.body = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__body'></gdiv>").appendTo(html.main);
            html.loader = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__loader'></gdiv>").appendTo(html.main);
            html.limitReached = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__limit-reached'>" + buildLimitReached() + "</gdiv>").appendTo(html.main);
            var premiumLink = document.getElementById("premiumLink");
            if (premiumLink) {
                premiumLink.onclick = clickPremiumSendGA;
            }
            return html;
        };
        var bindScroll = function(node) {
            if (node) {
                scrollBindElements.push(node);
                $gingerWidgetJquery(node).on("scroll.definitionScroll", function() {
                    hide();
                });
                if (node.parentNode) bindScroll(node.parentNode);
            }
        };
        var unBindScroll = function() {
            for (var i = 0; i < scrollBindElements.length; i++) {
                $gingerWidgetJquery(scrollBindElements[i]).off("scroll.definitionScroll");
            }
            scrollBindElements = [];
        };
        var addStyleToHead = function() {
            if (document.querySelector("#ginger-rewriter-selection")) {
                return;
            }
            var color = "rgba(163, 87, 217, 0.3)";
            try {
                var cssRules = "[ginger-rewriter-selection]::selection {background: " + color + "!important} [ginger-rewriter-selection] *::selection {background: " + color + "!important}";
                var ghostStyles = document.createElement("style");
                ghostStyles.id = "ginger-rewriter-selection";
                ghostStyles.type = "text/css";
                ghostStyles.textContent = cssRules;
                document.getElementsByTagName("head")[0].appendChild(ghostStyles);
            } catch (error) {
                console.error(error);
            }
        };
        var removeStyleToHead = function() {
            return document.querySelector("#ginger-rewriter-selection") && document.querySelector("#ginger-rewriter-selection").remove();
        };
        var setPositionPopup = function(selectionCoordinates) {
            if (!selectionCoordinates) return;
            var top;
            var left;
            var popupOffset = 0;
            var heightPopup = html && html.main ? $gingerWidgetJquery(html.main).outerHeight() : 130;
            var widthPopup = html && html.main ? $gingerWidgetJquery(html.main).outerWidth() : 420;
            top = selectionCoordinates.bottom + popupOffset;
            left = selectionCoordinates.left;
            var center = selectionCoordinates.width / 2 - widthPopup / 2;
            if (center) {
                left = left + center >= 0 ? left + center : left;
            }
            if (left + widthPopup > window.innerWidth) {
                left = window.innerWidth - widthPopup - popupOffset;
            }
            if (top + heightPopup > window.innerHeight) {
                top = selectionCoordinates.top - heightPopup - popupOffset;
            }
            $gingerWidgetJquery(html.main).css("left", left);
            $gingerWidgetJquery(html.main).css("top", top);
            $gingerWidgetJquery(html.main).css("z-index", 2147483646);
            $gingerWidgetJquery(html.main).fadeIn();
        };
        var show = function(config) {
            if (isShown) hide();
            isShown = true;
            if (!config.selectionCoordinates) return hide();
            if (!isGoogleDocs()) {
                addStyleToHead();
            }
            try {
                if (isGoogleDocs()) {
                    document.querySelector(".ginger-container-body").setAttribute("ginger-rewriter-selection", "true");
                } else {
                    $gingerWidgetJquery(selectionInfo.node).attr("ginger-rewriter-selection", true);
                }
            } catch (e) {
                console.error(e);
            }
            if (!html || !html.main) build();
            html.main.removeClass("ginger-extension__rephrase-popup_loading").removeClass("ginger-extension__rephrase-popup_free-limit-reached").removeClass("ginger-extension__rephrase-popup_no-rephrase");
            html.body.html("");
            html.main.addClass("ginger-extension__rephrase-popup_loading");
            setPositionPopup(config.selectionCoordinates);
            if (config.range) {
                setSelection(config.range);
            }
            gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                module: "gingerchromeext.background.rephraseLimits",
                callFunction: "get"
            }).then(function(rephraseLimited) {
                if (rephraseLimited) {
                    html.main.removeClass("ginger-extension__rephrase-popup_loading");
                    html.main.addClass("ginger-extension__rephrase-popup_free-limit-reached");
                    $gingerWidgetJquery(html.header).remove();
                    setPositionPopup(config.selectionCoordinates);
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.premiumDisplay,
                        category: gaFields.GACategory.Premium,
                        trigger: gaFields.GATrigger.limitReachedRephrase,
                        interface: fromIcon ? gaFields.GAInterface.qsPopup : gaFields.GAInterface.widget
                    });
                    return;
                }
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.rephraseLimits",
                    callFunction: "increase"
                });
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.statisticService",
                    callFunction: "increase",
                    callArgs: [ "rephrase" ]
                });
                var rephraseBtn = document.querySelector("#ginger__floatingG-bar-tool-rephrase__btn");
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.rephraseLimits",
                    callFunction: "increaseNewQuantity"
                }).then(function(qnt) {
                    if (!rephraseBtn?.parentNode) {
                        return;
                    }
                    if (rephraseBtn.parentNode.classList.contains("ginger-floatingG-bar-tool-rephrase_small-circle_priority") && !qnt || qnt <= 8) {} else {
                        if (!qnt || qnt <= 3) {
                            rephraseBtn.parentNode.classList.add("ginger-floatingG-bar-tool-rephrase_big-circle");
                        } else if (qnt > 3 && qnt <= 8) {
                            rephraseBtn.parentNode.classList.remove("ginger-floatingG-bar-tool-rephrase_big-circle");
                            rephraseBtn.parentNode.classList.add("ginger-floatingG-bar-tool-rephrase_small-circle");
                        } else {
                            rephraseBtn.parentNode.classList.remove("ginger-floatingG-bar-tool-rephrase_small-circle");
                            rephraseBtn.parentNode.classList.remove("ginger-floatingG-bar-tool-rephrase_big-circle");
                        }
                    }
                });
                getRephrase(config.text).then(function(res) {
                    var eventTrigger = fromSynPopupButton || !fromIcon ? gaFields.GATrigger.rephrase : gaFields.GATrigger.qsIcon;
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.rephraseClick,
                        category: gaFields.GACategory.Rephrase,
                        trigger: eventTrigger,
                        interface: fromIcon ? gaFields.GAInterface.qsPopup : gaFields.GAInterface.widget,
                        eventValue: window.location.hostname
                    });
                    html.main.removeClass("ginger-extension__rephrase-popup_loading");
                    if (!isShown) hide();
                    var wordLimitForRephrase = gingerModule.get("gingerchromeext.content.config").get("wordsLimitRephrase");
                    var selectedWordsLength = config.text.trim().split(/\s+/).length;
                    html.body.html("");
                    if (!res.Sentences || !res.Sentences.length || selectedWordsLength > wordLimitForRephrase) {
                        html.error = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__error'>No alternatives found (text too short, too long or too complex)</gdiv>").appendTo(html.body);
                        html.main.addClass("ginger-extension__rephrase-popup_no-rephrase");
                        setPositionPopup(config.selectionCoordinates);
                        return;
                    }
                    html.list = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__list'></gdiv>").appendTo(html.body);
                    html.list.get(0).addEventListener("mousedown", function(event) {
                        event.preventDefault();
                        event.stopPropagation();
                        var item = event.target;
                        if (!item || !item.classList.contains("ginger-extension__rephrase-popup__item")) return;
                        if (!item.dataset.sentence) return;
                        setSelection(selectionInfo.range);
                        if (window.getSelection && !window.getSelection().toString()) {
                            setSelection(selectionInfo.range);
                        }
                        replaceSelectedText(item.dataset.sentence);
                        hide();
                        $gingerWidgetJquery(config.node).trigger("paste");
                    });
                    html.items = [];
                    for (var i = 0; i < res.Sentences.length; i++) {
                        var snt = res.Sentences[i];
                        var diff = Diff.diffWords(selectionInfo.text, snt.Sentence);
                        var stringSentence = diff.filter(function(el) {
                            return !el.removed;
                        }).map(function(el) {
                            return !!el.added ? "<strong>" + el.value + "</strong>" : el.value;
                        }).join("");
                        var el = $gingerWidgetJquery("<ga class='ginger-extension__rephrase-popup__item'>" + stringSentence + "</ga>");
                        el.attr("data-sentence", snt.Sentence);
                        el.appendTo(html.list);
                        html.items.push(el);
                    }
                    setPositionPopup(config.selectionCoordinates);
                    bindScroll(config.node);
                }, function(error) {
                    console.log("Error: ", error);
                    html.error = $gingerWidgetJquery("<gdiv class='ginger-extension__rephrase-popup__error'>Server error</gdiv>").appendTo(html.body);
                    html.main.removeClass("ginger-extension__rephrase-popup_loading");
                    html.main.addClass("ginger-extension__rephrase-popup_no-rephrase");
                    setPositionPopup(config.selectionCoordinates);
                });
            });
        };
        var hide = function() {
            isShown = false;
            fromIcon = false;
            fromSynPopupButton = false;
            setTimeout(() => {
                gingerModule.get("gingerchromeext.content.floatingG").refreshPosition(gingerInput);
            });
            if (selectionInfo && !selectionInfo?.node) return;
            try {
                if (isGoogleDocs()) {
                    document.querySelector(".ginger-container-body").removeAttribute("ginger-rewriter-selection");
                } else {
                    $gingerWidgetJquery(selectionInfo?.node).removeAttr("ginger-rewriter-selection");
                }
            } catch (e) {
                console.error(e);
            }
            unBindScroll();
            if (html) $gingerWidgetJquery(html.main).remove();
            html = null;
        };
        var getRephrase = function(text) {
            return new Promise(function(resolve, reject) {
                var url = gingerModule.get("gingerchromeext.content.config").get("urlRephrase");
                var params = {
                    platform: gingerModule.get("gingerchromeext.content.config").get("platform"),
                    clientVersion: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
                    apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
                    s: (text || selectionInfo && selectionInfo.text).trim(),
                    size: 8
                };
                if (!gingerModule.get("gingerchromeext.content.session").get("isAnonym")) {
                    params.userIdentifier = gingerModule.get("gingerchromeext.content.session").get("userId");
                }
                url += "?";
                for (var k in params) {
                    if (params.hasOwnProperty(k)) {
                        url += k + "=" + encodeURI(params[k]) + "&";
                    }
                }
                url = url.slice(0, -1);
                window.fetch(url, {
                    cache: "default"
                }).then(function(response) {
                    return response.json();
                }, function(error) {
                    reject(error);
                }).then(function(result) {
                    resolve(result);
                }, function(error) {
                    reject(error);
                });
            });
        };
        init();
        return {
            show: show,
            hide: hide,
            startRephrasingByIcon: startRephrasingByIcon,
            listen: eventScope
        };
    }, [ "gingerchromeext.content.ajax", "gingerchromeext.content.config", "gingerchromeext.content.writer", "gingerchromeext.content.session", "gingerchromeext.browser", "gingerchromeext.content.storage", "gingerchromeext.content.eventListener", "gingerchromeext.content.backgroundConnector", "gingerchromeext.content.measure", "widget.utils", "widget.googledocs" ]);
})();

gingerModule.load("gingerchromeext.content.report", function() {
    var gaFields = {};
    var loadDefer = $gingerWidgetJquery.Deferred();
    gingerModule.get("gingerchromeext.content.backgroundConnector").call({
        module: "gingerchromeext.background.gaEvents",
        callFunction: "getAll"
    }, function(result) {
        gaFields = result;
        loadDefer.resolve(result);
    });
    return {
        reporterGA4: gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
            module: "gingerchromeext.background.report",
            callFunction: "reporterGA4"
        }),
        get: function(property) {
            return property ? gaFields[property] : gaFields;
        },
        loaded: loadDefer.promise()
    };
}, [ "gingerchromeext.content.backgroundConnector" ]);

gingerModule.load("gingerchromeext.content.session", function() {
    var eventScope = $gingerWidgetJquery("<eventScope>");
    var session = {};
    var loadDefer = $gingerWidgetJquery.Deferred();
    var licenseStatus = gingerModule.get("gingerchromeext.content.config").get("licenseStatus");
    var get = function(property) {
        return !!property ? session[property] : session;
    };
    var set = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "set",
        promise: true
    });
    var isLoggedIn = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "isLoggedIn",
        promise: true
    });
    var refresh = gingerModule.get("gingerchromeext.content.backgroundConnector").proxy({
        module: "gingerchromeext.background.session",
        callFunction: "refresh",
        promise: true
    });
    var setLocal = function(newSession) {
        if (JSON.stringify(newSession) === JSON.stringify(session)) return;
        if (newSession && newSession.token) {
            session = newSession;
            eventScope.trigger("login");
        } else if (newSession && newSession.isAnonym) {
            session = newSession;
            eventScope.trigger("logout");
        } else {
            session = null;
            eventScope.trigger("logout");
        }
        gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
            module: "gingerchromeext.background.correctionLimits",
            callFunction: "get"
        }).then(function(correctionLimits) {
            gingerModule.get("gingerchromeext.content.config").set("charLimit", newSession.license === licenseStatus.premium ? correctionLimits.premium : correctionLimits.free);
            eventScope.trigger("change");
        }, function(error) {
            console.warn("chrome.session.set is not supported", error);
            eventScope.trigger("change");
        });
    };
    var init = function() {
        refresh().then(function(newSession) {
            setLocal(newSession);
            loadDefer.resolve(newSession);
        });
        gingerModule.get("gingerchromeext.content.storage").listen.on("change", function(e, changes) {
            if ("session" in changes) {
                var newSession = changes.session.newValue;
                setLocal(newSession);
            }
        });
    };
    init();
    return {
        get: get,
        set: set,
        refresh: refresh,
        isLoggedIn: isLoggedIn,
        listen: eventScope,
        loaded: loadDefer.promise()
    };
}, [ "gingerchromeext.content.storage", "gingerchromeext.content.config" ]);

gingerModule.load("gingerchromeext.content.storage", function() {
    var eventScope = $gingerWidgetJquery("<eventScope>");
    var init = function() {
        gingerModule.get("gingerchromeext.browser").storage.onChanged.addListener(function(changes, namespace) {
            eventScope.trigger("change", changes, namespace);
        });
    };
    var set = function(key, value) {
        if (!key) return;
        var deferred = $gingerWidgetJquery.Deferred();
        var valueToSet = {};
        valueToSet[key] = value;
        try {
            gingerModule.get("gingerchromeext.browser").storage.sync.set(valueToSet, function() {
                deferred.resolve();
            });
        } catch (e) {
            console.warn("chrome.storage.sync.set is not supported", e);
            deferred.resolve();
        }
        return deferred.promise();
    };
    var get = function(key) {
        var deferred = $gingerWidgetJquery.Deferred();
        try {
            gingerModule.get("gingerchromeext.browser").storage.sync.get(key, function(result) {
                deferred.resolve(result[key]);
            });
        } catch (e) {
            console.warn("chrome.storage.sync.get is not supported", e);
            deferred.resolve();
        }
        return deferred.promise();
    };
    init();
    return {
        get: get,
        set: set,
        listen: eventScope
    };
}, []);

(function() {
    var module = gingerModule.load("gingerchromeext.content.synonymPopup", function() {
        var html;
        var suggestion;
        var suggestionSearched = false;
        var buttonSelection;
        var eventScope = $gingerWidgetJquery({});
        var gaFields = gingerModule.get("gingerchromeext.content.report").get();
        var isIFrame = gingerModule.get("gingerchromeext.content.config").get("isIFramePopup");
        var measure = gingerModule.get("gingerchromeext.content.measure");
        var selectionInfo;
        var maxCharsLimitForRephrase = 300;
        var maxWordsLimitForRephrase = 36;
        var minWordsForSynonyms = 1;
        var maxWordsForSynonyms = 4;
        var qsIconHeight = 24;
        var smartSugSegmentExtractionCount = 5;
        var repraseButton;
        var activeElement = null;
        var data = {
            clientVersion: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
            apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
            userIdentifier: !gingerModule.get("gingerchromeext.content.session").get("isAnonym") ? gingerModule.get("gingerchromeext.content.session").get("userId") : gingerModule.get("gingerchromeext.content.config").get("anonUserId"),
            lang: gingerModule.get("gingerchromeext.content.config").get("dialect")
        };
        var session = gingerModule.get("gingerchromeext.content.session").get();
        var gingerIn = null;
        var eventListener = gingerModule.get("gingerchromeext.content.eventListener");
        var selectedMultiWordsLength;
        var DOCS_IFRAME_SELECTOR = "iframe.docs-texteventtarget-iframe";
        var isGoogleDocs = gingerModule.get("widget.utils").isGoogleDocs;
        var getMax = function(arr, att) {
            try {
                return arr.reduce(function(acc, el) {
                    return el[att] > acc[att] ? el : acc;
                })[att];
            } catch (e) {
                return arr && arr[0] && arr[0][att] ? arr[0][att] : 0;
            }
        };
        var getMin = function(arr, att) {
            try {
                return arr.reduce(function(acc, el) {
                    return el[att] < acc[att] ? el : acc;
                })[att];
            } catch (e) {
                return arr && arr[0] && arr[0][att] ? arr[0][att] : 0;
            }
        };
        var getSelectionCoordinates = function(target) {
            var sel = document.selection, range, rects, rect = null;
            try {
                if (window.getSelection) {
                    if (target) {
                        rect = gingerModule.get("gingerchromeext.content.measure").getSelectionRectFromMimic(target);
                    }
                    if (rect) {
                        return rect;
                    }
                    sel = window.getSelection();
                    if (sel.rangeCount) {
                        range = sel.getRangeAt(0).cloneRange();
                        if (range.getClientRects) {
                            rects = range.getClientRects();
                            if (rects.length === 1) {
                                rect = rects[0];
                                return rect;
                            } else if (rects.length > 1) {
                                var _react = {
                                    bottom: getMax(Object.values(rects), "bottom"),
                                    height: getMax(Object.values(rects), "height"),
                                    left: getMin(Object.values(rects), "left"),
                                    right: getMax(Object.values(rects), "right"),
                                    top: getMin(Object.values(rects), "top"),
                                    width: getMax(Object.values(rects), "width"),
                                    x: getMin(Object.values(rects), "x"),
                                    y: getMin(Object.values(rects), "y")
                                };
                                _react.height = _react.bottom - _react.bottom > _react.height ? _react.bottom - _react.bottom : _react.height;
                                _react.width = _react.left - _react.right > _react.width ? _react.left - _react.right : _react.width;
                                rect = _react;
                                return rect;
                            }
                        }
                        if (x == 0 && y == 0) {
                            var span = document.createElement("span");
                            if (span.getClientRects) {
                                span.appendChild(document.createTextNode("​"));
                                range.insertNode(span);
                                rect = $gingerWidgetJquery(span).offset();
                                var spanParent = span.parentNode;
                                spanParent.removeChild(span);
                                spanParent.normalize();
                            }
                        }
                    }
                }
            } catch (e) {}
            return rect;
        };
        var getSelectionNode = function() {
            var selectionContainer = null;
            try {
                if (isGoogleDocs()) {
                    selectionContainer = document.querySelector(".ginger-container-body");
                } else if (document.activeElement.nodeName.toLowerCase() !== "body") {
                    selectionContainer = document.activeElement;
                } else {
                    selectionContainer = window.getSelection().anchorNode;
                }
            } catch (e) {}
            return selectionContainer;
        };
        var getSelectionText = function() {
            var text = "";
            if (window.getSelection) {
                text = window.getSelection().toString();
            } else if (document.selection && document.selection.type !== "Control") {
                text = document.selection.createRange().text;
            }
            return text;
        };
        var getSynonyms = function(word, cb) {
            var session = gingerModule.get("gingerchromeext.content.session").get();
            var limit = 6;
            if (session.license > 1) {
                limit = 12;
            }
            gingerModule.get("gingerchromeext.content.ajax").execute({
                url: gingerModule.get("gingerchromeext.content.config").get("urlSynonymsReverso") + encodeURIComponent(word) + "?rude=false&limit=" + limit,
                method: "GET",
                headers: {
                    "X-Reverso-Origin": "ginger.ext.chrome",
                    "Content-Type": "application/json"
                },
                credential: "omit",
                cache: "default"
            }).then(function(reply) {
                var synonyms = {};
                if (suggestionSearched) {
                    cb([]);
                    suggestionSearched = false;
                    return;
                }
                if (reply && reply.results && reply.resultsCount > 0) {
                    for (var key in reply.results) {
                        var result = reply.results[key];
                        result.cluster.forEach(function(clusterItem) {
                            if (!synonyms[clusterItem.pos.desc[0]]) synonyms[clusterItem.pos.desc[0]] = [];
                            synonyms[clusterItem.pos.desc[0]].push(clusterItem.word);
                        });
                    }
                } else if (reply.resultsCount === 0 && reply.suggestions && reply.suggestions[0] && reply.suggestions[0].language === "en") {
                    suggestion = reply.suggestions[0].word;
                    getSynonyms(reply.suggestions[0].word, function(result) {
                        cb(result);
                        suggestionSearched = true;
                    });
                }
                synonyms = removeDuplicates(synonyms);
                synonyms = categoryLimiter(synonyms);
                var synonymsUncategorized = [];
                for (var property in synonyms) {
                    synonymsUncategorized = synonymsUncategorized.concat(synonyms[property]);
                }
                cb(synonymsUncategorized);
            }, function(err) {
                console.error(err);
                cb([]);
            });
        };
        var removeDuplicates = function(synonyms) {
            var allSynonyms = [];
            for (var property in synonyms) {
                var synonymsToModify = JSON.parse(JSON.stringify(synonyms));
                synonyms[property].forEach(function(synonym) {
                    if (!allSynonyms.includes(synonym.toLowerCase())) {
                        allSynonyms.push(synonym.toLowerCase());
                    } else {
                        synonymsToModify[property].splice(synonymsToModify[property].indexOf(synonym), 1);
                    }
                });
            }
            return synonymsToModify;
        };
        var categoryLimiter = function(synonyms) {
            var categoriesWithItems = 0;
            for (var property in synonyms) {
                if (synonyms[property].length > 0) categoriesWithItems++;
            }
            var session = gingerModule.get("gingerchromeext.content.session").get();
            var limit = 6;
            if (session.license > 1) {
                limit = 12;
            }
            for (var property in synonyms) {
                synonyms[property] = synonyms[property].slice(0, limit / categoriesWithItems);
            }
            return synonyms;
        };
        var serializeToQueryParams = function(params) {
            var queryString = "";
            for (var key in params) {
                if (queryString != "") {
                    queryString += "&";
                }
                queryString += key + "=" + encodeURIComponent(params[key]);
            }
            return queryString;
        };
        var scrollBindElements = [];
        var bindScroll = function(node) {
            if (node) {
                scrollBindElements.push(node);
                $gingerWidgetJquery(node).on("scroll.definitionScroll", function() {
                    hide();
                });
                if (node.parentNode) bindScroll(node.parentNode);
            }
        };
        var unBindScroll = function() {
            for (var i = 0; i < scrollBindElements.length; i++) {
                $gingerWidgetJquery(scrollBindElements[i]).off("scroll.definitionScroll");
            }
            scrollBindElements = [];
        };
        var build = function() {
            if (isIFrame) {
                html = {};
                html.main = document.getElementsByTagName("html")[0].insertBefore(document.createElement("iframe"), document.getElementsByTagName("body")[0]);
                html.main.className = "ginger-extension-synonympopup";
                html.main.src = gingerModule.get("gingerchromeext.browser").runtime.getURL("ginger-popup/index.html");
                return;
            }
            html = {};
            html.main = $gingerWidgetJquery("<gdiv contenteditable='false' class='ginger-extension-synonympopup'></gdiv>").appendTo(document.querySelector("html"));
            html.title = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-title'></gdiv>").appendTo(html.main);
            html.subTitle = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-subtitle'></gdiv>").appendTo(html.main);
            html.body = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-body'></gdiv>").appendTo(html.main);
            html.footer = $gingerWidgetJquery("<gdiv class='ginger-extension-synonympopup-footer'></gdiv>").appendTo(html.main);
            html.body.addClass("ginger-extension-synonympopup-body-loading");
        };
        var replaceSynonym = function(replacementText, config) {
            var areaConfig = gingerModule.get("widget.siteSettings").get(window.location.href, document.querySelector(".ginger-container-body"));
            if (isGoogleDocs()) {
                var cordsForReplace = selectionInfo.fullCoordinates;
                var cords = {
                    startX: cordsForReplace[0]?.rects?.left,
                    endX: cordsForReplace[cordsForReplace.length - 1]?.rects?.left + cordsForReplace[cordsForReplace.length - 1]?.rects?.width,
                    startY: cordsForReplace[0]?.rects?.top,
                    endY: cordsForReplace[cordsForReplace.length - 1]?.rects?.top,
                    startHeight: cordsForReplace[0]?.rects?.height,
                    endHeight: cordsForReplace[cordsForReplace.length - 1]?.rects?.height
                };
                gingerModule.get(areaConfig.rewriter).rewrite(replacementText, cords, true);
                return;
            }
            var selection = window.getSelection();
            if (config?.selVal && !selection.toString()) {
                selection.removeAllRanges();
                selection.addRange(config.selVal);
            }
            gingerModule.get("gingerchromeext.content.report").reporterGA4({
                event: gaFields.GAEvent.variantClick,
                category: gaFields.GACategory.Synonyms,
                trigger: gaFields.GATrigger.accept,
                interface: gaFields.GAInterface.qsPopup,
                eventValue: window.location.hostname
            });
            if (!gingerModule.get("widget.utils").isCKEditor(gingerIn.element)) {
                const t = new window.InputEvent("beforeinput", {
                    bubbles: !0,
                    cancelable: 1,
                    inputType: "insertText",
                    data: replacementText
                });
                document.activeElement.dispatchEvent(t);
                document.execCommand("insertText", !1, replacementText);
            } else {
                const e = new DataTransfer();
                e.setData("text/plain", replacementText);
                const i = new ClipboardEvent("paste", {
                    clipboardData: e,
                    target: gingerIn.element,
                    dataType: "text/plain",
                    data: replacementText,
                    bubbles: !0,
                    cancelable: !0
                });
                gingerIn.element.dispatchEvent(i);
            }
        };
        var handleSpaces = function(range, textToReplace) {
            var rangeText = range.toString();
            if (rangeText.charAt(0) === " ") textToReplace = " " + textToReplace; else if (rangeText.charAt(0) === " ") textToReplace = " " + textToReplace;
            if (rangeText.charAt(rangeText.length - 1) === " ") textToReplace += " "; else if (rangeText.charAt(rangeText.length - 1) === " ") textToReplace += " ";
            return textToReplace;
        };
        var hide = function() {
            isShown = false;
            unBindScroll();
            if (html) {
                if (!isIFrame) {
                    $gingerWidgetJquery(html.main).remove();
                    html = null;
                } else {
                    html.main.style.visibility = "hidden";
                }
            }
        };
        var isTeams = function() {
            var loc = location.hostname;
            return /teams.microsoft.com/.test(loc);
        };
        var setPositionPopup = function(selectionCoordinates) {
            if (!selectionCoordinates) return;
            var top;
            var left;
            var popupOffset = 0;
            var heightPopup = html && html.main ? $gingerWidgetJquery(html.main).outerHeight() : 130;
            var widthPopup = html && html.main ? $gingerWidgetJquery(html.main).outerWidth() : 322;
            top = selectionCoordinates.bottom + popupOffset;
            left = selectionCoordinates.left;
            var center = selectionCoordinates.width / 2 - widthPopup / 2;
            var innerWidth = window.innerWidth;
            if (center) {
                left = left + center >= 0 ? left + center : left;
            }
            if (left + widthPopup > innerWidth) {
                left = innerWidth - widthPopup - popupOffset;
            }
            if (top + heightPopup > window.innerHeight) {
                top = selectionCoordinates.top - heightPopup - popupOffset;
            }
            if (isTeams()) {
                var teamsInput = document.querySelector('[data-tid="message-pane-footer"]');
                var teamsInputRects = teamsInput.getBoundingClientRect();
                var minMargin = 10;
                if (left <= teamsInputRects.left) {
                    left = teamsInputRects.left + minMargin;
                } else if (left + widthPopup >= teamsInputRects.right) {
                    left = teamsInputRects.right - widthPopup - minMargin;
                }
            }
            $gingerWidgetJquery(html.main).css("left", left);
            $gingerWidgetJquery(html.main).css("top", top);
            $gingerWidgetJquery(html.main).css("z-index", measure.findHighestZIndex() + 55);
            if (isIFrame) {
                $gingerWidgetJquery(html.main).css("padding", 0);
            }
            $gingerWidgetJquery(html.main).fadeIn();
        };
        var isShown = false;
        var show = function(config) {
            isShown = true;
            suggestion = null;
            if (isIFrame || isGoogleDocs()) {
                selectionInfo = {
                    ...config,
                    ...data
                };
            }
            if (!config.selectionCoordinates) return;
            if (!html) {
                build();
            } else {
                html.main.style.visibility = "visible";
            }
            setPositionPopup(config.selectionCoordinates);
            if (isIFrame || isGoogleDocs()) {
                config = {
                    ...config,
                    session: session,
                    tab: config.tab ? config.tab : "synonyms"
                };
                html.main.style.visibility = "hidden";
                sendMessageToApp("selection_text:" + JSON.stringify(config));
                return;
            }
            html.title.html('Synonyms for "' + config.text + '"');
            html.footer.html("");
            suggestionSearched = false;
            getSynonyms(config.text, function(synonyms) {
                var params = {
                    title: config.text,
                    synonyms: synonyms
                };
                html.body.removeClass("ginger-extension-synonympopup-body-loading");
                html.body.html("");
                if (!params.synonyms.length) {
                    html.title.html("No synonyms found.");
                } else {
                    if (suggestion) {
                        html.body.addClass("ginger-extension-synonympopup-body-not-found");
                        html.title.html('No synonyms found for "' + config.text + '"');
                        html.subTitle.addClass("visible");
                        html.subTitle.html('Showing synonyms for "' + suggestion + '"');
                    }
                    var session = gingerModule.get("gingerchromeext.content.session").get();
                    if (session.license !== 2) {
                        gingerModule.get("gingerchromeext.content.report").reporterGA4({
                            event: gaFields.GAEvent.premiumDisplay,
                            category: gaFields.GACategory.Premium,
                            trigger: gaFields.GATrigger.synonymsPopup,
                            interface: gaFields.GAInterface.widget
                        });
                        var premiumUrl = gingerModule.get("gingerchromeext.content.config").get("urlBase") + "/online_store/ginger_upgrade?cp=new-hp-store-topnav&autk=" + session.token;
                        html.footer.addClass("visible");
                        html.footer.html('Get more synonyms with Premium <a href="' + premiumUrl + '" target="_blank">Go Premium</a>');
                        html.footer.click(function() {
                            gingerModule.get("gingerchromeext.content.report").reporterGA4({
                                event: gaFields.GAEvent.premiumClick,
                                category: gaFields.GACategory.Premium,
                                trigger: gaFields.GATrigger.synonymsPopup,
                                interface: gaFields.GAInterface.widget
                            });
                        });
                    }
                    params.synonyms.forEach(function(e) {
                        var synonym = $gingerWidgetJquery('<ga class="ginger-extension-synonympopup-body-item">' + e + "</ga>").appendTo(html.body);
                        if (suggestion) return;
                        synonym.get(0).addEventListener("mousedown", function(event) {
                            getTextAndReplace(config, e, event);
                            return false;
                        }, {
                            capture: true
                        });
                    });
                }
            });
            bindScroll(config.node);
        };
        var getTextAndReplace = function(config, e, event) {
            var orig = config.text;
            var isUpperCase = orig.trim()[0] === orig.trim()[0].toUpperCase();
            if (isUpperCase) {
                e = e.slice(0, 1).toUpperCase() + e.slice(1);
            }
            var selectedText;
            if (isIFrame || isGoogleDocs()) {
                selectedText = config.text;
            } else {
                selectedText = window.getSelection().toString();
            }
            var preWS = selectedText.match(/^\s+/);
            preWS = preWS && preWS.length ? preWS[0] : "";
            var postWS = selectedText.match(/\s+$/g);
            var postWSisNL = selectedText.match(/[\n\r]+/g);
            var postWSisWSandNL = selectedText.match(/\s[\n\r]+/g);
            postWS = postWS && postWS.length && (!postWSisNL || postWSisWSandNL) ? postWS[0] : "";
            e = preWS + e + postWS;
            hide();
            $gingerWidgetJquery(config.node).trigger("focus");
            replaceSynonym(e, config);
            if (!isIFrame) {
                event.preventDefault();
            }
            $gingerWidgetJquery(config.node).trigger("paste");
        };
        var saveSelection = function() {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                return selection.getRangeAt(0).cloneRange();
            }
            return null;
        };
        var sendMessageToApp = function(msg) {
            var frame = html.main;
            if ("contentWindow" in frame && "postMessage" in frame.contentWindow) {
                frame.contentWindow.postMessage(msg, "*");
            }
        };
        var listenToMessages = function() {
            window.addEventListener("message", function(msg) {
                var message = "";
                try {
                    message = JSON.parse(msg.data);
                } catch (e) {
                    message = msg.data;
                }
                if (!message) return;
                if (!msg.data) {
                    return;
                }
                if (msg?.data.toString().startsWith("AppIsLoaded:")) {
                    show(selectionInfo);
                }
                if (msg?.data.toString().startsWith("replaceSynonym:")) {
                    var e = msg?.data.substring("replaceSynonym:".length);
                    getTextAndReplace(selectionInfo, e);
                }
                if (msg?.data.toString().startsWith("IFrameHeight:")) {
                    var height = msg?.data.substring("IFrameHeight:".length);
                    $gingerWidgetJquery(html.main).css("height", height);
                    setPositionPopup(selectionInfo.selectionCoordinates);
                    html.main.style.visibility = "visible";
                }
                if (msg?.data.toString().startsWith("closeIFrame:")) {
                    hide();
                }
                if (msg?.data.toString().startsWith("redirectToHomePage:")) {
                    window.open(gingerModule.get("gingerchromeext.content.config").get("urlBase"), "_blank");
                }
                if (msg?.data.toString().startsWith("openGingerFull:")) {
                    hide();
                    $gingerWidgetJquery(selectionInfo.node).trigger("focus");
                    gingerModule.get("gingerchromeext.content.writer").open({
                        cmd: "ginger.extension.synonyms",
                        data: {
                            text: selectionInfo.text
                        }
                    });
                }
                if (msg?.data.toString().startsWith("runRephrase:")) {
                    hide();
                    gingerIn.element.focus({
                        preventScroll: true
                    });
                    gingerModule.get("gingerchromeext.content.rephrasePopup").startRephrasingByIcon(true, true);
                }
                if (msg?.data.toString().startsWith("synonymsDisplay:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.synonymDisplay,
                        category: gaFields.GACategory.Synonyms,
                        trigger: gaFields.GATrigger.qsIcon,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("copySynonym:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.variantClick,
                        category: gaFields.GACategory.Synonyms,
                        trigger: gaFields.GATrigger.copy,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("showMoreSynonyms:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.synonymClick,
                        category: gaFields.GACategory.Synonyms,
                        trigger: gaFields.GATrigger.more,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("definitionDisplay:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.definitionDisplay,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.doubleClick,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("definitionClick:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.definitionClick,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.more,
                        interface: gaFields.GAInterface.qsPopup
                    });
                }
                if (msg?.data.toString().startsWith("definitionSeeAlso:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.definitionSeeAlso,
                        category: gaFields.GACategory.Definition,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("displayDefinitionOnWordClick:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.definitionDisplay,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.clickOnWord,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("displaySmartSuggestion:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.smartSuggestionDisplay,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.definition,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("clickSmartSuggestion:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.smartSuggestionClick,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.definition,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
                if (msg?.data.toString().startsWith("tabNavigation:")) {
                    var tab = msg?.data.substring("tabNavigation:".length);
                    var isSynTab = tab === "tab_synonyms";
                    if (isSynTab) {
                        gingerModule.get("gingerchromeext.content.report").reporterGA4({
                            event: gaFields.GAEvent.synonymDisplay,
                            category: gaFields.GACategory.Synonyms,
                            trigger: tab,
                            interface: gaFields.GAInterface.qsPopup
                        });
                    }
                }
                if (msg?.data.toString().startsWith("displayDefinitions:")) {
                    gingerModule.get("gingerchromeext.content.report").reporterGA4({
                        event: gaFields.GAEvent.definitionDisplay,
                        category: gaFields.GACategory.Definition,
                        trigger: gaFields.GATrigger.tabDefinition,
                        interface: gaFields.GAInterface.qsPopup,
                        eventValue: window.location.hostname
                    });
                }
            });
        };
        var getSelectionAndStartSynonyms = function(gingerInput, isRequestSmartSug) {
            if (!gingerInput?.element) {
                return;
            }
            const isMultiWord = !isGoogleDocs();
            if (isGoogleDocs()) {
                var gDocsSelectionObj = gingerModule.get("widget.googledocs").getSelection();
                selectionInfo = {
                    selVal: gDocsSelectionObj.range,
                    text: gDocsSelectionObj.text,
                    selectionCoordinates: gDocsSelectionObj.selectionCoordinates,
                    node: gDocsSelectionObj.node,
                    fullCoordinates: gDocsSelectionObj.fullCoordinates,
                    segment: null,
                    ...data,
                    isMultiWord: isMultiWord,
                    definitionsEnabled: true
                };
            } else {
                selectionInfo = {
                    selVal: saveSelection(),
                    text: getSelectionText(),
                    selectionCoordinates: getSelectionCoordinates(gingerInput.element),
                    node: getSelectionNode(),
                    segment: isRequestSmartSug ? gingerModule.get("widget.utils").getSelectionSurroundingText() : null,
                    ...data,
                    isMultiWord: isMultiWord,
                    definitionsEnabled: true
                };
            }
            if (selectionInfo.text) {
                activeElement = gingerInput;
                show(selectionInfo);
            }
        };
        var isNotion = function() {
            var loc = location.hostname;
            return /notion.so/.test(loc);
        };
        var init = function() {
            buttonSelection = new gingerModule.get("gingerchromeext.content.buttonSelection", true)();
            gingerModule.get("widget").listen.on("input.added", function(event, gingerInput) {
                gingerIn = gingerInput;
                document.addEventListener("mouseup", function(event) {
                    buttonSelection.remove();
                    var activeEl = !isGoogleDocs() ? document.activeElement : document.querySelector(".ginger-container-body");
                    var docsEditor = document.querySelector("div.kix-appview-editor");
                    if (isGoogleDocs() && !docsEditor?.contains(event.target)) {
                        return;
                    }
                    var isContain = activeEl && activeEl.contains(getSelectionNode()) && $gingerWidgetJquery(activeEl).is("input,textarea,*[contenteditable]") && !$gingerWidgetJquery(activeEl).is("*[contenteditable='false']");
                    if (!isNotion()) {
                        if (!isContain || activeEl !== gingerInput.element) {
                            return;
                        }
                        if (!gingerInput.isEnabled() || !gingerModule.get("widget").isEnabled()) {
                            return;
                        }
                    }
                    setTimeout(function() {
                        var selectedTextTrimmed = isGoogleDocs() ? gingerModule.get("widget.googledocs").getSelection()?.text?.trim() : window.getSelection().toString().trim();
                        if (selectedTextTrimmed && !repraseButton) {
                            selectedMultiWordsLength = selectedTextTrimmed.split(/\s+/).length;
                            if (selectedMultiWordsLength > maxWordsLimitForRephrase) {
                                return;
                            }
                            const pattern = /.*[0-9@].*/gi;
                            if (pattern.test(selectedTextTrimmed) && selectedMultiWordsLength === 1) {
                                return;
                            }
                            var bubble = document.querySelector(".ginger-module-correctionBubble");
                            var selectionCoordinates = isGoogleDocs() ? gingerModule.get("widget.googledocs").getSelection().selectionCoordinates : getSelectionCoordinates(gingerInput.element);
                            var coords = (selectionCoordinates.bottom - selectionCoordinates.top) / 2 + selectionCoordinates.top;
                            var selectedPart = event.clientY <= coords ? "top" : "bottom";
                            var synMode = selectedMultiWordsLength < maxWordsForSynonyms;
                            if (event.clientY <= selectionCoordinates.bottom + qsIconHeight && event.clientY >= selectionCoordinates.top) {
                                repraseButton = buttonSelection.create(event.clientX, selectedPart === "top" ? selectionCoordinates.top : selectionCoordinates.bottom + qsIconHeight + 5, synMode);
                            } else {
                                repraseButton = buttonSelection.create(event.clientX, event.clientY, synMode);
                            }
                            if (bubble && bubble.style.display !== "none") {
                                repraseButton.style.visibility = "hidden";
                            } else {
                                repraseButton.style.visibility = "visible";
                            }
                            repraseButton.onmousedown = function(event) {
                                event.preventDefault();
                                event.stopPropagation();
                                startSynonymsOrRephrase(gingerInput);
                            };
                        }
                    });
                });
                if (isGoogleDocs()) {
                    const docsIframe = document.querySelector(DOCS_IFRAME_SELECTOR);
                    if (docsIframe.contentWindow) {
                        docsIframe.contentWindow.addEventListener("keydown", event => {
                            keyDownHandler(event, gingerInput);
                        });
                    }
                } else {
                    gingerInput.events.listen.on("keydown", function(event, data) {
                        keyDownHandler(data.event, gingerInput);
                    });
                }
                gingerInput.events.listen.on("visibility.change", function(e, isVisible) {
                    if (!isVisible && gingerInput === activeElement) {
                        hide();
                    }
                });
            });
            document.addEventListener("click", function(event) {
                hide();
                repraseButton = null;
            });
            listenToMessages();
        };
        var keyDownHandler = function(event, gingerInput) {
            if (repraseButton && event?.code === "KeyE" && (event?.metaKey || event?.ctrlKey) && event?.altKey) {
                if (selectedMultiWordsLength < maxWordsForSynonyms) {
                    return;
                }
                setTimeout(() => {
                    event.preventDefault();
                    event.stopPropagation();
                    startSynonymsOrRephrase(gingerInput);
                });
                return;
            }
            buttonSelection.remove();
            if (isShown) {
                hide();
            }
        };
        var startSynonymsOrRephrase = function(gingerInput) {
            gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                module: "gingerchromeext.background.statisticService",
                callFunction: "increase",
                callArgs: [ gaFields.GAEventValue.iconClick ]
            });
            if (selectedMultiWordsLength === minWordsForSynonyms) {
                getSelectionAndStartSynonyms(gingerInput, true);
            }
            if (selectedMultiWordsLength > minWordsForSynonyms && selectedMultiWordsLength < maxWordsForSynonyms) {
                getSelectionAndStartSynonyms(gingerInput, false);
            }
            if (selectedMultiWordsLength >= maxWordsForSynonyms) {
                gingerModule.get("gingerchromeext.content.rephrasePopup").startRephrasingByIcon(false);
            }
        };
        init();
        return {
            show: show,
            hide: hide,
            sendMessageToApp: sendMessageToApp,
            listen: eventScope
        };
    }, [ "gingerchromeext.content.ajax", "gingerchromeext.content.config", "gingerchromeext.content.writer", "gingerchromeext.content.session", "gingerchromeext.browser", "gingerchromeext.content.storage", "gingerchromeext.content.eventListener", "gingerchromeext.content.measure", "widget.googledocs" ]);
})();

gingerModule.load("gingerchromeext.content.widget", function() {
    var blackList = [];
    var writerResultPromise;
    var isWithinIframe = false;
    var gaFields = gingerModule.get("gingerchromeext.content.report").get();
    var licenseStatus = gingerModule.get("gingerchromeext.content.config").get("licenseStatus");
    var sendPostMessage = function(message) {
        window.top.postMessage(message, "*");
    };
    var initWidget = function() {
        gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
            module: "gingerchromeext.background.correctionLimits",
            callFunction: "get"
        }).then(function(correctionLimits) {
            var charLimit = gingerModule.get("gingerchromeext.content.session").get("license") === licenseStatus.premium ? correctionLimits.premium : correctionLimits.free;
            gingerModule.get("widget").init({
                inputFinder: {
                    selector: '[gingerWidgetDebugArea] [contenteditable="true"], div[contenteditable="true"], textarea'
                },
                version: gingerModule.get("gingerchromeext.content.config").get("clientVersion"),
                apiKey: gingerModule.get("gingerchromeext.content.config").get("apiKey"),
                source: gingerModule.get("gingerchromeext.content.config").get("source"),
                userId: gingerModule.get("gingerchromeext.content.session").get().userId,
                widgetUid: gingerModule.get("gingerchromeext.content.config").get("widgetUid"),
                platform: gingerModule.get("gingerchromeext.content.config").get("platform"),
                token: gingerModule.get("gingerchromeext.content.session").get().token,
                charLimit: charLimit
            });
        });
        if (!isWithinIframe) {
            gingerModule.get("widget.licenseLimits").listen.on("triggered.approaching", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("approaching");
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.exceeded", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("exceeded");
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.onbubble", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve", function() {
                gingerModule.get("gingerchromeext.content.licenseLimits").showLimitationPopup("onbubble");
            });
            gingerModule.get("widget.correctionBubble").listen.on("show", function(event, data) {
                var correctionsQty = data.shownCorrections;
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionDisplay,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: data.target,
                    eventValue: window.location.hostname,
                    multiEvents: correctionsQty
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
                gingerModule.get("gingerchromeext.content.marketingPopups").pollForNewMessage("approve.one");
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionApproveClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget,
                    eventValue: window.location.hostname
                });
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.statisticService",
                    callFunction: "increase",
                    callArgs: [ "correction" ]
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function() {
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionIgnoreClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function(event, data) {
                var correctionsQty = data.shownCorrections;
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionIgnoreClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget,
                    multiEvents: correctionsQty
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function(event, data) {
                var correctionsQty = data.shownCorrections;
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionApproveClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget,
                    eventValue: window.location.hostname,
                    multiEvents: correctionsQty
                });
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.statisticService",
                    callFunction: "increase",
                    callArgs: [ "correction", correctionsQty ]
                });
                gingerModule.get("gingerchromeext.content.marketingPopups").pollForNewMessage("approve.all");
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve", function() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "WordBubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "WordBubble"
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("inlineAuth.open", function(e, data) {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: "FloatingGBackTo"
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.open", function(e, data) {
                gingerModule.get("gingerchromeext.content.synonymPopup").hide();
                gingerModule.get("gingerchromeext.content.writer").open(data);
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.hide", function() {
                gingerModule.get("gingerchromeext.content.writer").hide();
            });
        } else {
            gingerModule.get("widget.licenseLimits").listen.on("triggered.approaching", function() {
                sendPostMessage({
                    cmd: "ginger.extension.licenseLimits",
                    type: "approaching"
                });
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.exceeded", function() {
                sendPostMessage({
                    cmd: "ginger.extension.licenseLimits",
                    type: "exceeded"
                });
            });
            gingerModule.get("widget.licenseLimits").listen.on("triggered.onbubble", function() {
                sendPostMessage({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve.all", function() {
                sendPostMessage({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("limited.approve", function() {
                sendPostMessage({
                    cmd: "ginger.extension.licenseLimits",
                    type: "onbubble"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("show", function(event, data) {
                var correctionsQty = data.shownCorrections;
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionDisplay,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: data.target,
                    eventValue: window.location.hostname,
                    multiEvents: correctionsQty
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approved.mistake", function() {
                sendPostMessage({
                    cmd: "ginger.extension.pollMessage"
                });
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionApproveClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget,
                    eventValue: window.location.hostname
                });
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.statisticService",
                    callFunction: "increase",
                    callArgs: [ "correction" ]
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignored.mistake", function() {
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionIgnoreClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("ignore.all", function(event, data) {
                var correctionsQty = data.shownCorrections;
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionIgnoreClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget,
                    multiEvents: correctionsQty
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("approve.all", function(event, data) {
                var correctionsQty = data.shownCorrections;
                gingerModule.get("gingerchromeext.content.report").reporterGA4({
                    event: gaFields.GAEvent.suggestionApproveClick,
                    category: gaFields.GACategory.Correct,
                    trigger: gaFields.GATrigger.edit,
                    interface: gaFields.GAInterface.widget,
                    eventValue: window.location.hostname,
                    multiEvents: correctionsQty
                });
                gingerModule.get("gingerchromeext.content.backgroundConnector").callPromise({
                    module: "gingerchromeext.background.statisticService",
                    callFunction: "increase",
                    callArgs: [ "correction", correctionsQty ]
                });
                sendPostMessage({
                    cmd: "ginger.extension.pollMessage"
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve", function() {
                sendPostMessage({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "WordBubble"
                    }
                });
            });
            gingerModule.get("widget.correctionBubble").listen.on("unauthenticated.approve.all", function() {
                sendPostMessage({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "WordBubble"
                    }
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("inlineAuth.open", function() {
                sendPostMessage({
                    cmd: "ginger.extension.inlineAuth.open",
                    params: {
                        trigger: "FloatingG"
                    }
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.open", function(e, data) {
                sendPostMessage({
                    cmd: "ginger.extension.writer.open",
                    data: {
                        data: data.data,
                        sendToWindow: true,
                        cmd: "ginger.extension.setText"
                    }
                });
            });
            gingerModule.get("gingerchromeext.content.floatingG").listen.on("writer.hide", function() {
                sendPostMessage({
                    cmd: "ginger.extension.writer.hide"
                });
            });
        }
        gingerModule.get("widget.session").set(gingerModule.get("gingerchromeext.content.session").get());
        gingerModule.get("gingerchromeext.content.session").listen.on("change", function() {
            gingerModule.get("widget.session").set(gingerModule.get("gingerchromeext.content.session").get());
        });
        gingerModule.get("gingerchromeext.content.storage").get("dialect").then(function(result) {
            if (!result) {
                gingerModule.get("widget.config").set("dialect", "US");
                gingerModule.get("gingerchromeext.content.config").set("dialect", "US");
            } else {
                gingerModule.get("widget.config").set("dialect", result);
                gingerModule.get("gingerchromeext.content.config").set("dialect", result);
            }
        });
    };
    var getDomainOfUrl = gingerModule.get("widget.utils").getDomainOfUrl;
    var isUrlBlacklisted = function(url) {
        if (!url) url = window.location.href;
        return blackList.indexOf(getDomainOfUrl(url)) !== -1;
    };
    var init = function() {
        isWithinIframe = window.top !== window;
        var isSupported = !gingerModule.get("widget.siteSettings").get(window.location.href).domainDisabled;
        if (window.frameElement && window.top !== window.self) {
            try {
                isSupported = isSupported && !gingerModule.get("widget.siteSettings").get(window.frameElement.ownerDocument.defaultView.location.href).disabled;
            } catch (e) {
                console.error(e);
            }
        }
        if (!isSupported) return;
        gingerModule.get("gingerchromeext.content.storage").get("domainBlackList").then(function(result) {
            blackList = result || [];
            if (gingerModule.get("widget").isEnabled() && isUrlBlacklisted()) {
                gingerModule.get("widget").disable();
            } else if (!gingerModule.get("widget").isEnabled() && !isUrlBlacklisted()) {}
        });
        gingerModule.get("gingerchromeext.content.storage").listen.on("change", function(e, change) {
            if ("dialect" in change) {
                gingerModule.get("gingerchromeext.content.config").set("dialect", change["dialect"].newValue);
                gingerModule.get("widget.config").set("dialect", change["dialect"].newValue);
            } else if ("domainBlackList" in change) {
                blackList = change["domainBlackList"].newValue;
                if (gingerModule.get("widget").isEnabled() && isUrlBlacklisted()) {
                    gingerModule.get("widget").disable();
                } else if (!gingerModule.get("widget").isEnabled() && !isUrlBlacklisted()) {
                    gingerModule.get("widget").enable();
                }
            }
        });
        initWidget();
        gingerModule.get("gingerchromeext.content.floatingG").init();
    };
    if (document.body && !document.getElementById("webkit-xml-viewer-source-xml")) {
        gingerModule.get("gingerchromeext.content.config").loaded.then(function() {
            gingerModule.get("gingerchromeext.content.report").loaded.then(function() {
                gingerModule.get("gingerchromeext.content.session").loaded.then(function() {
                    init();
                });
            });
        });
    }
    function updateBlackList(url) {
        const host = getDomainOfUrl(url);
        const hostIndexInBlackListArray = blackList.indexOf(host);
        if (hostIndexInBlackListArray === -1) {
            blackList.push(host);
            gingerModule.get("gingerchromeext.content.storage").set("domainBlackList", blackList);
        } else {
            blackList.splice(hostIndexInBlackListArray, 1);
            gingerModule.get("gingerchromeext.content.storage").set("domainBlackList", blackList);
        }
    }
    return {
        updateBlackList: updateBlackList
    };
}, [ "gingerchromeext.content.config", "gingerchromeext.content.backgroundConnector", "widget.licenseLimits", "gingerchromeext.content.storage", "gingerchromeext.content.marketingPopups", "gingerchromeext.content.onboardingBubbles", "widget.report" ]);

(function() {
    var module = gingerModule.load("gingerchromeext.content.writer", function() {
        "use strict";
        var writer = {};
        var eventScope = $gingerWidgetJquery({});
        var activeElement;
        var activeWindow;
        var hasWriterLoaded = false;
        var measure = gingerModule.get("gingerchromeext.content.measure");
        var build = function() {
            writer.main = document.body.appendChild(document.createElement("gdiv"));
            writer.main.style.display = "none";
            writer.main.className = "ginger-extension-writer";
            writer.main.addEventListener("click", function() {
                if (!/\/ginger-writer/.test(location.href)) hideWithReplace();
            });
            writer.frame = writer.main.appendChild(document.createElement("gdiv"));
            writer.frame.className = "ginger-extension-writer-frame";
            writer.iframe = writer.frame.appendChild(document.createElement("iframe"));
            writer.iframe.src = gingerModule.get("gingerchromeext.browser").runtime.getURL("writer/index.html");
            return writer;
        };
        var open = function(params) {
            if (!writer.main || !writer.main.parentNode) build();
            if (/\/ginger-writer/.test(location.href)) {
                $gingerWidgetJquery(writer.main).show();
                return;
            }
            gingerModule.get("gingerchromeext.content.session").isLoggedIn().then(function resolved() {
                if (params && params.cmd) {
                    if (hasWriterLoaded) {
                        sendMessageToWriter(params);
                    } else {
                        eventScope.one("writer.loaded", function() {
                            sendMessageToWriter(params);
                        });
                    }
                }
                $gingerWidgetJquery(writer.main).css("z-index", measure.findHighestZIndex() + 30);
                $gingerWidgetJquery(writer.main).fadeIn();
            }, function rejected() {
                gingerModule.get("gingerchromeext.content.inlineAuth").open({
                    trigger: params && params.trigger ? params.trigger : "FloatingG"
                }).then(function() {
                    open(params);
                }, function() {});
            });
        };
        var hide = function() {
            if (activeElement) $gingerWidgetJquery(activeElement.element).focus();
            $gingerWidgetJquery(writer.main).hide();
            activeElement = null;
        };
        var hideWithReplace = function() {
            sendMessageToWriter({
                cmd: "ginger.extension.callReturnText"
            });
        };
        var sendMessageToWriter = function(msg) {
            var frame = writer.iframe;
            frame.contentWindow.postMessage(msg, "*");
        };
        var listenToMessages = function() {
            window.addEventListener("message", function(msg) {
                var message = {};
                try {
                    message = JSON.parse(msg.data);
                } catch (e) {
                    message = msg.data;
                }
                if (!message) return;
                if (message.cmd === "ginger.extension.returnText") {
                    gingerModule.get("widget.licenseLimits").retrieveApprovalsLeft(true);
                    gingerModule.get("widget.cache").restore(message.cache);
                    hide();
                    if (activeWindow) {
                        activeWindow.postMessage(message, "*");
                    } else {
                        activeElement = gingerModule.get("gingerchromeext.content.floatingG").getActiveElement();
                        if (activeElement) {
                            if (message.representation) {
                                activeElement.setRepresentation(message.representation);
                            }
                            activeElement.setVal(message.text);
                            setTimeout(function() {
                                activeElement.element.focus();
                            }, 100);
                        }
                    }
                } else if (message.cmd === "ginger.extension.writer.open") {
                    activeWindow = null;
                    if (message.data.sendToWindow) {
                        activeWindow = msg.source;
                    }
                    open(message.data);
                } else if (message.cmd === "ginger.extension.writer.hide") {
                    hide();
                } else if (message.cmd === "ginger.extension.writer.loaded") {
                    hasWriterLoaded = true;
                    eventScope.trigger("writer.loaded");
                }
            });
        };
        var init = function() {
            if (window.self === window.parent) {
                build();
            }
            gingerModule.get("gingerchromeext.content.inlineAuth").listen.on("auth.cancelled", function() {
                sendMessageToWriter({
                    cmd: "ginger.inlineAuth.cancelled"
                });
            });
            listenToMessages();
        };
        $gingerWidgetJquery(init);
        return {
            open: open,
            hide: hide,
            listen: eventScope
        };
    }, [ "gingerchromeext.content.report", "gingerchromeext.content.session", "widget.api", "widget.correctionService", "gingerchromeext.content.inlineAuth", "gingerchromeext.content.measure" ]);
})();

gingerModule.get("gingerchromeext.content.config").loaded.then(function() {
    gingerModule.get("gingerchromeext.content.report").loaded.then(function() {
        gingerModule.get("gingerchromeext.content.session").loaded.then(function() {
            gingerModule.get("gingerchromeext.content.init");
        });
    });
});
//# sourceMappingURL=content.min.js.map